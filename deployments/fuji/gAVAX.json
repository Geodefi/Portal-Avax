{
  "address": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newInterface",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        }
      ],
      "name": "InterfaceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_interface",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Interface",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "setInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pricePerShare_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setPricePerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "Minter",
          "type": "address"
        }
      ],
      "name": "updateMinterPauserOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
  "receipt": {
    "to": null,
    "from": "0x1B007c50E78ed35fDFAd395BC41C1DBD8Bb9E385",
    "contractAddress": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
    "transactionIndex": 1,
    "gasUsed": "3164893",
    "logsBloom": "0x
    "blockHash": "0x2a1c70ab5d0159be649e2d6a5ffe1ce217c46f2ece85487ca79d9232767b72bb",
    "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10878125,
        "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
        "address": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x2a1c70ab5d0159be649e2d6a5ffe1ce217c46f2ece85487ca79d9232767b72bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10878125,
        "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
        "address": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x2a1c70ab5d0159be649e2d6a5ffe1ce217c46f2ece85487ca79d9232767b72bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10878125,
        "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
        "address": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x2a1c70ab5d0159be649e2d6a5ffe1ce217c46f2ece85487ca79d9232767b72bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10878125,
        "transactionHash": "0x7f9e1f04a1bd522395ebcf9de040279e72eda759212fc5a6552cf43f96b57210",
        "address": "0xa1DBBb8a3c797295c9315720f41dF72b16f41fBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef1",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385",
          "0x0000000000000000000000001b007c50e78ed35fdfad395bc41c1dbd8bb9e385"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x2a1c70ab5d0159be649e2d6a5ffe1ce217c46f2ece85487ca79d9232767b72bb"
      }
    ],
    "blockNumber": 10878125,
    "cumulativeGasUsed": "3312008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://api.geode.fi/gavax"
  ],
  "solcInputHash": "492b8174343aef947d9cd2113004784d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInterface\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interface\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Interface\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPricePerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"updateMinterPauserOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is _doSafeTransferAcceptanceCheck is being virtual: // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol diffchecker link: https://www.diffchecker.com/UOAdD16A\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"See {IERC1155-safeTransferFrom}.CHANGED for gAVAXADDED \\\"|| isInterface(_msgSender(),id))\\\"\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isInterface(address,uint256)\":{\"details\":\"ADDED for gAVAX\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pricePerShare(uint256)\":{\"details\":\"ADDED for gAVAX\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.CHANGED for gAVAXinterfaces can move your tokens without asking you.ADDED \\\"|| isInterface(_msgSender(),id))\\\"\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setInterface(address,uint256,bool)\":{\"details\":\"ADDED for gAVAX\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"updateMinterPauserOracle(address)\":{\"details\":\"MinterPauserOracle is basically a superUser, there can be only 1 at a given time, intended as \\\"Portal\\\"\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_interfaces\":{\"details\":\"ADDED for gAVAX\"},\"_pricePerShare\":{\"details\":\"ADDED for gAVAXfreshly assigned ids should return 1e18 since initally 1 AVAX = 1 gAVAX*\"}},\"title\":\"Geode Finance geode-avax: gAVAX One of the unique functionalities are the included price logic that tracks the underlaying ratio with staked asset, AVAX. Other and most important change is the implementation of ERC1155Interfaces. This addition effectively result in changes in safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() functions, reasoning is in the comments.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isInterface(address,uint256)\":{\"notice\":\"checks if an address is defined as an interface for the given Planet id.\"},\"setInterface(address,uint256,bool)\":{\"notice\":\"to be used to set an an address of a contract that will be behaved as an interface by gAVAX contract for a spesific ID\"},\"updateMinterPauserOracle(address)\":{\"notice\":\"updates the authorized party for all crucial operations related to minting, pricing and interfaces.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/gAVAX.sol\":\"gAVAX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Portal/gAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"./helpers/ERC1155SupplyMinterPauser.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Geode Finance geode-avax: gAVAX\\r\\n *\\r\\n * One of the unique functionalities are the included price logic that tracks the underlaying ratio with\\r\\n * staked asset, AVAX.\\r\\n * Other and most important change is the implementation of ERC1155Interfaces.\\r\\n * This addition effectively result in changes in safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck()\\r\\n * functions, reasoning is in the comments.\\r\\n *\\r\\n * @dev only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is\\r\\n * _doSafeTransferAcceptanceCheck is being virtual:\\r\\n * // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\\r\\n * // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\r\\n * diffchecker link: https://www.diffchecker.com/UOAdD16A\\r\\n */\\r\\n\\r\\ncontract gAVAX is ERC1155SupplyMinterPauser {\\r\\n  using Address for address;\\r\\n  event InterfaceChanged(address indexed newInterface, uint256 ID);\\r\\n\\r\\n  bytes32 public constant ORACLE_ROLE = keccak256(\\\"ORACLE_ROLE\\\");\\r\\n  string public constant name = \\\"Geode Staked AVAX\\\";\\r\\n  string public constant symbol = \\\"gAVAX\\\";\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   * @notice Mapping from planet IDs to ERC1155interface implementation addresses\\r\\n   * There can be multiple Interfaces for 1 planet(staking pool).\\r\\n   **/\\r\\n  mapping(uint256 => mapping(address => bool)) private _interfaces;\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   * @notice shows the underlying AVAX for 1 staked gAVAX for a given asset id\\r\\n   * @dev freshly assigned ids should return 1e18 since initally 1 AVAX = 1 gAVAX\\r\\n   **/\\r\\n  mapping(uint256 => uint256) private _pricePerShare;\\r\\n\\r\\n  constructor(string memory uri) ERC1155SupplyMinterPauser(uri) {\\r\\n    _setupRole(ORACLE_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   * @notice checks if an address is defined as an interface for the given Planet id.\\r\\n   */\\r\\n  function isInterface(address _interface, uint256 id)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(\\r\\n      _interface != address(0),\\r\\n      \\\"gAVAX: interface query for the zero address\\\"\\r\\n    );\\r\\n\\r\\n    return _interfaces[id][_interface];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   * @dev only authorized parties should set the interface as this is super crucial.\\r\\n   */\\r\\n  function _setInterface(\\r\\n    address _Interface,\\r\\n    uint256 _id,\\r\\n    bool isSet\\r\\n  ) internal virtual {\\r\\n    require(\\r\\n      _Interface != address(0),\\r\\n      \\\"gAVAX: interface query for the zero address\\\"\\r\\n    );\\r\\n\\r\\n    _interfaces[_id][_Interface] = isSet;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   * @notice to be used to set an an address of a contract that will\\r\\n   * be behaved as an interface by gAVAX contract for a spesific ID\\r\\n   */\\r\\n  function setInterface(\\r\\n    address _Interface,\\r\\n    uint256 _id,\\r\\n    bool isSet\\r\\n  ) external virtual {\\r\\n    require(\\r\\n      hasRole(MINTER_ROLE, _msgSender()),\\r\\n      \\\"gAVAX: must have MINTER_ROLE to set\\\"\\r\\n    );\\r\\n    require(_Interface.isContract(), \\\"gAVAX: _Interface must be a contract\\\");\\r\\n\\r\\n    _setInterface(_Interface, _id, isSet);\\r\\n\\r\\n    emit InterfaceChanged(_Interface, _id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   */\\r\\n  function pricePerShare(uint256 _id) external view returns (uint256) {\\r\\n    return _pricePerShare[_id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev ADDED for gAVAX\\r\\n   */\\r\\n  function _setPricePerShare(uint256 pricePerShare_, uint256 _id)\\r\\n    internal\\r\\n    virtual\\r\\n  {\\r\\n    _pricePerShare[_id] = pricePerShare_;\\r\\n  }\\r\\n\\r\\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id)\\r\\n    external\\r\\n    virtual\\r\\n  {\\r\\n    require(\\r\\n      hasRole(ORACLE_ROLE, _msgSender()),\\r\\n      \\\"gAVAX: must have ORACLE to set\\\"\\r\\n    );\\r\\n\\r\\n    _setPricePerShare(pricePerShare_, _id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice updates the authorized party for all crucial operations related to\\r\\n   * minting, pricing and interfaces.\\r\\n   * @dev MinterPauserOracle is basically a superUser, there can be only 1 at a given time,\\r\\n   * intended as \\\"Portal\\\"\\r\\n   */\\r\\n  function updateMinterPauserOracle(address Minter) external virtual {\\r\\n    require(\\r\\n      hasRole(MINTER_ROLE, _msgSender()),\\r\\n      \\\"gAVAX: must have MINTER_ROLE to set\\\"\\r\\n    );\\r\\n\\r\\n    renounceRole(MINTER_ROLE, _msgSender());\\r\\n    renounceRole(PAUSER_ROLE, _msgSender());\\r\\n    renounceRole(ORACLE_ROLE, _msgSender());\\r\\n\\r\\n    _setupRole(MINTER_ROLE, Minter);\\r\\n    _setupRole(PAUSER_ROLE, Minter);\\r\\n    _setupRole(ORACLE_ROLE, Minter);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-safeTransferFrom}.\\r\\n   * @dev CHANGED for gAVAX\\r\\n   * @dev interfaces can move your tokens without asking you.\\r\\n   * @dev ADDED \\\"|| isInterface(_msgSender(),id))\\\"\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) public virtual override {\\r\\n    require(\\r\\n      from == _msgSender() ||\\r\\n        (isApprovedForAll(from, _msgSender()) || isInterface(_msgSender(), id)),\\r\\n      \\\"ERC1155: caller is not owner nor interface nor approved\\\"\\r\\n    );\\r\\n\\r\\n    _safeTransferFrom(from, to, id, amount, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-safeTransferFrom}.\\r\\n   * @dev CHANGED for gAVAX\\r\\n   * @dev ADDED \\\"|| isInterface(_msgSender(),id))\\\"\\r\\n   */\\r\\n  function burn(\\r\\n    address account,\\r\\n    uint256 id,\\r\\n    uint256 value\\r\\n  ) public virtual override {\\r\\n    require(\\r\\n      account == _msgSender() ||\\r\\n        (isApprovedForAll(account, _msgSender()) ||\\r\\n          isInterface(_msgSender(), id)),\\r\\n      \\\"ERC1155: caller is not owner nor interface nor approved\\\"\\r\\n    );\\r\\n\\r\\n    _burn(account, id, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice interfaces should handle their own Checks in the contract\\r\\n   * @dev See {IERC1155-safeTransferFrom}.\\r\\n   * @dev CHANGED for gAVAX\\r\\n   * @dev ADDED \\\"&& !isInterface(_msgSender(),id))\\\"\\r\\n   */\\r\\n  function _doSafeTransferAcceptanceCheck(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) internal virtual override {\\r\\n    if (to.isContract() && !isInterface(operator, id)) {\\r\\n      try\\r\\n        IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)\\r\\n      returns (bytes4 response) {\\r\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n        }\\r\\n      } catch Error(string memory reason) {\\r\\n        revert(reason);\\r\\n      } catch {\\r\\n        revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x18b1646c4779556b2576062621cfbd874d53d61eab4d7c34cbbdbd5f1e9ffa0e\",\"license\":\"MIT\"},\"contracts/Portal/helpers/ERC1155SupplyMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * ERC1155SupplyMinterPauser is an ERC1155 implementation that inherites openzeppelin ERC1155PresetMinterPauser which also inherites ERC1155PresetMinterPauser\\r\\n *\\r\\n * @dev only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is\\r\\n * _doSafeTransferAcceptanceCheck is being virtual:\\r\\n * // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\\r\\n * // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\r\\n * diffchecker link: https://www.diffchecker.com/UOAdD16A\\r\\n */\\r\\n\\r\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\r\\n  using Address for address;\\r\\n\\r\\n  // Mapping from token ID to account balances\\r\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\r\\n\\r\\n  // Mapping from account to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n  string private _uri;\\r\\n\\r\\n  /**\\r\\n   * @dev See {_setURI}.\\r\\n   */\\r\\n  constructor(string memory uri_) {\\r\\n    _setURI(uri_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC1155).interfaceId ||\\r\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155MetadataURI-uri}.\\r\\n   *\\r\\n   * This implementation returns the same URI for *all* token types. It relies\\r\\n   * on the token type ID substitution mechanism\\r\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n   *\\r\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\r\\n   * actual token type ID.\\r\\n   */\\r\\n  function uri(uint256) public view virtual override returns (string memory) {\\r\\n    return _uri;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-balanceOf}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function balanceOf(address account, uint256 id)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(\\r\\n      account != address(0),\\r\\n      \\\"ERC1155: address zero is not a valid owner\\\"\\r\\n    );\\r\\n    return _balances[id][account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-balanceOfBatch}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `accounts` and `ids` must have the same length.\\r\\n   */\\r\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    require(\\r\\n      accounts.length == ids.length,\\r\\n      \\\"ERC1155: accounts and ids length mismatch\\\"\\r\\n    );\\r\\n\\r\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\r\\n\\r\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\r\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\r\\n    }\\r\\n\\r\\n    return batchBalances;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    _setApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address account, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[account][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) public virtual override {\\r\\n    require(\\r\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\r\\n      \\\"ERC1155: caller is not token owner nor approved\\\"\\r\\n    );\\r\\n    _safeTransferFrom(from, to, id, amount, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\r\\n   */\\r\\n  function safeBatchTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) public virtual override {\\r\\n    require(\\r\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\r\\n      \\\"ERC1155: caller is not token owner nor approved\\\"\\r\\n    );\\r\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n   *\\r\\n   * Emits a {TransferSingle} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n   * acceptance magic value.\\r\\n   */\\r\\n  function _safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) internal virtual {\\r\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n\\r\\n    address operator = _msgSender();\\r\\n    uint256[] memory ids = _asSingletonArray(id);\\r\\n    uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    uint256 fromBalance = _balances[id][from];\\r\\n    require(\\r\\n      fromBalance >= amount,\\r\\n      \\\"ERC1155: insufficient balance for transfer\\\"\\r\\n    );\\r\\n    unchecked {\\r\\n      _balances[id][from] = fromBalance - amount;\\r\\n    }\\r\\n    _balances[id][to] += amount;\\r\\n\\r\\n    emit TransferSingle(operator, from, to, id, amount);\\r\\n\\r\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\r\\n   *\\r\\n   * Emits a {TransferBatch} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n   * acceptance magic value.\\r\\n   */\\r\\n  function _safeBatchTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual {\\r\\n    require(\\r\\n      ids.length == amounts.length,\\r\\n      \\\"ERC1155: ids and amounts length mismatch\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n\\r\\n    address operator = _msgSender();\\r\\n\\r\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    for (uint256 i = 0; i < ids.length; ++i) {\\r\\n      uint256 id = ids[i];\\r\\n      uint256 amount = amounts[i];\\r\\n\\r\\n      uint256 fromBalance = _balances[id][from];\\r\\n      require(\\r\\n        fromBalance >= amount,\\r\\n        \\\"ERC1155: insufficient balance for transfer\\\"\\r\\n      );\\r\\n      unchecked {\\r\\n        _balances[id][from] = fromBalance - amount;\\r\\n      }\\r\\n      _balances[id][to] += amount;\\r\\n    }\\r\\n\\r\\n    emit TransferBatch(operator, from, to, ids, amounts);\\r\\n\\r\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\r\\n   * substitution mechanism\\r\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n   *\\r\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\r\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\r\\n   * clients with the token type ID.\\r\\n   *\\r\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\r\\n   * interpreted by clients as\\r\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\r\\n   * for token type ID 0x4cce0.\\r\\n   *\\r\\n   * See {uri}.\\r\\n   *\\r\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\r\\n   * this function emits no events.\\r\\n   */\\r\\n  function _setURI(string memory newuri) internal virtual {\\r\\n    _uri = newuri;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\r\\n   *\\r\\n   * Emits a {TransferSingle} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n   * acceptance magic value.\\r\\n   */\\r\\n  function _mint(\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) internal virtual {\\r\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n\\r\\n    address operator = _msgSender();\\r\\n    uint256[] memory ids = _asSingletonArray(id);\\r\\n    uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n    _balances[id][to] += amount;\\r\\n    emit TransferSingle(operator, address(0), to, id, amount);\\r\\n\\r\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n    _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\r\\n   *\\r\\n   * Emits a {TransferBatch} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `ids` and `amounts` must have the same length.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n   * acceptance magic value.\\r\\n   */\\r\\n  function _mintBatch(\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual {\\r\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n    require(\\r\\n      ids.length == amounts.length,\\r\\n      \\\"ERC1155: ids and amounts length mismatch\\\"\\r\\n    );\\r\\n\\r\\n    address operator = _msgSender();\\r\\n\\r\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n    for (uint256 i = 0; i < ids.length; i++) {\\r\\n      _balances[ids[i]][to] += amounts[i];\\r\\n    }\\r\\n\\r\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\r\\n\\r\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n    _doSafeBatchTransferAcceptanceCheck(\\r\\n      operator,\\r\\n      address(0),\\r\\n      to,\\r\\n      ids,\\r\\n      amounts,\\r\\n      data\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\r\\n   *\\r\\n   * Emits a {TransferSingle} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `from` must have at least `amount` tokens of token type `id`.\\r\\n   */\\r\\n  function _burn(\\r\\n    address from,\\r\\n    uint256 id,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n\\r\\n    address operator = _msgSender();\\r\\n    uint256[] memory ids = _asSingletonArray(id);\\r\\n    uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n\\r\\n    uint256 fromBalance = _balances[id][from];\\r\\n    require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[id][from] = fromBalance - amount;\\r\\n    }\\r\\n\\r\\n    emit TransferSingle(operator, from, address(0), id, amount);\\r\\n\\r\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\r\\n   *\\r\\n   * Emits a {TransferBatch} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `ids` and `amounts` must have the same length.\\r\\n   */\\r\\n  function _burnBatch(\\r\\n    address from,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts\\r\\n  ) internal virtual {\\r\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n    require(\\r\\n      ids.length == amounts.length,\\r\\n      \\\"ERC1155: ids and amounts length mismatch\\\"\\r\\n    );\\r\\n\\r\\n    address operator = _msgSender();\\r\\n\\r\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < ids.length; i++) {\\r\\n      uint256 id = ids[i];\\r\\n      uint256 amount = amounts[i];\\r\\n\\r\\n      uint256 fromBalance = _balances[id][from];\\r\\n      require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n      unchecked {\\r\\n        _balances[id][from] = fromBalance - amount;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\r\\n\\r\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function _setApprovalForAll(\\r\\n    address owner,\\r\\n    address operator,\\r\\n    bool approved\\r\\n  ) internal virtual {\\r\\n    require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\r\\n    _operatorApprovals[owner][operator] = approved;\\r\\n    emit ApprovalForAll(owner, operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any token transfer. This includes minting\\r\\n   * and burning, as well as batched variants.\\r\\n   *\\r\\n   * The same hook is called on both single and batched variants. For single\\r\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n   *\\r\\n   * Calling conditions (for each `id` and `amount` pair):\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * of token type `id` will be  transferred to `to`.\\r\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\r\\n   * for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\r\\n   * will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   * - `ids` and `amounts` have the same, non-zero length.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after any token transfer. This includes minting\\r\\n   * and burning, as well as batched variants.\\r\\n   *\\r\\n   * The same hook is called on both single and batched variants. For single\\r\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n   *\\r\\n   * Calling conditions (for each `id` and `amount` pair):\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * of token type `id` will be  transferred to `to`.\\r\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\r\\n   * for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\r\\n   * will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   * - `ids` and `amounts` have the same, non-zero length.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _afterTokenTransfer(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual {}\\r\\n\\r\\n  function _doSafeTransferAcceptanceCheck(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) internal virtual {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)\\r\\n      returns (bytes4 response) {\\r\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n        }\\r\\n      } catch Error(string memory reason) {\\r\\n        revert(reason);\\r\\n      } catch {\\r\\n        revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _doSafeBatchTransferAcceptanceCheck(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) private {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC1155Receiver(to).onERC1155BatchReceived(\\r\\n          operator,\\r\\n          from,\\r\\n          ids,\\r\\n          amounts,\\r\\n          data\\r\\n        )\\r\\n      returns (bytes4 response) {\\r\\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\r\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n        }\\r\\n      } catch Error(string memory reason) {\\r\\n        revert(reason);\\r\\n      } catch {\\r\\n        revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _asSingletonArray(uint256 element)\\r\\n    private\\r\\n    pure\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    uint256[] memory array = new uint256[](1);\\r\\n    array[0] = element;\\r\\n\\r\\n    return array;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC1155Burnable is ERC1155 {\\r\\n  function burn(\\r\\n    address account,\\r\\n    uint256 id,\\r\\n    uint256 value\\r\\n  ) public virtual {\\r\\n    require(\\r\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\r\\n      \\\"ERC1155: caller is not token owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    _burn(account, id, value);\\r\\n  }\\r\\n\\r\\n  function burnBatch(\\r\\n    address account,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory values\\r\\n  ) public virtual {\\r\\n    require(\\r\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\r\\n      \\\"ERC1155: caller is not token owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    _burnBatch(account, ids, values);\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\r\\n  /**\\r\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the contract must not be paused.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual override {\\r\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC1155Supply is ERC1155 {\\r\\n  mapping(uint256 => uint256) private _totalSupply;\\r\\n\\r\\n  /**\\r\\n   * @dev Total amount of tokens in with a given id.\\r\\n   */\\r\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\r\\n    return _totalSupply[id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates whether any token exist with a given id, or not.\\r\\n   */\\r\\n  function exists(uint256 id) public view virtual returns (bool) {\\r\\n    return ERC1155Supply.totalSupply(id) > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual override {\\r\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n    if (from == address(0)) {\\r\\n      for (uint256 i = 0; i < ids.length; ++i) {\\r\\n        _totalSupply[ids[i]] += amounts[i];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (to == address(0)) {\\r\\n      for (uint256 i = 0; i < ids.length; ++i) {\\r\\n        uint256 id = ids[i];\\r\\n        uint256 amount = amounts[i];\\r\\n        uint256 supply = _totalSupply[id];\\r\\n        require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n        unchecked {\\r\\n          _totalSupply[id] = supply - amount;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract ERC1155SupplyMinterPauser is\\r\\n  Context,\\r\\n  AccessControlEnumerable,\\r\\n  ERC1155Burnable,\\r\\n  ERC1155Pausable,\\r\\n  ERC1155Supply\\r\\n{\\r\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\r\\n   * deploys the contract.\\r\\n   */\\r\\n  constructor(string memory uri) ERC1155(uri) {\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n    _setupRole(MINTER_ROLE, _msgSender());\\r\\n    _setupRole(PAUSER_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates `amount` new tokens for `to`, of token type `id`.\\r\\n   *\\r\\n   * See {ERC1155-_mint}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `MINTER_ROLE`.\\r\\n   */\\r\\n  function mint(\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) public virtual {\\r\\n    require(\\r\\n      hasRole(MINTER_ROLE, _msgSender()),\\r\\n      \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\"\\r\\n    );\\r\\n\\r\\n    _mint(to, id, amount, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\r\\n   */\\r\\n  function mintBatch(\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) public virtual {\\r\\n    require(\\r\\n      hasRole(MINTER_ROLE, _msgSender()),\\r\\n      \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\"\\r\\n    );\\r\\n\\r\\n    _mintBatch(to, ids, amounts, data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Pauses all token transfers.\\r\\n   *\\r\\n   * See {ERC1155Pausable} and {Pausable-_pause}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `PAUSER_ROLE`.\\r\\n   */\\r\\n  function pause() public virtual {\\r\\n    require(\\r\\n      hasRole(PAUSER_ROLE, _msgSender()),\\r\\n      \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\"\\r\\n    );\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Unpauses all token transfers.\\r\\n   *\\r\\n   * See {ERC1155Pausable} and {Pausable-_unpause}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `PAUSER_ROLE`.\\r\\n   */\\r\\n  function unpause() public virtual {\\r\\n    require(\\r\\n      hasRole(PAUSER_ROLE, _msgSender()),\\r\\n      \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\"\\r\\n    );\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(AccessControlEnumerable, ERC1155)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) internal virtual override(ERC1155, ERC1155Pausable, ERC1155Supply) {\\r\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b0cb870f1ba46fb4322c115cecfd04833db671fe6ddb401bfbf348c93f071f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003527380380620035278339810160408190526200003491620002ff565b80806200004181620000e5565b506005805460ff1916905562000059600033620000fe565b620000857f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000fe565b620000b17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000fe565b50620000de7f68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef133620000fe565b506200042e565b8051620000fa90600490602084019062000259565b5050565b620000fa82826200011b82826200014760201b62000e701760201c565b60008281526001602090815260409091206200014291839062000ef4620001e7821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000fa576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001fe836001600160a01b03841662000207565b90505b92915050565b6000818152600183016020526040812054620002505750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000201565b50600062000201565b8280546200026790620003db565b90600052602060002090601f0160209004810192826200028b5760008555620002d6565b82601f10620002a657805160ff1916838001178555620002d6565b82800160010185558215620002d6579182015b82811115620002d6578251825591602001919060010190620002b9565b50620002e4929150620002e8565b5090565b5b80821115620002e45760008155600101620002e9565b600060208083850312156200031357600080fd5b82516001600160401b03808211156200032b57600080fd5b818501915085601f8301126200034057600080fd5b81518181111562000355576200035562000418565b604051601f8201601f19908116603f0116810190838211818310171562000380576200038062000418565b8160405282815288868487010111156200039957600080fd5b600093505b82841015620003bd57848401860151818501870152928501926200039e565b82841115620003cf5760008684830101525b98975050505050505050565b600181811c90821680620003f057607f821691505b602082108114156200041257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6130e9806200043e6000396000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c80638456cb5911610125578063ca15c873116100ad578063e985e9c51161007c578063e985e9c5146104dd578063f242432a14610519578063f5298aca1461052c578063f759cc3b1461053f578063fcd295e31461055f57600080fd5b8063ca15c8731461048d578063d5391393146104a0578063d547741f146104b5578063e63ab1e9146104c857600080fd5b80639ec0f804116100f45780639ec0f8041461042c578063a217fddf1461043f578063a22cb46514610447578063a6fd34511461045a578063bd85b0391461046d57600080fd5b80638456cb59146103c25780639010d07c146103ca57806391d14854146103f557806395d89b411461040857600080fd5b80632eb2c2d6116101a85780634e1273f4116101775780634e1273f41461034f5780634f558e791461036f5780635c975abb146103915780636b20c4541461039c578063731133e9146103af57600080fd5b80632eb2c2d61461030e5780632f2ff15d1461032157806336568abe146103345780633f4ba83a1461034757600080fd5b80630e89341c116101e45780630e89341c146102b05780631f7fdffa146102c357806322af5997146102d8578063248a9ca3146102eb57600080fd5b8062fdd58e1461021557806301ffc9a71461023b57806306fdde031461025e57806307e2cea51461029b575b600080fd5b61022861022336600461265f565b610572565b6040519081526020015b60405180910390f35b61024e61024936600461287c565b61060d565b6040519015158152602001610232565b61028e6040518060400160405280601181526020017008ecadec8ca40a6e8c2d6cac84082ac82b607b1b81525081565b6040516102329190612a76565b61022860008051602061305483398151915281565b61028e6102be36600461281e565b610618565b6102d66102d136600461259c565b6106ac565b005b6102d66102e636600461285a565b6106f2565b6102286102f936600461281e565b60009081526020819052604090206001015490565b6102d661031c366004612419565b610770565b6102d661032f366004612837565b6107bc565b6102d6610342366004612837565b6107e7565b6102d6610861565b61036261035d36600461274d565b6108f5565b6040516102329190612a35565b61024e61037d36600461281e565b600090815260066020526040902054151590565b60055460ff1661024e565b6102d66103aa366004612528565b610a1f565b6102d66103bd3660046126f8565b610a62565b6102d6610aa2565b6103dd6103d836600461285a565b610b34565b6040516001600160a01b039091168152602001610232565b61024e610403366004612837565b610b53565b61028e604051806040016040528060058152602001640ce82ac82b60db1b81525081565b6102d661043a366004612689565b610b7c565b610228600081565b6102d6610455366004612635565b610c66565b6102d66104683660046123cb565b610c71565b61022861047b36600461281e565b60009081526006602052604090205490565b61022861049b36600461281e565b610d38565b61022860008051602061309483398151915281565b6102d66104c3366004612837565b610d4f565b61022860008051602061307483398151915281565b61024e6104eb3660046123e6565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6102d66105273660046124c3565b610d75565b6102d661053a3660046126c5565b610dca565b61022861054d36600461281e565b60009081526008602052604090205490565b61024e61056d36600461265f565b610e1d565b60006001600160a01b0383166105e25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061060782610f09565b60606004805461062790612ebc565b80601f016020809104026020016040519081016040528092919081815260200182805461065390612ebc565b80156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b50505050509050919050565b6106c460008051602061309483398151915233610b53565b6106e05760405162461bcd60e51b81526004016105d990612c94565b6106ec84848484610f49565b50505050565b61070a60008051602061305483398151915233610b53565b6107565760405162461bcd60e51b815260206004820152601e60248201527f67415641583a206d7573742068617665204f5241434c4520746f20736574000060448201526064016105d9565b61076c8282600090815260086020526040902055565b5050565b6001600160a01b03851633148061078c575061078c85336104eb565b6107a85760405162461bcd60e51b81526004016105d990612a89565b6107b585858585856110a4565b5050505050565b6000828152602081905260409020600101546107d88133611251565b6107e283836112b5565b505050565b6001600160a01b03811633146108575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105d9565b61076c82826112d7565b61087960008051602061307483398151915233610b53565b6108eb5760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e7061757365000000000060648201526084016105d9565b6108f36112f9565b565b6060815183511461095a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105d9565b6000835167ffffffffffffffff81111561097657610976612f81565b60405190808252806020026020018201604052801561099f578160200160208202803683370190505b50905060005b8451811015610a17576109ea8582815181106109c3576109c3612f6b565b60200260200101518583815181106109dd576109dd612f6b565b6020026020010151610572565b8282815181106109fc576109fc612f6b565b6020908102919091010152610a1081612f24565b90506109a5565b509392505050565b6001600160a01b038316331480610a3b5750610a3b83336104eb565b610a575760405162461bcd60e51b81526004016105d990612a89565b6107e283838361138c565b610a7a60008051602061309483398151915233610b53565b610a965760405162461bcd60e51b81526004016105d990612c94565b6106ec8484848461152b565b610aba60008051602061307483398151915233610b53565b610b2c5760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f2070617573650000000000000060648201526084016105d9565b6108f3611616565b6000828152600160205260408120610b4c9083611691565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610b9460008051602061309483398151915233610b53565b610bb05760405162461bcd60e51b81526004016105d990612d3b565b6001600160a01b0383163b610c135760405162461bcd60e51b8152602060048201526024808201527f67415641583a205f496e74657266616365206d757374206265206120636f6e746044820152631c9858dd60e21b60648201526084016105d9565b610c1e83838361169d565b826001600160a01b03167f7b6f183ad3150affe206a9ff35cdf0c27344cac3aaa49a7172afcaeef272db1d83604051610c5991815260200190565b60405180910390a2505050565b61076c3383836116f9565b610c8960008051602061309483398151915233610b53565b610ca55760405162461bcd60e51b81526004016105d990612d3b565b610cbd600080516020613094833981519152336107e7565b610cd5600080516020613074833981519152336107e7565b610ced600080516020613054833981519152336107e7565b610d05600080516020613094833981519152826117da565b610d1d600080516020613074833981519152826117da565b610d35600080516020613054833981519152826117da565b50565b6000818152600160205260408120610607906117e4565b600082815260208190526040902060010154610d6b8133611251565b6107e283836112d7565b6001600160a01b038516331480610da15750610d9185336104eb565b80610da15750610da13384610e1d565b610dbd5760405162461bcd60e51b81526004016105d990612b20565b6107b585858585856117ee565b6001600160a01b038316331480610df65750610de683336104eb565b80610df65750610df63383610e1d565b610e125760405162461bcd60e51b81526004016105d990612b20565b6107e283838361192a565b60006001600160a01b038316610e455760405162461bcd60e51b81526004016105d990612bc1565b5060009081526007602090815260408083206001600160a01b03949094168352929052205460ff1690565b610e7a8282610b53565b61076c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610eb03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610b4c836001600160a01b038416611a46565b60006001600160e01b03198216636cdb3d1360e11b1480610f3a57506001600160e01b031982166303a24d0760e21b145b80610607575061060782611a95565b6001600160a01b038416610f6f5760405162461bcd60e51b81526004016105d990612dc6565b8151835114610f905760405162461bcd60e51b81526004016105d990612d7e565b33610fa081600087878787611aba565b60005b845181101561103c57838181518110610fbe57610fbe612f6b565b602002602001015160026000878481518110610fdc57610fdc612f6b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110249190612e2b565b9091555081905061103481612f24565b915050610fa3565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161108d929190612a48565b60405180910390a46107b581600087878787611ac8565b81518351146110c55760405162461bcd60e51b81526004016105d990612d7e565b6001600160a01b0384166110eb5760405162461bcd60e51b81526004016105d990612c0c565b336110fa818787878787611aba565b60005b84518110156111e357600085828151811061111a5761111a612f6b565b60200260200101519050600085838151811061113857611138612f6b565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156111895760405162461bcd60e51b81526004016105d990612cf1565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111c8908490612e2b565b92505081905550505050806111dc90612f24565b90506110fd565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611233929190612a48565b60405180910390a4611249818787878787611ac8565b505050505050565b61125b8282610b53565b61076c57611273816001600160a01b03166014611c33565b61127e836020611c33565b60405160200161128f92919061291d565b60408051601f198184030181529082905262461bcd60e51b82526105d991600401612a76565b6112bf8282610e70565b60008281526001602052604090206107e29082610ef4565b6112e18282611dcf565b60008281526001602052604090206107e29082611e34565b60055460ff166113425760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d9565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166113b25760405162461bcd60e51b81526004016105d990612c51565b80518251146113d35760405162461bcd60e51b81526004016105d990612d7e565b60003390506113f681856000868660405180602001604052806000815250611aba565b60005b83518110156114be57600084828151811061141657611416612f6b565b60200260200101519050600084838151811061143457611434612f6b565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156114855760405162461bcd60e51b81526004016105d990612b7d565b60009283526002602090815260408085206001600160a01b038b16865290915290922091039055806114b681612f24565b9150506113f9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161150f929190612a48565b60405180910390a46040805160208101909152600090526106ec565b6001600160a01b0384166115515760405162461bcd60e51b81526004016105d990612dc6565b33600061155d85611e49565b9050600061156a85611e49565b905061157b83600089858589611aba565b60008681526002602090815260408083206001600160a01b038b168452909152812080548792906115ad908490612e2b565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461160d83600089898989611e94565b50505050505050565b60055460ff161561165c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105d9565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861136f3390565b6000610b4c8383611f73565b6001600160a01b0383166116c35760405162461bcd60e51b81526004016105d990612bc1565b60009182526007602090815260408084206001600160a01b03959095168452939052919020805460ff1916911515919091179055565b816001600160a01b0316836001600160a01b0316141561176d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105d9565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61076c82826112b5565b6000610607825490565b6001600160a01b0384166118145760405162461bcd60e51b81526004016105d990612c0c565b33600061182085611e49565b9050600061182d85611e49565b905061183d838989858589611aba565b60008681526002602090815260408083206001600160a01b038c168452909152902054858110156118805760405162461bcd60e51b81526004016105d990612cf1565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906118bf908490612e2b565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461191f848a8a8a8a8a611e94565b505050505050505050565b6001600160a01b0383166119505760405162461bcd60e51b81526004016105d990612c51565b33600061195c84611e49565b9050600061196984611e49565b905061198983876000858560405180602001604052806000815250611aba565b60008581526002602090815260408083206001600160a01b038a168452909152902054848110156119cc5760405162461bcd60e51b81526004016105d990612b7d565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261160d565b6000818152600183016020526040812054611a8d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610607565b506000610607565b60006001600160e01b03198216635a05180f60e01b1480610607575061060782611f9d565b611249868686868686611fd2565b6001600160a01b0384163b156112495760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b0c9089908990889088908890600401612992565b602060405180830381600087803b158015611b2657600080fd5b505af1925050508015611b56575060408051601f3d908101601f19168201909252611b5391810190612899565b60015b611c0357611b62612f97565b806308c379a01415611b9c5750611b77612fb3565b80611b825750611b9e565b8060405162461bcd60e51b81526004016105d99190612a76565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105d9565b6001600160e01b0319811663bc197c8160e01b1461160d5760405162461bcd60e51b81526004016105d990612ad8565b60606000611c42836002612e43565b611c4d906002612e2b565b67ffffffffffffffff811115611c6557611c65612f81565b6040519080825280601f01601f191660200182016040528015611c8f576020820181803683370190505b509050600360fc1b81600081518110611caa57611caa612f6b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cd957611cd9612f6b565b60200101906001600160f81b031916908160001a9053506000611cfd846002612e43565b611d08906001612e2b565b90505b6001811115611d80576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d3c57611d3c612f6b565b1a60f81b828281518110611d5257611d52612f6b565b60200101906001600160f81b031916908160001a90535060049490941c93611d7981612ea5565b9050611d0b565b508315610b4c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d9565b611dd98282610b53565b1561076c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610b4c836001600160a01b038416612159565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e8357611e83612f6b565b602090810291909101015292915050565b6001600160a01b0384163b15158015611eb45750611eb28684610e1d565b155b156112495760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611eed90899089908890889088906004016129f0565b602060405180830381600087803b158015611f0757600080fd5b505af1925050508015611f37575060408051601f3d908101601f19168201909252611f3491810190612899565b60015b611f4357611b62612f97565b6001600160e01b0319811663f23a6e6160e01b1461160d5760405162461bcd60e51b81526004016105d990612ad8565b6000826000018281548110611f8a57611f8a612f6b565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061060757506301ffc9a760e01b6001600160e01b0319831614610607565b611fe086868686868661224c565b6001600160a01b0385166120675760005b83518110156120655782818151811061200c5761200c612f6b565b60200260200101516006600086848151811061202a5761202a612f6b565b60200260200101518152602001908152602001600020600082825461204f9190612e2b565b9091555061205e905081612f24565b9050611ff1565b505b6001600160a01b0384166112495760005b835181101561160d57600084828151811061209557612095612f6b565b6020026020010151905060008483815181106120b3576120b3612f6b565b60200260200101519050600060066000848152602001908152602001600020549050818110156121365760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105d9565b6000928352600660205260409092209103905561215281612f24565b9050612078565b6000818152600183016020526040812054801561224257600061217d600183612e62565b855490915060009061219190600190612e62565b90508181146121f65760008660000182815481106121b1576121b1612f6b565b90600052602060002001549050808760000184815481106121d4576121d4612f6b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061220757612207612f55565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610607565b6000915050610607565b60055460ff16156112495760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016105d9565b80356001600160a01b03811681146122cb57600080fd5b919050565b600082601f8301126122e157600080fd5b813560206122ee82612e07565b6040516122fb8282612ef7565b8381528281019150858301600585901b8701840188101561231b57600080fd5b60005b8581101561233a5781358452928401929084019060010161231e565b5090979650505050505050565b803580151581146122cb57600080fd5b600082601f83011261236857600080fd5b813567ffffffffffffffff81111561238257612382612f81565b604051612399601f8301601f191660200182612ef7565b8181528460208386010111156123ae57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156123dd57600080fd5b610b4c826122b4565b600080604083850312156123f957600080fd5b612402836122b4565b9150612410602084016122b4565b90509250929050565b600080600080600060a0868803121561243157600080fd5b61243a866122b4565b9450612448602087016122b4565b9350604086013567ffffffffffffffff8082111561246557600080fd5b61247189838a016122d0565b9450606088013591508082111561248757600080fd5b61249389838a016122d0565b935060808801359150808211156124a957600080fd5b506124b688828901612357565b9150509295509295909350565b600080600080600060a086880312156124db57600080fd5b6124e4866122b4565b94506124f2602087016122b4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561251c57600080fd5b6124b688828901612357565b60008060006060848603121561253d57600080fd5b612546846122b4565b9250602084013567ffffffffffffffff8082111561256357600080fd5b61256f878388016122d0565b9350604086013591508082111561258557600080fd5b50612592868287016122d0565b9150509250925092565b600080600080608085870312156125b257600080fd5b6125bb856122b4565b9350602085013567ffffffffffffffff808211156125d857600080fd5b6125e4888389016122d0565b945060408701359150808211156125fa57600080fd5b612606888389016122d0565b9350606087013591508082111561261c57600080fd5b5061262987828801612357565b91505092959194509250565b6000806040838503121561264857600080fd5b612651836122b4565b915061241060208401612347565b6000806040838503121561267257600080fd5b61267b836122b4565b946020939093013593505050565b60008060006060848603121561269e57600080fd5b6126a7846122b4565b9250602084013591506126bc60408501612347565b90509250925092565b6000806000606084860312156126da57600080fd5b6126e3846122b4565b95602085013595506040909401359392505050565b6000806000806080858703121561270e57600080fd5b612717856122b4565b93506020850135925060408501359150606085013567ffffffffffffffff81111561274157600080fd5b61262987828801612357565b6000806040838503121561276057600080fd5b823567ffffffffffffffff8082111561277857600080fd5b818501915085601f83011261278c57600080fd5b8135602061279982612e07565b6040516127a68282612ef7565b8381528281019150858301600585901b870184018b10156127c657600080fd5b600096505b848710156127f0576127dc816122b4565b8352600196909601959183019183016127cb565b509650508601359250508082111561280757600080fd5b50612814858286016122d0565b9150509250929050565b60006020828403121561283057600080fd5b5035919050565b6000806040838503121561284a57600080fd5b82359150612410602084016122b4565b6000806040838503121561286d57600080fd5b50508035926020909101359150565b60006020828403121561288e57600080fd5b8135610b4c8161303d565b6000602082840312156128ab57600080fd5b8151610b4c8161303d565b600081518084526020808501945080840160005b838110156128e6578151875295820195908201906001016128ca565b509495945050505050565b60008151808452612909816020860160208601612e79565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612955816017850160208801612e79565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612986816028840160208801612e79565b01602801949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906129be908301866128b6565b82810360608401526129d081866128b6565b905082810360808401526129e481856128f1565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a2a908301846128f1565b979650505050505050565b602081526000610b4c60208301846128b6565b604081526000612a5b60408301856128b6565b8281036020840152612a6d81856128b6565b95945050505050565b602081526000610b4c60208301846128f1565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526037908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201527f20696e74657266616365206e6f7220617070726f766564000000000000000000606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602b908201527f67415641583a20696e7465726661636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f67415641583a206d7573742068617665204d494e5445525f524f4c4520746f206040820152621cd95d60ea1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b600067ffffffffffffffff821115612e2157612e21612f81565b5060051b60200190565b60008219821115612e3e57612e3e612f3f565b500190565b6000816000190483118215151615612e5d57612e5d612f3f565b500290565b600082821015612e7457612e74612f3f565b500390565b60005b83811015612e94578181015183820152602001612e7c565b838111156106ec5750506000910152565b600081612eb457612eb4612f3f565b506000190190565b600181811c90821680612ed057607f821691505b60208210811415612ef157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612f1d57612f1d612f81565b6040525050565b6000600019821415612f3857612f38612f3f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612fb05760046000803e5060005160e01c5b90565b600060443d1015612fc15790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612ff157505050505090565b82850191508151818111156130095750505050505090565b843d87010160208285010111156130235750505050505090565b61303260208286010187612ef7565b509095945050505050565b6001600160e01b031981168114610d3557600080fdfe68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef165d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220049445f3df2b625083eb71f8d6c6b1c0cede985f11ba7e68cdcebe86cb539d4364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102105760003560e01c80638456cb5911610125578063ca15c873116100ad578063e985e9c51161007c578063e985e9c5146104dd578063f242432a14610519578063f5298aca1461052c578063f759cc3b1461053f578063fcd295e31461055f57600080fd5b8063ca15c8731461048d578063d5391393146104a0578063d547741f146104b5578063e63ab1e9146104c857600080fd5b80639ec0f804116100f45780639ec0f8041461042c578063a217fddf1461043f578063a22cb46514610447578063a6fd34511461045a578063bd85b0391461046d57600080fd5b80638456cb59146103c25780639010d07c146103ca57806391d14854146103f557806395d89b411461040857600080fd5b80632eb2c2d6116101a85780634e1273f4116101775780634e1273f41461034f5780634f558e791461036f5780635c975abb146103915780636b20c4541461039c578063731133e9146103af57600080fd5b80632eb2c2d61461030e5780632f2ff15d1461032157806336568abe146103345780633f4ba83a1461034757600080fd5b80630e89341c116101e45780630e89341c146102b05780631f7fdffa146102c357806322af5997146102d8578063248a9ca3146102eb57600080fd5b8062fdd58e1461021557806301ffc9a71461023b57806306fdde031461025e57806307e2cea51461029b575b600080fd5b61022861022336600461265f565b610572565b6040519081526020015b60405180910390f35b61024e61024936600461287c565b61060d565b6040519015158152602001610232565b61028e6040518060400160405280601181526020017008ecadec8ca40a6e8c2d6cac84082ac82b607b1b81525081565b6040516102329190612a76565b61022860008051602061305483398151915281565b61028e6102be36600461281e565b610618565b6102d66102d136600461259c565b6106ac565b005b6102d66102e636600461285a565b6106f2565b6102286102f936600461281e565b60009081526020819052604090206001015490565b6102d661031c366004612419565b610770565b6102d661032f366004612837565b6107bc565b6102d6610342366004612837565b6107e7565b6102d6610861565b61036261035d36600461274d565b6108f5565b6040516102329190612a35565b61024e61037d36600461281e565b600090815260066020526040902054151590565b60055460ff1661024e565b6102d66103aa366004612528565b610a1f565b6102d66103bd3660046126f8565b610a62565b6102d6610aa2565b6103dd6103d836600461285a565b610b34565b6040516001600160a01b039091168152602001610232565b61024e610403366004612837565b610b53565b61028e604051806040016040528060058152602001640ce82ac82b60db1b81525081565b6102d661043a366004612689565b610b7c565b610228600081565b6102d6610455366004612635565b610c66565b6102d66104683660046123cb565b610c71565b61022861047b36600461281e565b60009081526006602052604090205490565b61022861049b36600461281e565b610d38565b61022860008051602061309483398151915281565b6102d66104c3366004612837565b610d4f565b61022860008051602061307483398151915281565b61024e6104eb3660046123e6565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6102d66105273660046124c3565b610d75565b6102d661053a3660046126c5565b610dca565b61022861054d36600461281e565b60009081526008602052604090205490565b61024e61056d36600461265f565b610e1d565b60006001600160a01b0383166105e25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061060782610f09565b60606004805461062790612ebc565b80601f016020809104026020016040519081016040528092919081815260200182805461065390612ebc565b80156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b50505050509050919050565b6106c460008051602061309483398151915233610b53565b6106e05760405162461bcd60e51b81526004016105d990612c94565b6106ec84848484610f49565b50505050565b61070a60008051602061305483398151915233610b53565b6107565760405162461bcd60e51b815260206004820152601e60248201527f67415641583a206d7573742068617665204f5241434c4520746f20736574000060448201526064016105d9565b61076c8282600090815260086020526040902055565b5050565b6001600160a01b03851633148061078c575061078c85336104eb565b6107a85760405162461bcd60e51b81526004016105d990612a89565b6107b585858585856110a4565b5050505050565b6000828152602081905260409020600101546107d88133611251565b6107e283836112b5565b505050565b6001600160a01b03811633146108575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105d9565b61076c82826112d7565b61087960008051602061307483398151915233610b53565b6108eb5760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e7061757365000000000060648201526084016105d9565b6108f36112f9565b565b6060815183511461095a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105d9565b6000835167ffffffffffffffff81111561097657610976612f81565b60405190808252806020026020018201604052801561099f578160200160208202803683370190505b50905060005b8451811015610a17576109ea8582815181106109c3576109c3612f6b565b60200260200101518583815181106109dd576109dd612f6b565b6020026020010151610572565b8282815181106109fc576109fc612f6b565b6020908102919091010152610a1081612f24565b90506109a5565b509392505050565b6001600160a01b038316331480610a3b5750610a3b83336104eb565b610a575760405162461bcd60e51b81526004016105d990612a89565b6107e283838361138c565b610a7a60008051602061309483398151915233610b53565b610a965760405162461bcd60e51b81526004016105d990612c94565b6106ec8484848461152b565b610aba60008051602061307483398151915233610b53565b610b2c5760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f2070617573650000000000000060648201526084016105d9565b6108f3611616565b6000828152600160205260408120610b4c9083611691565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610b9460008051602061309483398151915233610b53565b610bb05760405162461bcd60e51b81526004016105d990612d3b565b6001600160a01b0383163b610c135760405162461bcd60e51b8152602060048201526024808201527f67415641583a205f496e74657266616365206d757374206265206120636f6e746044820152631c9858dd60e21b60648201526084016105d9565b610c1e83838361169d565b826001600160a01b03167f7b6f183ad3150affe206a9ff35cdf0c27344cac3aaa49a7172afcaeef272db1d83604051610c5991815260200190565b60405180910390a2505050565b61076c3383836116f9565b610c8960008051602061309483398151915233610b53565b610ca55760405162461bcd60e51b81526004016105d990612d3b565b610cbd600080516020613094833981519152336107e7565b610cd5600080516020613074833981519152336107e7565b610ced600080516020613054833981519152336107e7565b610d05600080516020613094833981519152826117da565b610d1d600080516020613074833981519152826117da565b610d35600080516020613054833981519152826117da565b50565b6000818152600160205260408120610607906117e4565b600082815260208190526040902060010154610d6b8133611251565b6107e283836112d7565b6001600160a01b038516331480610da15750610d9185336104eb565b80610da15750610da13384610e1d565b610dbd5760405162461bcd60e51b81526004016105d990612b20565b6107b585858585856117ee565b6001600160a01b038316331480610df65750610de683336104eb565b80610df65750610df63383610e1d565b610e125760405162461bcd60e51b81526004016105d990612b20565b6107e283838361192a565b60006001600160a01b038316610e455760405162461bcd60e51b81526004016105d990612bc1565b5060009081526007602090815260408083206001600160a01b03949094168352929052205460ff1690565b610e7a8282610b53565b61076c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610eb03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610b4c836001600160a01b038416611a46565b60006001600160e01b03198216636cdb3d1360e11b1480610f3a57506001600160e01b031982166303a24d0760e21b145b80610607575061060782611a95565b6001600160a01b038416610f6f5760405162461bcd60e51b81526004016105d990612dc6565b8151835114610f905760405162461bcd60e51b81526004016105d990612d7e565b33610fa081600087878787611aba565b60005b845181101561103c57838181518110610fbe57610fbe612f6b565b602002602001015160026000878481518110610fdc57610fdc612f6b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110249190612e2b565b9091555081905061103481612f24565b915050610fa3565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161108d929190612a48565b60405180910390a46107b581600087878787611ac8565b81518351146110c55760405162461bcd60e51b81526004016105d990612d7e565b6001600160a01b0384166110eb5760405162461bcd60e51b81526004016105d990612c0c565b336110fa818787878787611aba565b60005b84518110156111e357600085828151811061111a5761111a612f6b565b60200260200101519050600085838151811061113857611138612f6b565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156111895760405162461bcd60e51b81526004016105d990612cf1565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111c8908490612e2b565b92505081905550505050806111dc90612f24565b90506110fd565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611233929190612a48565b60405180910390a4611249818787878787611ac8565b505050505050565b61125b8282610b53565b61076c57611273816001600160a01b03166014611c33565b61127e836020611c33565b60405160200161128f92919061291d565b60408051601f198184030181529082905262461bcd60e51b82526105d991600401612a76565b6112bf8282610e70565b60008281526001602052604090206107e29082610ef4565b6112e18282611dcf565b60008281526001602052604090206107e29082611e34565b60055460ff166113425760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d9565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166113b25760405162461bcd60e51b81526004016105d990612c51565b80518251146113d35760405162461bcd60e51b81526004016105d990612d7e565b60003390506113f681856000868660405180602001604052806000815250611aba565b60005b83518110156114be57600084828151811061141657611416612f6b565b60200260200101519050600084838151811061143457611434612f6b565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156114855760405162461bcd60e51b81526004016105d990612b7d565b60009283526002602090815260408085206001600160a01b038b16865290915290922091039055806114b681612f24565b9150506113f9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161150f929190612a48565b60405180910390a46040805160208101909152600090526106ec565b6001600160a01b0384166115515760405162461bcd60e51b81526004016105d990612dc6565b33600061155d85611e49565b9050600061156a85611e49565b905061157b83600089858589611aba565b60008681526002602090815260408083206001600160a01b038b168452909152812080548792906115ad908490612e2b565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461160d83600089898989611e94565b50505050505050565b60055460ff161561165c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105d9565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861136f3390565b6000610b4c8383611f73565b6001600160a01b0383166116c35760405162461bcd60e51b81526004016105d990612bc1565b60009182526007602090815260408084206001600160a01b03959095168452939052919020805460ff1916911515919091179055565b816001600160a01b0316836001600160a01b0316141561176d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105d9565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61076c82826112b5565b6000610607825490565b6001600160a01b0384166118145760405162461bcd60e51b81526004016105d990612c0c565b33600061182085611e49565b9050600061182d85611e49565b905061183d838989858589611aba565b60008681526002602090815260408083206001600160a01b038c168452909152902054858110156118805760405162461bcd60e51b81526004016105d990612cf1565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906118bf908490612e2b565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461191f848a8a8a8a8a611e94565b505050505050505050565b6001600160a01b0383166119505760405162461bcd60e51b81526004016105d990612c51565b33600061195c84611e49565b9050600061196984611e49565b905061198983876000858560405180602001604052806000815250611aba565b60008581526002602090815260408083206001600160a01b038a168452909152902054848110156119cc5760405162461bcd60e51b81526004016105d990612b7d565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261160d565b6000818152600183016020526040812054611a8d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610607565b506000610607565b60006001600160e01b03198216635a05180f60e01b1480610607575061060782611f9d565b611249868686868686611fd2565b6001600160a01b0384163b156112495760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b0c9089908990889088908890600401612992565b602060405180830381600087803b158015611b2657600080fd5b505af1925050508015611b56575060408051601f3d908101601f19168201909252611b5391810190612899565b60015b611c0357611b62612f97565b806308c379a01415611b9c5750611b77612fb3565b80611b825750611b9e565b8060405162461bcd60e51b81526004016105d99190612a76565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105d9565b6001600160e01b0319811663bc197c8160e01b1461160d5760405162461bcd60e51b81526004016105d990612ad8565b60606000611c42836002612e43565b611c4d906002612e2b565b67ffffffffffffffff811115611c6557611c65612f81565b6040519080825280601f01601f191660200182016040528015611c8f576020820181803683370190505b509050600360fc1b81600081518110611caa57611caa612f6b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cd957611cd9612f6b565b60200101906001600160f81b031916908160001a9053506000611cfd846002612e43565b611d08906001612e2b565b90505b6001811115611d80576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d3c57611d3c612f6b565b1a60f81b828281518110611d5257611d52612f6b565b60200101906001600160f81b031916908160001a90535060049490941c93611d7981612ea5565b9050611d0b565b508315610b4c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d9565b611dd98282610b53565b1561076c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610b4c836001600160a01b038416612159565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e8357611e83612f6b565b602090810291909101015292915050565b6001600160a01b0384163b15158015611eb45750611eb28684610e1d565b155b156112495760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611eed90899089908890889088906004016129f0565b602060405180830381600087803b158015611f0757600080fd5b505af1925050508015611f37575060408051601f3d908101601f19168201909252611f3491810190612899565b60015b611f4357611b62612f97565b6001600160e01b0319811663f23a6e6160e01b1461160d5760405162461bcd60e51b81526004016105d990612ad8565b6000826000018281548110611f8a57611f8a612f6b565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061060757506301ffc9a760e01b6001600160e01b0319831614610607565b611fe086868686868661224c565b6001600160a01b0385166120675760005b83518110156120655782818151811061200c5761200c612f6b565b60200260200101516006600086848151811061202a5761202a612f6b565b60200260200101518152602001908152602001600020600082825461204f9190612e2b565b9091555061205e905081612f24565b9050611ff1565b505b6001600160a01b0384166112495760005b835181101561160d57600084828151811061209557612095612f6b565b6020026020010151905060008483815181106120b3576120b3612f6b565b60200260200101519050600060066000848152602001908152602001600020549050818110156121365760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b60648201526084016105d9565b6000928352600660205260409092209103905561215281612f24565b9050612078565b6000818152600183016020526040812054801561224257600061217d600183612e62565b855490915060009061219190600190612e62565b90508181146121f65760008660000182815481106121b1576121b1612f6b565b90600052602060002001549050808760000184815481106121d4576121d4612f6b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061220757612207612f55565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610607565b6000915050610607565b60055460ff16156112495760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016105d9565b80356001600160a01b03811681146122cb57600080fd5b919050565b600082601f8301126122e157600080fd5b813560206122ee82612e07565b6040516122fb8282612ef7565b8381528281019150858301600585901b8701840188101561231b57600080fd5b60005b8581101561233a5781358452928401929084019060010161231e565b5090979650505050505050565b803580151581146122cb57600080fd5b600082601f83011261236857600080fd5b813567ffffffffffffffff81111561238257612382612f81565b604051612399601f8301601f191660200182612ef7565b8181528460208386010111156123ae57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156123dd57600080fd5b610b4c826122b4565b600080604083850312156123f957600080fd5b612402836122b4565b9150612410602084016122b4565b90509250929050565b600080600080600060a0868803121561243157600080fd5b61243a866122b4565b9450612448602087016122b4565b9350604086013567ffffffffffffffff8082111561246557600080fd5b61247189838a016122d0565b9450606088013591508082111561248757600080fd5b61249389838a016122d0565b935060808801359150808211156124a957600080fd5b506124b688828901612357565b9150509295509295909350565b600080600080600060a086880312156124db57600080fd5b6124e4866122b4565b94506124f2602087016122b4565b93506040860135925060608601359150608086013567ffffffffffffffff81111561251c57600080fd5b6124b688828901612357565b60008060006060848603121561253d57600080fd5b612546846122b4565b9250602084013567ffffffffffffffff8082111561256357600080fd5b61256f878388016122d0565b9350604086013591508082111561258557600080fd5b50612592868287016122d0565b9150509250925092565b600080600080608085870312156125b257600080fd5b6125bb856122b4565b9350602085013567ffffffffffffffff808211156125d857600080fd5b6125e4888389016122d0565b945060408701359150808211156125fa57600080fd5b612606888389016122d0565b9350606087013591508082111561261c57600080fd5b5061262987828801612357565b91505092959194509250565b6000806040838503121561264857600080fd5b612651836122b4565b915061241060208401612347565b6000806040838503121561267257600080fd5b61267b836122b4565b946020939093013593505050565b60008060006060848603121561269e57600080fd5b6126a7846122b4565b9250602084013591506126bc60408501612347565b90509250925092565b6000806000606084860312156126da57600080fd5b6126e3846122b4565b95602085013595506040909401359392505050565b6000806000806080858703121561270e57600080fd5b612717856122b4565b93506020850135925060408501359150606085013567ffffffffffffffff81111561274157600080fd5b61262987828801612357565b6000806040838503121561276057600080fd5b823567ffffffffffffffff8082111561277857600080fd5b818501915085601f83011261278c57600080fd5b8135602061279982612e07565b6040516127a68282612ef7565b8381528281019150858301600585901b870184018b10156127c657600080fd5b600096505b848710156127f0576127dc816122b4565b8352600196909601959183019183016127cb565b509650508601359250508082111561280757600080fd5b50612814858286016122d0565b9150509250929050565b60006020828403121561283057600080fd5b5035919050565b6000806040838503121561284a57600080fd5b82359150612410602084016122b4565b6000806040838503121561286d57600080fd5b50508035926020909101359150565b60006020828403121561288e57600080fd5b8135610b4c8161303d565b6000602082840312156128ab57600080fd5b8151610b4c8161303d565b600081518084526020808501945080840160005b838110156128e6578151875295820195908201906001016128ca565b509495945050505050565b60008151808452612909816020860160208601612e79565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612955816017850160208801612e79565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612986816028840160208801612e79565b01602801949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906129be908301866128b6565b82810360608401526129d081866128b6565b905082810360808401526129e481856128f1565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a2a908301846128f1565b979650505050505050565b602081526000610b4c60208301846128b6565b604081526000612a5b60408301856128b6565b8281036020840152612a6d81856128b6565b95945050505050565b602081526000610b4c60208301846128f1565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526037908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201527f20696e74657266616365206e6f7220617070726f766564000000000000000000606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602b908201527f67415641583a20696e7465726661636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f67415641583a206d7573742068617665204d494e5445525f524f4c4520746f206040820152621cd95d60ea1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b600067ffffffffffffffff821115612e2157612e21612f81565b5060051b60200190565b60008219821115612e3e57612e3e612f3f565b500190565b6000816000190483118215151615612e5d57612e5d612f3f565b500290565b600082821015612e7457612e74612f3f565b500390565b60005b83811015612e94578181015183820152602001612e7c565b838111156106ec5750506000910152565b600081612eb457612eb4612f3f565b506000190190565b600181811c90821680612ed057607f821691505b60208210811415612ef157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612f1d57612f1d612f81565b6040525050565b6000600019821415612f3857612f38612f3f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612fb05760046000803e5060005160e01c5b90565b600060443d1015612fc15790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612ff157505050505090565b82850191508151818111156130095750505050505090565b843d87010160208285010111156130235750505050505090565b61303260208286010187612ef7565b509095945050505050565b6001600160e01b031981168114610d3557600080fdfe68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef165d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220049445f3df2b625083eb71f8d6c6b1c0cede985f11ba7e68cdcebe86cb539d4364736f6c63430008070033",
  "devdoc": {
    "details": "only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is _doSafeTransferAcceptanceCheck is being virtual: // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol diffchecker link: https://www.diffchecker.com/UOAdD16A",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "See {IERC1155-safeTransferFrom}.CHANGED for gAVAXADDED \"|| isInterface(_msgSender(),id))\""
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isInterface(address,uint256)": {
        "details": "ADDED for gAVAX"
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pricePerShare(uint256)": {
        "details": "ADDED for gAVAX"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}.CHANGED for gAVAXinterfaces can move your tokens without asking you.ADDED \"|| isInterface(_msgSender(),id))\""
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setInterface(address,uint256,bool)": {
        "details": "ADDED for gAVAX"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "updateMinterPauserOracle(address)": {
        "details": "MinterPauserOracle is basically a superUser, there can be only 1 at a given time, intended as \"Portal\""
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_interfaces": {
        "details": "ADDED for gAVAX"
      },
      "_pricePerShare": {
        "details": "ADDED for gAVAXfreshly assigned ids should return 1e18 since initally 1 AVAX = 1 gAVAX*"
      }
    },
    "title": "Geode Finance geode-avax: gAVAX One of the unique functionalities are the included price logic that tracks the underlaying ratio with staked asset, AVAX. Other and most important change is the implementation of ERC1155Interfaces. This addition effectively result in changes in safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() functions, reasoning is in the comments.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isInterface(address,uint256)": {
        "notice": "checks if an address is defined as an interface for the given Planet id."
      },
      "setInterface(address,uint256,bool)": {
        "notice": "to be used to set an an address of a contract that will be behaved as an interface by gAVAX contract for a spesific ID"
      },
      "updateMinterPauserOracle(address)": {
        "notice": "updates the authorized party for all crucial operations related to minting, pricing and interfaces."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2264,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2259_storage)"
      },
      {
        "astId": 2567,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4569_storage)"
      },
      {
        "astId": 7407,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7413,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7415,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2974,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 8718,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6549,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_interfaces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6554,
        "contract": "contracts/Portal/gAVAX.sol:gAVAX",
        "label": "_pricePerShare",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4569_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4569_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2259_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2259_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4569_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4568,
            "contract": "contracts/Portal/gAVAX.sol:gAVAX",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4268_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2259_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2256,
            "contract": "contracts/Portal/gAVAX.sol:gAVAX",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2258,
            "contract": "contracts/Portal/gAVAX.sol:gAVAX",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4268_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4263,
            "contract": "contracts/Portal/gAVAX.sol:gAVAX",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4267,
            "contract": "contracts/Portal/gAVAX.sol:gAVAX",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}