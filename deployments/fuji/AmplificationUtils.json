{
  "address": "0xdd2d19B816cc83fF841129D144A6a89A4b1fB349",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd2157161678e9297f373e67cd51dc256c42d592980fa86c3b35b8d9fd02f5e7",
  "receipt": {
    "to": null,
    "from": "0x1B007c50E78ed35fDFAd395BC41C1DBD8Bb9E385",
    "contractAddress": "0xdd2d19B816cc83fF841129D144A6a89A4b1fB349",
    "transactionIndex": 0,
    "gasUsed": "377669",
    "logsBloom": "0x
    "blockHash": "0x447f1153f508d65558c30560c5b346595c5805e4259d66d907c98bc7ac243ec4",
    "transactionHash": "0xdd2157161678e9297f373e67cd51dc256c42d592980fa86c3b35b8d9fd02f5e7",
    "logs": [],
    "blockNumber": 10878141,
    "cumulativeGasUsed": "377669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "492b8174343aef947d9cd2113004784d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getA(SwapUtils.Swap storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter\"}},\"getAPrecise(SwapUtils.Swap storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"rampA(SwapUtils.Swap storage,uint256,uint256)\":{\"params\":{\"futureA_\":\"the new A to ramp towards\",\"futureTime_\":\"timestamp when the new A should be reached\",\"self\":\"Swap struct to update\"}},\"stopRampA(SwapUtils.Swap storage)\":{\"params\":{\"self\":\"Swap struct to update\"}}},\"title\":\"AmplificationUtils library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getA(SwapUtils.Swap storage)\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise(SwapUtils.Swap storage)\":{\"notice\":\"Return A in its raw precision\"},\"rampA(SwapUtils.Swap storage,uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"stopRampA(SwapUtils.Swap storage)\":{\"notice\":\"Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours\"}},\"notice\":\"A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct. This library assumes the struct is fully validated.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WithdrawalPool/utils/AmplificationUtils.sol\":\"AmplificationUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Liquidity Provider Token\\r\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\r\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\r\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\r\\n */\\r\\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\\r\\n  /**\\r\\n   * @notice Initializes this LPToken contract with the given name and symbol\\r\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\r\\n   * in its initializer function.\\r\\n   * @param name name of this token\\r\\n   * @param symbol symbol of this token\\r\\n   */\\r\\n  function initialize(string memory name, string memory symbol)\\r\\n    external\\r\\n    initializer\\r\\n    returns (bool)\\r\\n  {\\r\\n    __Context_init_unchained();\\r\\n    __ERC20_init_unchained(name, symbol);\\r\\n    __Ownable_init_unchained();\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the given amount of LPToken to the recipient.\\r\\n   * @dev only owner can call this mint function\\r\\n   * @param recipient address of account to receive the tokens\\r\\n   * @param amount amount of tokens to mint\\r\\n   */\\r\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\r\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\r\\n    _mint(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\r\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\r\\n   * This assumes the owner is set to a Swap contract's address.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual override(ERC20Upgradeable) {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x12dbe7f8c21ec1cf4de45a7f2150e01e841f83f42436ab23fa76f35ef51383c8\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/utils/AmplificationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./SwapUtils.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AmplificationUtils library\\r\\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\\r\\n * This library assumes the struct is fully validated.\\r\\n */\\r\\nlibrary AmplificationUtils {\\r\\n  event RampA(\\r\\n    uint256 oldA,\\r\\n    uint256 newA,\\r\\n    uint256 initialTime,\\r\\n    uint256 futureTime\\r\\n  );\\r\\n  event StopRampA(uint256 currentA, uint256 time);\\r\\n\\r\\n  // Constant values used in ramping A calculations\\r\\n  uint256 public constant A_PRECISION = 100;\\r\\n  uint256 public constant MAX_A = 10**6;\\r\\n  uint256 private constant MAX_A_CHANGE = 2;\\r\\n  uint256 private constant MIN_RAMP_TIME = 14 days;\\r\\n\\r\\n  /**\\r\\n   * @notice Return A, the amplification coefficient * n * (n - 1)\\r\\n   * @dev See the StableSwap paper for details\\r\\n   * @param self Swap struct to read from\\r\\n   * @return A parameter\\r\\n   */\\r\\n  function getA(SwapUtils.Swap storage self) external view returns (uint256) {\\r\\n    return _getAPrecise(self) / (A_PRECISION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return A in its raw precision\\r\\n   * @dev See the StableSwap paper for details\\r\\n   * @param self Swap struct to read from\\r\\n   * @return A parameter in its raw precision form\\r\\n   */\\r\\n  function getAPrecise(SwapUtils.Swap storage self)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _getAPrecise(self);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return A in its raw precision\\r\\n   * @dev See the StableSwap paper for details\\r\\n   * @param self Swap struct to read from\\r\\n   * @return A parameter in its raw precision form\\r\\n   */\\r\\n  function _getAPrecise(SwapUtils.Swap storage self)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\r\\n    uint256 a1 = self.futureA; // final A value when ramp is finished\\r\\n\\r\\n    if (block.timestamp < t1) {\\r\\n      uint256 t0 = self.initialATime; // time when ramp is started\\r\\n      uint256 a0 = self.initialA; // initial A value when ramp is started\\r\\n      if (a1 > a0) {\\r\\n        // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\r\\n        return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\r\\n      } else {\\r\\n        // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\r\\n        return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\r\\n      }\\r\\n    } else {\\r\\n      return a1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\r\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\r\\n   * the limit range.\\r\\n   * @param self Swap struct to update\\r\\n   * @param futureA_ the new A to ramp towards\\r\\n   * @param futureTime_ timestamp when the new A should be reached\\r\\n   */\\r\\n  function rampA(\\r\\n    SwapUtils.Swap storage self,\\r\\n    uint256 futureA_,\\r\\n    uint256 futureTime_\\r\\n  ) external {\\r\\n    require(\\r\\n      block.timestamp >= self.initialATime + 1 days,\\r\\n      \\\"Wait 1 day before starting ramp\\\"\\r\\n    );\\r\\n    require(\\r\\n      futureTime_ >= block.timestamp + MIN_RAMP_TIME,\\r\\n      \\\"Insufficient ramp time\\\"\\r\\n    );\\r\\n    require(\\r\\n      futureA_ > 0 && futureA_ < MAX_A,\\r\\n      \\\"futureA_ must be > 0 and < MAX_A\\\"\\r\\n    );\\r\\n\\r\\n    uint256 initialAPrecise = _getAPrecise(self);\\r\\n    uint256 futureAPrecise = futureA_ * A_PRECISION;\\r\\n\\r\\n    if (futureAPrecise < initialAPrecise) {\\r\\n      require(\\r\\n        futureAPrecise * MAX_A_CHANGE >= initialAPrecise,\\r\\n        \\\"futureA_ is too small\\\"\\r\\n      );\\r\\n    } else {\\r\\n      require(\\r\\n        futureAPrecise <= initialAPrecise * MAX_A_CHANGE,\\r\\n        \\\"futureA_ is too large\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    self.initialA = initialAPrecise;\\r\\n    self.futureA = futureAPrecise;\\r\\n    self.initialATime = block.timestamp;\\r\\n    self.futureATime = futureTime_;\\r\\n\\r\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\r\\n   * cannot be called for another 24 hours\\r\\n   * @param self Swap struct to update\\r\\n   */\\r\\n  function stopRampA(SwapUtils.Swap storage self) external {\\r\\n    require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\r\\n\\r\\n    uint256 currentA = _getAPrecise(self);\\r\\n    self.initialA = currentA;\\r\\n    self.futureA = currentA;\\r\\n    self.initialATime = block.timestamp;\\r\\n    self.futureATime = block.timestamp;\\r\\n\\r\\n    emit StopRampA(currentA, block.timestamp);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9128bddbf265bd8700f916cc5be347a260d86d12f10280d011d1e26d0eb4472a\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/utils/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @title MathUtils library\\r\\n * @notice  Contains functions for calculating differences between two uint256.\\r\\n */\\r\\nlibrary MathUtils {\\r\\n  /**\\r\\n   * @notice Compares a and b and returns true if the difference between a and b\\r\\n   *         is less than 1 or equal to each other.\\r\\n   * @param a uint256 to compare with\\r\\n   * @param b uint256 to compare with\\r\\n   * @return True if the difference between a and b is less than 1 or equal,\\r\\n   *         otherwise return false\\r\\n   */\\r\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\r\\n    return (difference(a, b) <= 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates absolute difference between a and b\\r\\n   * @param a uint256 to compare with\\r\\n   * @param b uint256 to compare with\\r\\n   * @return Difference between a and b\\r\\n   */\\r\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a > b) {\\r\\n      return a - b;\\r\\n    }\\r\\n    return b - a;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1811a4208feecbde43d8ef8556a9ee25f880f95b50bd3284cdbac15b67c5dc79\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/utils/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../../interfaces/IgAVAX.sol\\\";\\r\\nimport \\\"./AmplificationUtils.sol\\\";\\r\\nimport \\\"../LPToken.sol\\\";\\r\\nimport \\\"./MathUtils.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SwapUtils library\\r\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\r\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\r\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\r\\n * Admin functions should be protected within contracts using this library.\\r\\n */\\r\\nlibrary SwapUtils {\\r\\n  using MathUtils for uint256;\\r\\n\\r\\n  /*** EVENTS ***/\\r\\n\\r\\n  event TokenSwap(\\r\\n    address indexed buyer,\\r\\n    uint256 tokensSold,\\r\\n    uint256 tokensBought,\\r\\n    uint128 soldId,\\r\\n    uint128 boughtId\\r\\n  );\\r\\n  event AddLiquidity(\\r\\n    address indexed provider,\\r\\n    uint256[] tokenAmounts,\\r\\n    uint256[] fees,\\r\\n    uint256 invariant,\\r\\n    uint256 lpTokenSupply\\r\\n  );\\r\\n  event RemoveLiquidity(\\r\\n    address indexed provider,\\r\\n    uint256[] tokenAmounts,\\r\\n    uint256 lpTokenSupply\\r\\n  );\\r\\n  event RemoveLiquidityOne(\\r\\n    address indexed provider,\\r\\n    uint256 lpTokenAmount,\\r\\n    uint256 lpTokenSupply,\\r\\n    uint256 boughtId,\\r\\n    uint256 tokensBought\\r\\n  );\\r\\n  event RemoveLiquidityImbalance(\\r\\n    address indexed provider,\\r\\n    uint256[] tokenAmounts,\\r\\n    uint256[] fees,\\r\\n    uint256 invariant,\\r\\n    uint256 lpTokenSupply\\r\\n  );\\r\\n  event NewAdminFee(uint256 newAdminFee);\\r\\n  event NewSwapFee(uint256 newSwapFee);\\r\\n\\r\\n  struct Swap {\\r\\n    // variables around the ramp management of A,\\r\\n    // the amplification coefficient * n * (n - 1)\\r\\n    // see https://curve.fi/stableswap-paper.pdf for details\\r\\n    uint256 initialA;\\r\\n    uint256 futureA;\\r\\n    uint256 initialATime;\\r\\n    uint256 futureATime;\\r\\n    // fee calculation\\r\\n    uint256 swapFee;\\r\\n    uint256 adminFee;\\r\\n    LPToken lpToken;\\r\\n    uint256 pooledTokenId;\\r\\n    // wETH2 contract reference\\r\\n    IgAVAX referenceForPooledTokens;\\r\\n    // the pool balance of each token\\r\\n    // the contract's actual token balance might differ\\r\\n    uint256[] balances;\\r\\n  }\\r\\n\\r\\n  // Struct storing variables used in calculations in the\\r\\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\r\\n  struct CalculateWithdrawOneTokenDYInfo {\\r\\n    uint256 d0;\\r\\n    uint256 d1;\\r\\n    uint256 newY;\\r\\n    uint256 feePerToken;\\r\\n    uint256 preciseA;\\r\\n  }\\r\\n\\r\\n  // Struct storing variables used in calculations in the\\r\\n  // {add,remove}Liquidity functions to avoid stack too deep errors\\r\\n  struct ManageLiquidityInfo {\\r\\n    uint256 d0;\\r\\n    uint256 d1;\\r\\n    uint256 d2;\\r\\n    uint256 preciseA;\\r\\n    LPToken lpToken;\\r\\n    uint256 totalSupply;\\r\\n    uint256[] balances;\\r\\n  }\\r\\n\\r\\n  // the precision all pools tokens will be converted to\\r\\n  uint8 public constant POOL_PRECISION_DECIMALS = 18;\\r\\n\\r\\n  // the denominator used to calculate admin and LP fees. For example, an\\r\\n  // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\r\\n  uint256 private constant FEE_DENOMINATOR = 10**10;\\r\\n\\r\\n  // Max swap fee is 1% or 100bps of each swap\\r\\n  uint256 public constant MAX_SWAP_FEE = 10**8;\\r\\n\\r\\n  // Max adminFee is 100% of the swapFee\\r\\n  // adminFee does not add additional fee on top of swapFee\\r\\n  // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\r\\n  // users but only on the earnings of LPs\\r\\n  uint256 public constant MAX_ADMIN_FEE = 10**10;\\r\\n\\r\\n  // Constant value used as max loop limit\\r\\n  uint256 private constant MAX_LOOP_LIMIT = 256;\\r\\n\\r\\n  /*** VIEW & PURE FUNCTIONS ***/\\r\\n\\r\\n  function _getAPrecise(Swap storage self) internal view returns (uint256) {\\r\\n    return AmplificationUtils._getAPrecise(self);\\r\\n  }\\r\\n\\r\\n  /// @dev this function assumes prices are sent with the indexes that [avax,Gavax]\\r\\n  function _pricedInBatch(Swap storage self, uint256[] memory balances)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    uint256[] memory _p = new uint256[](balances.length);\\r\\n    _p[0] = balances[0];\\r\\n    _p[1] =\\r\\n      (balances[1] *\\r\\n        IgAVAX(self.referenceForPooledTokens).pricePerShare(\\r\\n          self.pooledTokenId\\r\\n        )) /\\r\\n      1e18;\\r\\n    return _p;\\r\\n  }\\r\\n\\r\\n  function _pricedOut(\\r\\n    Swap storage self,\\r\\n    uint256 balance,\\r\\n    uint256 i\\r\\n  ) internal view returns (uint256) {\\r\\n    return\\r\\n      i == 1\\r\\n        ? (balance * 1e18) /\\r\\n          IgAVAX(self.referenceForPooledTokens).pricePerShare(\\r\\n            self.pooledTokenId\\r\\n          )\\r\\n        : balance;\\r\\n  }\\r\\n\\r\\n  function _pricedIn(\\r\\n    Swap storage self,\\r\\n    uint256 balance,\\r\\n    uint256 i\\r\\n  ) internal view returns (uint256) {\\r\\n    return\\r\\n      i == 1\\r\\n        ? (balance *\\r\\n          IgAVAX(self.referenceForPooledTokens).pricePerShare(\\r\\n            self.pooledTokenId\\r\\n          )) / 1e18\\r\\n        : balance;\\r\\n  }\\r\\n\\r\\n  /// @dev this function assumes prices are sent with the indexes that [avax,Gavax]\\r\\n  function _pricedOutBatch(Swap storage self, uint256[] memory balances)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    uint256[] memory _p = new uint256[](balances.length);\\r\\n    _p[0] = balances[0];\\r\\n    _p[1] =\\r\\n      (balances[1] * 1e18) /\\r\\n      IgAVAX(self.referenceForPooledTokens).pricePerShare(self.pooledTokenId);\\r\\n    return _p;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\r\\n   * the fee of withdrawing in one token\\r\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\r\\n   * @param tokenIndex which token will be withdrawn\\r\\n   * @param self Swap struct to read from\\r\\n   * @return the amount of token user will receive\\r\\n   */\\r\\n  function calculateWithdrawOneToken(\\r\\n    Swap storage self,\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex\\r\\n  ) external view returns (uint256) {\\r\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\r\\n      self,\\r\\n      tokenAmount,\\r\\n      tokenIndex,\\r\\n      self.lpToken.totalSupply()\\r\\n    );\\r\\n    return availableTokenAmount;\\r\\n  }\\r\\n\\r\\n  function _calculateWithdrawOneToken(\\r\\n    Swap storage self,\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex,\\r\\n    uint256 totalSupply\\r\\n  ) internal view returns (uint256, uint256) {\\r\\n    uint256 dy;\\r\\n    uint256 newY;\\r\\n    uint256 currentY;\\r\\n\\r\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(\\r\\n      self,\\r\\n      tokenIndex,\\r\\n      tokenAmount,\\r\\n      totalSupply\\r\\n    );\\r\\n\\r\\n    // dy_0 (without fees)\\r\\n    // dy, dy_0 - dy\\r\\n\\r\\n    uint256 dySwapFee = currentY - newY - dy;\\r\\n\\r\\n    return (dy, dySwapFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculate the dy of withdrawing in one token\\r\\n   * @param self Swap struct to read from\\r\\n   * @param tokenIndex which token will be withdrawn\\r\\n   * @param tokenAmount the amount to withdraw in the pools precision\\r\\n   * @return the d and the new y after withdrawing one token\\r\\n   */\\r\\n  function calculateWithdrawOneTokenDY(\\r\\n    Swap storage self,\\r\\n    uint8 tokenIndex,\\r\\n    uint256 tokenAmount,\\r\\n    uint256 totalSupply\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    // Get the current D, then solve the stableswap invariant\\r\\n    // y_i for D - tokenAmount\\r\\n\\r\\n    require(tokenIndex < 2, \\\"Token index out of range\\\");\\r\\n\\r\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(\\r\\n      0,\\r\\n      0,\\r\\n      0,\\r\\n      0,\\r\\n      0\\r\\n    );\\r\\n    v.preciseA = _getAPrecise(self);\\r\\n    v.d0 = getD(_pricedInBatch(self, self.balances), v.preciseA);\\r\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\r\\n\\r\\n    require(\\r\\n      tokenAmount <= self.balances[tokenIndex],\\r\\n      \\\"Withdraw exceeds available\\\"\\r\\n    );\\r\\n\\r\\n    v.newY = _pricedOut(\\r\\n      self,\\r\\n      getYD(v.preciseA, tokenIndex, _pricedInBatch(self, self.balances), v.d1),\\r\\n      tokenIndex\\r\\n    );\\r\\n\\r\\n    uint256[] memory xpReduced = new uint256[](2);\\r\\n\\r\\n    v.feePerToken = self.swapFee / 2;\\r\\n    for (uint256 i = 0; i < 2; i++) {\\r\\n      uint256 xpi = self.balances[i];\\r\\n      // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\r\\n      // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\r\\n      // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\\r\\n      xpReduced[i] =\\r\\n        xpi -\\r\\n        (((\\r\\n          (i == tokenIndex)\\r\\n            ? (xpi * v.d1) / v.d0 - v.newY\\r\\n            : xpi - ((xpi * v.d1) / (v.d0))\\r\\n        ) * (v.feePerToken)) / (FEE_DENOMINATOR));\\r\\n    }\\r\\n\\r\\n    uint256 dy = xpReduced[tokenIndex] -\\r\\n      _pricedOut(\\r\\n        self,\\r\\n        (getYD(v.preciseA, tokenIndex, _pricedInBatch(self, xpReduced), v.d1)),\\r\\n        tokenIndex\\r\\n      );\\r\\n    dy = dy - 1;\\r\\n\\r\\n    return (dy, v.newY, self.balances[tokenIndex]);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get Debt, The amount of buyback for stable pricing.\\r\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\r\\n   * as the pool.\\r\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\r\\n   * See the StableSwap paper for details\\r\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\r\\n   */\\r\\n  function _getDebt(\\r\\n    Swap storage self,\\r\\n    uint256[] memory xp,\\r\\n    uint256 a\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 halfD = getD(xp, a) / 2;\\r\\n    if (xp[0] >= halfD) {\\r\\n      return 0;\\r\\n    } else {\\r\\n      uint256 dy = xp[1] - halfD;\\r\\n      uint256 feeHalf = (dy * self.swapFee) / FEE_DENOMINATOR / 2;\\r\\n      uint256 debt = halfD - xp[0] + feeHalf;\\r\\n      return debt;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\r\\n   */\\r\\n  function getDebt(Swap storage self) external view returns (uint256) {\\r\\n    // might change when price is in.\\r\\n    return\\r\\n      _getDebt(self, _pricedInBatch(self, self.balances), _getAPrecise(self));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculate the price of a token in the pool with given\\r\\n   *  balances and a particular D.\\r\\n   *\\r\\n   * @dev This is accomplished via solving the invariant iteratively.\\r\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\r\\n   *\\r\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\r\\n   * x_1**2 + b*x_1 = c\\r\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\r\\n   *\\r\\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\r\\n   * @param tokenIndex Index of token we are calculating for.\\r\\n   * @param xp a  set of pool balances. Array should be\\r\\n   * the same cardinality as the pool.\\r\\n   * @param d the stableswap invariant\\r\\n   * @return the price of the token, in the same precision as in xp\\r\\n   */\\r\\n  function getYD(\\r\\n    uint256 a,\\r\\n    uint8 tokenIndex,\\r\\n    uint256[] memory xp,\\r\\n    uint256 d\\r\\n  ) internal pure returns (uint256) {\\r\\n    uint256 numTokens = 2;\\r\\n    require(tokenIndex < numTokens, \\\"Token not found\\\");\\r\\n\\r\\n    uint256 c = d;\\r\\n    uint256 s;\\r\\n    uint256 nA = a * numTokens;\\r\\n\\r\\n    for (uint256 i = 0; i < numTokens; i++) {\\r\\n      if (i != tokenIndex) {\\r\\n        s = s + xp[i];\\r\\n        c = (c * d) / (xp[i] * (numTokens));\\r\\n        // If we were to protect the division loss we would have to keep the denominator separate\\r\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\r\\n        // c = c * D * D * D * ... overflow!\\r\\n      }\\r\\n    }\\r\\n    c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\\r\\n\\r\\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\r\\n    uint256 yPrev;\\r\\n    uint256 y = d;\\r\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\r\\n      yPrev = y;\\r\\n      y = ((y * y) + c) / (2 * y + b - d);\\r\\n      if (y.within1(yPrev)) {\\r\\n        return y;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"Approximation did not converge\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\r\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\r\\n   * as the pool.\\r\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\r\\n   * See the StableSwap paper for details\\r\\n   * @return the invariant, at the precision of the pool\\r\\n   */\\r\\n  function getD(uint256[] memory xp, uint256 a)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 numTokens = 2;\\r\\n    uint256 s = xp[0] + xp[1];\\r\\n    if (s == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 prevD;\\r\\n    uint256 d = s;\\r\\n    uint256 nA = a * numTokens;\\r\\n\\r\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\r\\n      uint256 dP = (d**(numTokens + 1)) /\\r\\n        (numTokens**numTokens * xp[0] * xp[1]);\\r\\n      prevD = d;\\r\\n      d =\\r\\n        ((((nA * s) / AmplificationUtils.A_PRECISION) + dP * numTokens) * (d)) /\\r\\n        (((nA - AmplificationUtils.A_PRECISION) * (d)) /\\r\\n          (AmplificationUtils.A_PRECISION) +\\r\\n          ((numTokens + 1) * dP));\\r\\n\\r\\n      if (d.within1(prevD)) {\\r\\n        return d;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\r\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\r\\n    // function which does not rely on D.\\r\\n    revert(\\\"D does not converge\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the virtual price, to help calculate profit\\r\\n   * @param self Swap struct to read from\\r\\n   * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\r\\n   */\\r\\n  function getVirtualPrice(Swap storage self) external view returns (uint256) {\\r\\n    uint256 d = getD(_pricedInBatch(self, self.balances), _getAPrecise(self));\\r\\n    LPToken lpToken = self.lpToken;\\r\\n    uint256 supply = lpToken.totalSupply();\\r\\n    if (supply > 0) {\\r\\n      return (d * 10**uint256(POOL_PRECISION_DECIMALS)) / supply;\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\r\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\r\\n   * This function is used as a helper function to calculate how much TO token\\r\\n   * the user should receive on swap.\\r\\n   *\\r\\n   * @param preciseA precise form of amplification coefficient\\r\\n   * @param tokenIndexFrom index of FROM token\\r\\n   * @param tokenIndexTo index of TO token\\r\\n   * @param x the new total amount of FROM token\\r\\n   * @param xp balances of the tokens in the pool\\r\\n   * @return the amount of TO token that should remain in the pool\\r\\n   */\\r\\n  function getY(\\r\\n    uint256 preciseA,\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 x,\\r\\n    uint256[] memory xp\\r\\n  ) internal pure returns (uint256) {\\r\\n    uint256 numTokens = 2;\\r\\n    require(tokenIndexFrom != tokenIndexTo, \\\"Can't compare token to itself\\\");\\r\\n    require(\\r\\n      tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\\r\\n      \\\"Tokens must be in pool\\\"\\r\\n    );\\r\\n\\r\\n    uint256 d = getD(xp, preciseA);\\r\\n    uint256 c = d;\\r\\n    uint256 s = x;\\r\\n    uint256 nA = numTokens * (preciseA);\\r\\n\\r\\n    c = (c * d) / (x * numTokens);\\r\\n    c = (c * d * (AmplificationUtils.A_PRECISION)) / (nA * numTokens);\\r\\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\r\\n\\r\\n    uint256 yPrev;\\r\\n    uint256 y = d;\\r\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\r\\n      yPrev = y;\\r\\n      y = ((y * y) + c) / (2 * y + b - d);\\r\\n      if (y.within1(yPrev)) {\\r\\n        return y;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"Approximation did not converge\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Externally calculates a swap between two tokens.\\r\\n   * @param self Swap struct to read from\\r\\n   * @param tokenIndexFrom the token to sell\\r\\n   * @param tokenIndexTo the token to buy\\r\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\r\\n   * use the amount that gets transferred after the fee.\\r\\n   * @return dy the number of tokens the user will get\\r\\n   */\\r\\n  function calculateSwap(\\r\\n    Swap storage self,\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx\\r\\n  ) external view returns (uint256 dy) {\\r\\n    (dy, ) = _calculateSwap(\\r\\n      self,\\r\\n      tokenIndexFrom,\\r\\n      tokenIndexTo,\\r\\n      dx,\\r\\n      self.balances\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internally calculates a swap between two tokens.\\r\\n   *\\r\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\r\\n   * using the token contracts.\\r\\n   *\\r\\n   * @param self Swap struct to read from\\r\\n   * @param tokenIndexFrom the token to sell\\r\\n   * @param tokenIndexTo the token to buy\\r\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\r\\n   * use the amount that gets transferred after the fee.\\r\\n   * @return dy the number of tokens the user will get\\r\\n   * @return dyFee the associated fee\\r\\n   */\\r\\n  function _calculateSwap(\\r\\n    Swap storage self,\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx,\\r\\n    uint256[] memory balances\\r\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\r\\n    require(\\r\\n      tokenIndexFrom < balances.length && tokenIndexTo < balances.length,\\r\\n      \\\"Token index out of range\\\"\\r\\n    );\\r\\n    uint256 x = _pricedIn(self, dx + balances[tokenIndexFrom], tokenIndexFrom);\\r\\n\\r\\n    uint256[] memory pricedBalances = _pricedInBatch(self, balances);\\r\\n\\r\\n    uint256 y = _pricedOut(\\r\\n      self,\\r\\n      getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, pricedBalances),\\r\\n      tokenIndexTo // => not id, index !!!\\r\\n    );\\r\\n    dy = balances[tokenIndexTo] - y - 1;\\r\\n    dyFee = (dy * self.swapFee) / (FEE_DENOMINATOR);\\r\\n    dy = dy - dyFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice A simple method to calculate amount of each underlying\\r\\n   * tokens that is returned upon burning given amount of\\r\\n   * LP tokens\\r\\n   *\\r\\n   * @param amount the amount of LP tokens that would to be burned on\\r\\n   * withdrawal\\r\\n   * @return array of amounts of tokens user will receive\\r\\n   */\\r\\n  function calculateRemoveLiquidity(Swap storage self, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    return\\r\\n      _pricedOutBatch(\\r\\n        self,\\r\\n        _calculateRemoveLiquidity(\\r\\n          _pricedInBatch(self, self.balances),\\r\\n          amount,\\r\\n          self.lpToken.totalSupply()\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _calculateRemoveLiquidity(\\r\\n    uint256[] memory balances,\\r\\n    uint256 amount,\\r\\n    uint256 totalSupply\\r\\n  ) internal pure returns (uint256[] memory) {\\r\\n    require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\r\\n\\r\\n    uint256[] memory amounts = new uint256[](2);\\r\\n\\r\\n    amounts[0] = (balances[0] * amount) / totalSupply;\\r\\n    amounts[1] = (balances[1] * amount) / totalSupply;\\r\\n\\r\\n    return amounts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice A simple method to calculate prices from deposits or\\r\\n   * withdrawals, excluding fees but including slippage. This is\\r\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\r\\n   * to fight front-running\\r\\n   *\\r\\n   * @dev This shouldn't be used outside frontends for user estimates.\\r\\n   *\\r\\n   * @param self Swap struct to read from\\r\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\r\\n   * corresponding to pooledTokens. The amount should be in each\\r\\n   * pooled token's native precision. If a token charges a fee on transfers,\\r\\n   * use the amount that gets transferred after the fee.\\r\\n   * @param deposit whether this is a deposit or a withdrawal\\r\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\r\\n   * deposit was false, total amount of lp token that will be burned\\r\\n   */\\r\\n  function calculateTokenAmount(\\r\\n    Swap storage self,\\r\\n    uint256[] calldata amounts,\\r\\n    bool deposit\\r\\n  ) external view returns (uint256) {\\r\\n    uint256 a = _getAPrecise(self);\\r\\n    uint256[] memory balances = self.balances;\\r\\n\\r\\n    uint256 d0 = getD(_pricedInBatch(self, balances), a);\\r\\n    for (uint256 i = 0; i < balances.length; i++) {\\r\\n      if (deposit) {\\r\\n        balances[i] = balances[i] + amounts[i];\\r\\n      } else {\\r\\n        require(\\r\\n          amounts[i] <= balances[i],\\r\\n          \\\"Cannot withdraw more than available\\\"\\r\\n        );\\r\\n        balances[i] = balances[i] - amounts[i];\\r\\n      }\\r\\n    }\\r\\n    uint256 d1 = getD(_pricedInBatch(self, balances), a);\\r\\n    uint256 totalSupply = self.lpToken.totalSupply();\\r\\n\\r\\n    if (deposit) {\\r\\n      return ((d1 - d0) * totalSupply) / d0;\\r\\n    } else {\\r\\n      return ((d0 - d1) * totalSupply) / d0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice return accumulated amount of admin fees of the token with given index\\r\\n   * @param self Swap struct to read from\\r\\n   * @param index Index of the pooled token\\r\\n   * @return admin balance in the token's precision\\r\\n   */\\r\\n  function getAdminBalance(Swap storage self, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < 2, \\\"Token index out of range\\\");\\r\\n    if (index == 0) return address(this).balance - (self.balances[index]);\\r\\n\\r\\n    if (index == 1)\\r\\n      return\\r\\n        self.referenceForPooledTokens.balanceOf(\\r\\n          address(this),\\r\\n          self.pooledTokenId\\r\\n        ) - (self.balances[index]);\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /*** STATE MODIFYING FUNCTIONS ***/\\r\\n\\r\\n  /**\\r\\n   * @notice swap two tokens in the pool\\r\\n   * @param self Swap struct to read from and write to\\r\\n   * @param tokenIndexFrom the token the user wants to sell\\r\\n   * @param tokenIndexTo the token the user wants to buy\\r\\n   * @param dx the amount of tokens the user wants to sell\\r\\n   * @param minDy the min amount the user would like to receive, or revert.\\r\\n   * @return amount of token user received on swap\\r\\n   */\\r\\n  function swap(\\r\\n    Swap storage self,\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx,\\r\\n    uint256 minDy\\r\\n  ) external returns (uint256) {\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n    if (tokenIndexFrom == 0) {\\r\\n      require(dx == msg.value, \\\"Cannot swap more/less than you sent\\\");\\r\\n    }\\r\\n    if (tokenIndexFrom == 1) {\\r\\n      uint256 tokenId = self.pooledTokenId;\\r\\n      require(\\r\\n        dx <= wETH2Reference.balanceOf(msg.sender, tokenId),\\r\\n        \\\"Cannot swap more than you own\\\"\\r\\n      );\\r\\n\\r\\n      // Transfer tokens first\\r\\n      uint256 beforeBalance = wETH2Reference.balanceOf(address(this), tokenId);\\r\\n      wETH2Reference.safeTransferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        tokenId,\\r\\n        dx,\\r\\n        \\\"\\\"\\r\\n      );\\r\\n\\r\\n      // Use the actual transferred amount for AMM math\\r\\n      dx = wETH2Reference.balanceOf(address(this), tokenId) - beforeBalance;\\r\\n    }\\r\\n\\r\\n    uint256 dy;\\r\\n    uint256 dyFee;\\r\\n    uint256[] memory balances = self.balances;\\r\\n    (dy, dyFee) = _calculateSwap(\\r\\n      self,\\r\\n      tokenIndexFrom,\\r\\n      tokenIndexTo,\\r\\n      dx,\\r\\n      balances\\r\\n    );\\r\\n\\r\\n    require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\r\\n\\r\\n    uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR;\\r\\n\\r\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\r\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\r\\n\\r\\n    if (tokenIndexTo == 0) {\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: dy }(\\\"\\\");\\r\\n      require(sent, \\\"SwapUtils: Failed to send Avax\\\");\\r\\n    }\\r\\n    if (tokenIndexTo == 1) {\\r\\n      wETH2Reference.safeTransferFrom(\\r\\n        address(this),\\r\\n        msg.sender,\\r\\n        self.pooledTokenId,\\r\\n        dy,\\r\\n        \\\"\\\"\\r\\n      );\\r\\n    }\\r\\n    emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\r\\n\\r\\n    return dy;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Add liquidity to the pool\\r\\n   * @param self Swap struct to read from and write to\\r\\n   * @param amounts the amounts of each token to add, in their native precision\\r\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\r\\n   * should mint, otherwise revert. Handy for front-running mitigation\\r\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\r\\n   * @return amount of LP token user received\\r\\n   */\\r\\n  function addLiquidity(\\r\\n    Swap storage self,\\r\\n    uint256[] memory amounts,\\r\\n    uint256 minToMint\\r\\n  ) external returns (uint256) {\\r\\n    require(amounts.length == 2, \\\"Amounts must match pooled tokens\\\");\\r\\n    require(\\r\\n      amounts[0] == msg.value,\\r\\n      \\\"SwapUtils: received less or more AVAX than expected\\\"\\r\\n    );\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n    // current state\\r\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\r\\n      0,\\r\\n      0,\\r\\n      0,\\r\\n      _getAPrecise(self),\\r\\n      self.lpToken,\\r\\n      0,\\r\\n      self.balances\\r\\n    );\\r\\n    v.totalSupply = v.lpToken.totalSupply();\\r\\n    if (v.totalSupply != 0) {\\r\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\r\\n    }\\r\\n\\r\\n    uint256[] memory newBalances = new uint256[](2);\\r\\n    newBalances[0] = v.balances[0] + msg.value;\\r\\n\\r\\n    for (uint256 i = 0; i < 2; i++) {\\r\\n      require(\\r\\n        v.totalSupply != 0 || amounts[i] > 0,\\r\\n        \\\"Must supply all tokens in pool\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    {\\r\\n      // Transfer tokens first\\r\\n      uint256 beforeBalance = wETH2Reference.balanceOf(\\r\\n        address(this),\\r\\n        self.pooledTokenId\\r\\n      );\\r\\n      wETH2Reference.safeTransferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        self.pooledTokenId,\\r\\n        amounts[1],\\r\\n        \\\"\\\"\\r\\n      );\\r\\n\\r\\n      // Update the amounts[] with actual transfer amount\\r\\n      amounts[1] =\\r\\n        wETH2Reference.balanceOf(address(this), self.pooledTokenId) -\\r\\n        beforeBalance;\\r\\n\\r\\n      newBalances[1] = v.balances[1] + amounts[1];\\r\\n    }\\r\\n\\r\\n    // invariant after change\\r\\n    v.d1 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\r\\n    require(v.d1 > v.d0, \\\"D should increase\\\");\\r\\n\\r\\n    // updated to reflect fees and calculate the user's LP tokens\\r\\n    v.d2 = v.d1;\\r\\n    uint256[] memory fees = new uint256[](2);\\r\\n\\r\\n    if (v.totalSupply != 0) {\\r\\n      uint256 feePerToken = self.swapFee / 2;\\r\\n      for (uint256 i = 0; i < 2; i++) {\\r\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\r\\n        fees[i] =\\r\\n          (feePerToken * (idealBalance.difference(newBalances[i]))) /\\r\\n          (FEE_DENOMINATOR);\\r\\n        self.balances[i] =\\r\\n          newBalances[i] -\\r\\n          ((fees[i] * (self.adminFee)) / (FEE_DENOMINATOR));\\r\\n        newBalances[i] = newBalances[i] - (fees[i]);\\r\\n      }\\r\\n      v.d2 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\r\\n    } else {\\r\\n      // the initial depositor doesn't pay fees\\r\\n      self.balances = newBalances;\\r\\n    }\\r\\n\\r\\n    uint256 toMint;\\r\\n    if (v.totalSupply == 0) {\\r\\n      toMint = v.d1;\\r\\n    } else {\\r\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\r\\n    }\\r\\n\\r\\n    require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\r\\n\\r\\n    // mint the user's LP tokens\\r\\n    v.lpToken.mint(msg.sender, toMint);\\r\\n\\r\\n    emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\r\\n    return toMint;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\r\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\r\\n   * @param self Swap struct to read from and write to\\r\\n   * @param amount the amount of LP tokens to burn\\r\\n   * @param minAmounts the minimum amounts of each token in the pool\\r\\n   * acceptable for this burn. Useful as a front-running mitigation\\r\\n   * @return amounts of tokens the user received\\r\\n   */\\r\\n  function removeLiquidity(\\r\\n    Swap storage self,\\r\\n    uint256 amount,\\r\\n    uint256[] calldata minAmounts\\r\\n  ) external returns (uint256[] memory) {\\r\\n    LPToken lpToken = self.lpToken;\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\r\\n    require(minAmounts.length == 2, \\\"minAmounts must match poolTokens\\\");\\r\\n\\r\\n    uint256[] memory balances = self.balances;\\r\\n    uint256 totalSupply = lpToken.totalSupply();\\r\\n\\r\\n    uint256[] memory amounts = _pricedOutBatch(\\r\\n      self,\\r\\n      _calculateRemoveLiquidity(\\r\\n        _pricedInBatch(self, balances),\\r\\n        amount,\\r\\n        totalSupply\\r\\n      )\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < amounts.length; i++) {\\r\\n      require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\r\\n      self.balances[i] = balances[i] - amounts[i];\\r\\n    }\\r\\n\\r\\n    lpToken.burnFrom(msg.sender, amount);\\r\\n    (bool sent, ) = payable(msg.sender).call{ value: amounts[0] }(\\\"\\\");\\r\\n    require(sent, \\\"SwapUtils: Failed to send Avax\\\");\\r\\n    wETH2Reference.safeTransferFrom(\\r\\n      address(this),\\r\\n      msg.sender,\\r\\n      self.pooledTokenId,\\r\\n      amounts[1],\\r\\n      \\\"\\\"\\r\\n    );\\r\\n\\r\\n    emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\\r\\n    return amounts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Remove liquidity from the pool all in one token.\\r\\n   * @param self Swap struct to read from and write to\\r\\n   * @param tokenAmount the amount of the lp tokens to burn\\r\\n   * @param tokenIndex the index of the token you want to receive\\r\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\r\\n   * @return amount chosen token that user received\\r\\n   */\\r\\n  function removeLiquidityOneToken(\\r\\n    Swap storage self,\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex,\\r\\n    uint256 minAmount\\r\\n  ) external returns (uint256) {\\r\\n    LPToken lpToken = self.lpToken;\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n\\r\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\r\\n    require(tokenIndex < 2, \\\"Token not found\\\");\\r\\n\\r\\n    uint256 totalSupply = lpToken.totalSupply();\\r\\n\\r\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\\r\\n      self,\\r\\n      tokenAmount,\\r\\n      tokenIndex,\\r\\n      totalSupply\\r\\n    );\\r\\n\\r\\n    require(dy >= minAmount, \\\"dy < minAmount\\\");\\r\\n\\r\\n    self.balances[tokenIndex] =\\r\\n      self.balances[tokenIndex] -\\r\\n      (dy + ((dyFee * (self.adminFee)) / (FEE_DENOMINATOR)));\\r\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\r\\n\\r\\n    if (tokenIndex == 0) {\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: dy }(\\\"\\\");\\r\\n      require(sent, \\\"SwapUtils: Failed to send Avax\\\");\\r\\n    }\\r\\n    if (tokenIndex == 1) {\\r\\n      wETH2Reference.safeTransferFrom(\\r\\n        address(this),\\r\\n        msg.sender,\\r\\n        self.pooledTokenId,\\r\\n        dy,\\r\\n        \\\"\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    emit RemoveLiquidityOne(\\r\\n      msg.sender,\\r\\n      tokenAmount,\\r\\n      totalSupply,\\r\\n      tokenIndex,\\r\\n      dy\\r\\n    );\\r\\n\\r\\n    return dy;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Remove liquidity from the pool, weighted differently than the\\r\\n   * pool's current balances.\\r\\n   *\\r\\n   * @param self Swap struct to read from and write to\\r\\n   * @param amounts how much of each token to withdraw\\r\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\r\\n   * remove liquidity. Useful as a front-running mitigation.\\r\\n   * @return actual amount of LP tokens burned in the withdrawal\\r\\n   */\\r\\n  function removeLiquidityImbalance(\\r\\n    Swap storage self,\\r\\n    uint256[] memory amounts,\\r\\n    uint256 maxBurnAmount\\r\\n  ) public returns (uint256) {\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n\\r\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\r\\n      0,\\r\\n      0,\\r\\n      0,\\r\\n      _getAPrecise(self),\\r\\n      self.lpToken,\\r\\n      0,\\r\\n      self.balances\\r\\n    );\\r\\n    v.totalSupply = v.lpToken.totalSupply();\\r\\n\\r\\n    require(amounts.length == 2, \\\"Amounts should match pool tokens\\\");\\r\\n\\r\\n    require(\\r\\n      maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0,\\r\\n      \\\">LP.balanceOf\\\"\\r\\n    );\\r\\n\\r\\n    uint256 feePerToken = self.swapFee / 2;\\r\\n    uint256[] memory fees = new uint256[](2);\\r\\n\\r\\n    {\\r\\n      uint256[] memory balances1 = new uint256[](2);\\r\\n\\r\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\r\\n      for (uint256 i = 0; i < 2; i++) {\\r\\n        require(\\r\\n          amounts[i] <= v.balances[i],\\r\\n          \\\"Cannot withdraw more than available\\\"\\r\\n        );\\r\\n        balances1[i] = v.balances[i] - amounts[i];\\r\\n      }\\r\\n      v.d1 = getD(_pricedInBatch(self, balances1), v.preciseA);\\r\\n\\r\\n      for (uint256 i = 0; i < 2; i++) {\\r\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\r\\n        uint256 difference = idealBalance.difference(balances1[i]);\\r\\n        fees[i] = (feePerToken * difference) / FEE_DENOMINATOR;\\r\\n        uint256 adminFee = self.adminFee;\\r\\n        {\\r\\n          self.balances[i] =\\r\\n            balances1[i] -\\r\\n            ((fees[i] * adminFee) / FEE_DENOMINATOR);\\r\\n        }\\r\\n        balances1[i] = balances1[i] - fees[i];\\r\\n      }\\r\\n\\r\\n      v.d2 = getD(_pricedInBatch(self, balances1), v.preciseA);\\r\\n    }\\r\\n\\r\\n    uint256 tokenAmount = ((v.d0 - v.d2) * (v.totalSupply)) / v.d0;\\r\\n    require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\r\\n    tokenAmount = tokenAmount + 1;\\r\\n\\r\\n    require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\r\\n\\r\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\r\\n\\r\\n    (bool sent, ) = payable(msg.sender).call{ value: amounts[0] }(\\\"\\\");\\r\\n    require(sent, \\\"SwapUtils: Failed to send Avax\\\");\\r\\n    wETH2Reference.safeTransferFrom(\\r\\n      address(this),\\r\\n      msg.sender,\\r\\n      self.pooledTokenId,\\r\\n      amounts[1],\\r\\n      \\\"\\\"\\r\\n    );\\r\\n\\r\\n    emit RemoveLiquidityImbalance(\\r\\n      msg.sender,\\r\\n      amounts,\\r\\n      fees,\\r\\n      v.d1,\\r\\n      v.totalSupply - tokenAmount\\r\\n    );\\r\\n\\r\\n    return tokenAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice withdraw all admin fees to a given address\\r\\n   * @param self Swap struct to withdraw fees from\\r\\n   * @param to Address to send the fees to\\r\\n   */\\r\\n  function withdrawAdminFees(Swap storage self, address to) external {\\r\\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\\r\\n    uint256 tokenBalance = wETH2Reference.balanceOf(\\r\\n      address(this),\\r\\n      self.pooledTokenId\\r\\n    ) - self.balances[1];\\r\\n    if (tokenBalance != 0) {\\r\\n      wETH2Reference.safeTransferFrom(\\r\\n        address(this),\\r\\n        to,\\r\\n        self.pooledTokenId,\\r\\n        tokenBalance,\\r\\n        \\\"\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    uint256 avaxBalance = address(this).balance - self.balances[0];\\r\\n    if (avaxBalance != 0) {\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: avaxBalance }(\\\"\\\");\\r\\n      require(sent, \\\"SwapUtils: Failed to send Avax\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the admin fee\\r\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\r\\n   * @param self Swap struct to update\\r\\n   * @param newAdminFee new admin fee to be applied on future transactions\\r\\n   */\\r\\n  function setAdminFee(Swap storage self, uint256 newAdminFee) external {\\r\\n    require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\r\\n    self.adminFee = newAdminFee;\\r\\n\\r\\n    emit NewAdminFee(newAdminFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice update the swap fee\\r\\n   * @dev fee cannot be higher than 1% of each swap\\r\\n   * @param self Swap struct to update\\r\\n   * @param newSwapFee new swap fee to be applied on future transactions\\r\\n   */\\r\\n  function setSwapFee(Swap storage self, uint256 newSwapFee) external {\\r\\n    require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\r\\n    self.swapFee = newSwapFee;\\r\\n\\r\\n    emit NewSwapFee(newSwapFee);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xafa1eff545bd18ddbb055cf54eefb3be45dc7e80bf889dfb5b26c8e2e48bce26\",\"license\":\"MIT\"},\"contracts/interfaces/IgAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgAVAX {\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n  function uri(uint256) external view returns (string memory);\\r\\n\\r\\n  function balanceOf(address account, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n  function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n  function isApprovedForAll(address account, address operator)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function safeBatchTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function burn(\\r\\n    address account,\\r\\n    uint256 id,\\r\\n    uint256 value\\r\\n  ) external;\\r\\n\\r\\n  function burnBatch(\\r\\n    address account,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory values\\r\\n  ) external;\\r\\n\\r\\n  function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n  function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n  function mint(\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function mintBatch(\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function pause() external;\\r\\n\\r\\n  function unpause() external;\\r\\n\\r\\n  function pricePerShare(uint256 _id) external view returns (uint256);\\r\\n\\r\\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id) external;\\r\\n\\r\\n  function isInterface(address operator, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function setInterface(\\r\\n    address _Interface,\\r\\n    uint256 _id,\\r\\n    bool isSet\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe3954d8ed0616f70079a6799a677c988f79dce2412a6be7c5ae8dc0a95e8967b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6105de61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063396984151461007157806358fdd79b1461008d578063b0a14cfc146100af578063c9b64dcb146100c2578063d011f918146100d5578063f14e211e146100dd575b600080fd5b61007b620f424081565b60405190815260200160405180910390f35b81801561009957600080fd5b506100ad6100a83660046104f6565b6100fd565b005b61007b6100bd3660046104dd565b61034a565b61007b6100d03660046104dd565b610367565b61007b606481565b8180156100e957600080fd5b506100ad6100f83660046104dd565b610372565b600283015461010f9062015180610522565b4210156101635760405162461bcd60e51b815260206004820152601f60248201527f57616974203120646179206265666f7265207374617274696e672072616d700060448201526064015b60405180910390fd5b6101706212750042610522565b8110156101b85760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742072616d702074696d6560501b604482015260640161015a565b6000821180156101ca5750620f424082105b6102165760405162461bcd60e51b815260206004820181905260248201527f667574757265415f206d757374206265203e203020616e64203c204d41585f41604482015260640161015a565b60006102218461042f565b9050600061023060648561055c565b905081811015610291578161024660028361055c565b101561028c5760405162461bcd60e51b8152602060048201526015602482015274199d5d1d5c995057c81a5cc81d1bdbc81cdb585b1b605a1b604482015260640161015a565b6102e3565b61029c60028361055c565b8111156102e35760405162461bcd60e51b8152602060048201526015602482015274667574757265415f20697320746f6f206c6172676560581b604482015260640161015a565b8185556001850181905542600286018190556003860184905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a15050505050565b600060646103578361042f565b610361919061053a565b92915050565b60006103618261042f565b428160030154116103c55760405162461bcd60e51b815260206004820152601760248201527f52616d7020697320616c72656164792073746f70706564000000000000000000604482015260640161015a565b60006103d08261042f565b808355600183018190554260028401819055600384018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019389161042391848252602082015260400190565b60405180910390a15050565b6003810154600182015460009190428211156104d657600284015484548083111561049a5761045e828561057b565b610468834261057b565b610472838661057b565b61047c919061055c565b610486919061053a565b6104909082610522565b9695505050505050565b6104a4828561057b565b6104ae834261057b565b6104b8858461057b565b6104c2919061055c565b6104cc919061053a565b610490908261057b565b9392505050565b6000602082840312156104ef57600080fd5b5035919050565b60008060006060848603121561050b57600080fd5b505081359360208301359350604090920135919050565b6000821982111561053557610535610592565b500190565b60008261055757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561057657610576610592565b500290565b60008282101561058d5761058d610592565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b745e24de785ef0da5db0011c817203f8c4082c5620ef9ac949cf015d6dcda5a64736f6c63430008070033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063396984151461007157806358fdd79b1461008d578063b0a14cfc146100af578063c9b64dcb146100c2578063d011f918146100d5578063f14e211e146100dd575b600080fd5b61007b620f424081565b60405190815260200160405180910390f35b81801561009957600080fd5b506100ad6100a83660046104f6565b6100fd565b005b61007b6100bd3660046104dd565b61034a565b61007b6100d03660046104dd565b610367565b61007b606481565b8180156100e957600080fd5b506100ad6100f83660046104dd565b610372565b600283015461010f9062015180610522565b4210156101635760405162461bcd60e51b815260206004820152601f60248201527f57616974203120646179206265666f7265207374617274696e672072616d700060448201526064015b60405180910390fd5b6101706212750042610522565b8110156101b85760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742072616d702074696d6560501b604482015260640161015a565b6000821180156101ca5750620f424082105b6102165760405162461bcd60e51b815260206004820181905260248201527f667574757265415f206d757374206265203e203020616e64203c204d41585f41604482015260640161015a565b60006102218461042f565b9050600061023060648561055c565b905081811015610291578161024660028361055c565b101561028c5760405162461bcd60e51b8152602060048201526015602482015274199d5d1d5c995057c81a5cc81d1bdbc81cdb585b1b605a1b604482015260640161015a565b6102e3565b61029c60028361055c565b8111156102e35760405162461bcd60e51b8152602060048201526015602482015274667574757265415f20697320746f6f206c6172676560581b604482015260640161015a565b8185556001850181905542600286018190556003860184905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a15050505050565b600060646103578361042f565b610361919061053a565b92915050565b60006103618261042f565b428160030154116103c55760405162461bcd60e51b815260206004820152601760248201527f52616d7020697320616c72656164792073746f70706564000000000000000000604482015260640161015a565b60006103d08261042f565b808355600183018190554260028401819055600384018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019389161042391848252602082015260400190565b60405180910390a15050565b6003810154600182015460009190428211156104d657600284015484548083111561049a5761045e828561057b565b610468834261057b565b610472838661057b565b61047c919061055c565b610486919061053a565b6104909082610522565b9695505050505050565b6104a4828561057b565b6104ae834261057b565b6104b8858461057b565b6104c2919061055c565b6104cc919061053a565b610490908261057b565b9392505050565b6000602082840312156104ef57600080fd5b5035919050565b60008060006060848603121561050b57600080fd5b505081359360208301359350604090920135919050565b6000821982111561053557610535610592565b500190565b60008261055757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561057657610576610592565b500290565b60008282101561058d5761058d610592565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b745e24de785ef0da5db0011c817203f8c4082c5620ef9ac949cf015d6dcda5a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getA(SwapUtils.Swap storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter"
        }
      },
      "getAPrecise(SwapUtils.Swap storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "rampA(SwapUtils.Swap storage,uint256,uint256)": {
        "params": {
          "futureA_": "the new A to ramp towards",
          "futureTime_": "timestamp when the new A should be reached",
          "self": "Swap struct to update"
        }
      },
      "stopRampA(SwapUtils.Swap storage)": {
        "params": {
          "self": "Swap struct to update"
        }
      }
    },
    "title": "AmplificationUtils library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getA(SwapUtils.Swap storage)": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise(SwapUtils.Swap storage)": {
        "notice": "Return A in its raw precision"
      },
      "rampA(SwapUtils.Swap storage,uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "stopRampA(SwapUtils.Swap storage)": {
        "notice": "Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours"
      }
    },
    "notice": "A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct. This library assumes the struct is fully validated.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}