{
  "address": "0x4fe8C658f268842445Ae8f95D4D6D8Cfd356a8C8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ContractVersionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "DefaultInterface",
          "type": "address"
        }
      ],
      "name": "DefaultInterfaceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSurplus",
          "type": "uint256"
        }
      ],
      "name": "FeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MaintainerFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "MaxMaintainerFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "MaxOperationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "NewElectorType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senate_expire_timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "OperationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeOperator",
          "type": "uint256"
        }
      ],
      "name": "OperatorActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deactiveOperator",
          "type": "uint256"
        }
      ],
      "name": "OperatorDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedFeeTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "OracleUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSurplus",
          "type": "uint256"
        }
      ],
      "name": "SurplusClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UnpausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electorId",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidDebt",
          "type": "uint256"
        }
      ],
      "name": "debtPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pBank",
          "type": "bytes"
        }
      ],
      "name": "pBankSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTRACT_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_INTERFACE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "accumulatedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_activeId",
          "type": "uint256"
        }
      ],
      "name": "activateOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "electorId",
          "type": "uint256"
        }
      ],
      "name": "approveSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "changeIdCONTROLLER",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newMaintainer",
          "type": "address"
        }
      ],
      "name": "changeIdMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "claimFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeSent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "claimSurplus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deactivedId",
          "type": "uint256"
        }
      ],
      "name": "deactivateOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getCONTROLLERFromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getIdFromName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "getIdsByType",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMaintainerFeeFromId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMaintainerFromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxOperationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getNameFromId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "getPBank",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "CONTROLLER",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TYPE",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            }
          ],
          "internalType": "struct GeodeUtils.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSenate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSenateExpireTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakePoolParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "gAVAX",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "DEFAULT_SWAP_POOL",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "DEFAULT_LP_TOKEN",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ORACLE",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "DEFAULT_A",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "DEFAULT_FEE",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "DEFAULT_ADMIN_FEE",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "FEE_DENOMINATOR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "PERIOD_PRICE_INCREASE_LIMIT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MAX_MAINTAINER_FEE",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakeUtils.StakePool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_GOVERNANCE",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ORACLE",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DEFAULT_SWAP_POOL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DEFAULT_INTERFACE",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DEFAULT_LP_TOKEN",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        }
      ],
      "name": "isOracleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isStakingPausedForPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalDuration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        }
      ],
      "name": "newProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "operatorActivationExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "pauseStakingForPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "payDebt",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "planetActiveOperator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "planetClaimableSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "planetCurrentInterface",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "planetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtInAvax",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "planetLPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "planetOraclePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pricePershare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "planetPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "planetSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "planetWithdrawalPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportedTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_opIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pBalanceIncreases",
          "type": "uint256[]"
        }
      ],
      "name": "reportOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDefault",
          "type": "address"
        }
      ],
      "name": "setDefaultInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setMaintainerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxMaintainerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxOperationFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setOperationFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pBank",
          "type": "bytes"
        }
      ],
      "name": "setPBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_Interface",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "setPlanetInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minGavax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalgAvax",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        }
      ],
      "name": "unclaimedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unpauseStakingForPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "solcInputHash": "492b8174343aef947d9cd2113004784d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ContractVersionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DefaultInterface\",\"type\":\"address\"}],\"name\":\"DefaultInterfaceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSurplus\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MaintainerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"MaxMaintainerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"MaxOperationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"NewElectorType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senate_expire_timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OperationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeOperator\",\"type\":\"uint256\"}],\"name\":\"OperatorActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactiveOperator\",\"type\":\"uint256\"}],\"name\":\"OperatorDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedFeeTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTimeStamp\",\"type\":\"uint256\"}],\"name\":\"OracleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSurplus\",\"type\":\"uint256\"}],\"name\":\"SurplusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnpausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electorId\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidDebt\",\"type\":\"uint256\"}],\"name\":\"debtPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pBank\",\"type\":\"bytes\"}],\"name\":\"pBankSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_INTERFACE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeId\",\"type\":\"uint256\"}],\"name\":\"activateOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"electorId\",\"type\":\"uint256\"}],\"name\":\"approveSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newCONTROLLER\",\"type\":\"address\"}],\"name\":\"changeIdCONTROLLER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newMaintainer\",\"type\":\"address\"}],\"name\":\"changeIdMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"claimSurplus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deactivedId\",\"type\":\"uint256\"}],\"name\":\"deactivateOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCONTROLLERFromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getIdFromName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getIdsByType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMaintainerFeeFromId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMaintainerFromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxOperationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNameFromId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"getPBank\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"internalType\":\"struct GeodeUtils.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSenate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSenateExpireTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakePoolParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DEFAULT_SWAP_POOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DEFAULT_LP_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ORACLE\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DEFAULT_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DEFAULT_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DEFAULT_ADMIN_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FEE_DENOMINATOR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PERIOD_PRICE_INCREASE_LIMIT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAX_MAINTAINER_FEE\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeUtils.StakePool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GOVERNANCE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ORACLE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEFAULT_SWAP_POOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEFAULT_INTERFACE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEFAULT_LP_TOKEN\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"isOracleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isStakingPausedForPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"operatorActivationExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pauseStakingForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"payDebt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"planetActiveOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"planetClaimableSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"planetCurrentInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"planetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtInAvax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"planetLPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"planetOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePershare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"planetPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"planetSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"planetWithdrawalPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportedTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_opIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pBalanceIncreases\",\"type\":\"uint256[]\"}],\"name\":\"reportOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDefault\",\"type\":\"address\"}],\"name\":\"setDefaultInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setMaintainerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setMaxMaintainerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setMaxOperationFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setOperationFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pBank\",\"type\":\"bytes\"}],\"name\":\"setPBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Interface\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setPlanetInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minGavax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalgAvax\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unpauseStakingForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"refer to DataStoreUtils before reviewingrefer to GeodeUtils > Includes the logic for management of Geode Portal with Senate.refer to StakeUtils > Includes the logic for staking functionality with Withdrawal Pools\",\"events\":{\"OperationFeeUpdated(uint256)\":{\"details\":\"following events are added to help fellow devs with better ABIscontract size is not affected\"}},\"kind\":\"dev\",\"methods\":{\"accumulatedFee(uint256,uint256)\":{\"details\":\"for planet's maintainer's accumulatedFee (planetId,planetId)\"},\"approveProposal(uint256)\":{\"details\":\"only Senate is checked in GEODE.approveProposal\"},\"changeIdCONTROLLER(uint256,address)\":{\"details\":\"this action can not be overwritten by the old CONTROLLER after set.\"},\"claimSurplus(uint256)\":{\"returns\":{\"success\":\"if transfer of funds is succesful\"}},\"deactivateOperator(uint256,uint256)\":{\"details\":\"when activationExpiration is up, operator will NOT be able generate fees from pool, it is expected for them to return the assets as surplus with payDebt function_deactivateAfter seconds until activation expires,\"},\"getIdsByType(uint256)\":{\"returns\":{\"_0\":\"allIdsByType array of DatastoreUtilsLib\"}},\"getMaintainerFromId(uint256)\":{\"details\":\"maintainer operates the id: claims the fee, pays the debt, signs the messages for verification etc.\"},\"isOracleActive(uint256)\":{\"details\":\"returns false after oracle update for the given pool.\"},\"newProposal(address,uint256,uint256,bytes)\":{\"details\":\"\\\"name already claimed check\\\" is being made here as override can be a wanted feature in the future\",\"params\":{\"_CONTROLLER\":\"address of the\",\"_name\":\"unique, id = keccak(name)\",\"_proposalDuration\":\"proposal can not approved after expiration but can be override\",\"_type\":\"of the proposal is seperator between different user experiences it can be upgrade proposal, senate election, operator/planet proposal etc.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payDebt(uint256,uint256)\":{\"details\":\"msg.value-debt is put to surplus, this can be used to increase surplus without minting new tokens!! useful to claim fees\"},\"planetCurrentInterface(uint256)\":{\"details\":\"not reliable => refer setPlanetInterface\"},\"planetDebt(uint256)\":{\"returns\":{\"debtInAvax\":\"is the current debt amount that pays for fees and provides a stable price to withdrawalPool\"}},\"planetOraclePrice(uint256)\":{\"details\":\"also the *mint price* as gAVAX.pricePerShare(id)TotalStakedAvax can be estimated by: TotalSupply(id) * planetOraclePrice(id)\"},\"planetPBalance(uint256)\":{\"returns\":{\"_0\":\"debtInAvax is the first guess that provides a withdrtawalPool price that is between limits of slippage when buyback&burn.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"reportOracle(uint256,uint256,uint256[],uint256[])\":{\"details\":\"simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\",\"params\":{\"_opIds\":\"all ids of all operators who still collect fees.\",\"_pBalanceIncreases\":\"the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\"},\"returns\":{\"price\":\": new price after sanitychecks, might be useful if onchain oracle in the future\"}},\"setMaxOperationFee(uint256)\":{\"details\":\"onlySenate CHECKED inside\"},\"setPBank(uint256,uint256,bytes)\":{\"details\":\"this logic makes the operator-planet interactions more reliable and transparent when used by oracle to detect the token flow between different subchains.\"},\"setPlanetInterface(uint256,address,bool)\":{\"params\":{\"_Interface\":\"address of the new gAVAX ERC1155 interface for given ID\",\"isSet\":\"true if new interface is going to be set, false if old interface is being unset\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Geode Finance Avalanche Portal: Avax Liquid Staking Geode Portal is a first of its kind Decentralized Minter that builds a trustless staking Ecosystem for any service provider.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_INTERFACE()\":{\"notice\":\"Default erc1155 interface, currently allows every id to be act as ERC20\"},\"accumulatedFee(uint256,uint256)\":{\"notice\":\"amount of fee (as AVAX) that has been distributed to the maintainer so far\"},\"activateOperator(uint256,uint256)\":{\"notice\":\"When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and creating validators\"},\"changeIdCONTROLLER(uint256,address)\":{\"notice\":\"only CONTROLLER is allowed to change the CONTROLLER of the pool check is done inside the library.\"},\"changeIdMaintainer(uint256,address)\":{\"notice\":\"only CONTROLLER is allowed to change the maintainer of the pool check is done inside the library.\"},\"claimFee(uint256,uint256)\":{\"notice\":\"anyone can call this function, but it sends AVAX only to maintainer.reverts if there are not enough surplus.\"},\"claimSurplus(uint256)\":{\"notice\":\"operators can not claim fees if: expired OR deactivatedcurrent unclaimedFees are not allowed to be claimed as surplus\"},\"deactivateOperator(uint256,uint256)\":{\"notice\":\"deactivates an old operator for the given staking pool\"},\"getCONTROLLERFromId(uint256)\":{\"notice\":\"returns address(0) for empty ids, mandatory\"},\"getIdFromName(string)\":{\"notice\":\"id is keccak(name)\"},\"getMaintainerFeeFromId(uint256)\":{\"notice\":\"even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\"},\"getMaintainerFromId(uint256)\":{\"notice\":\"returns address(0) if NOT set, NOT mandatory\"},\"getNameFromId(uint256)\":{\"notice\":\"returns bytes(0) for empty ids, mandatory\"},\"getProposal(uint256)\":{\"notice\":\"** PROPOSALS **\"},\"getSenate()\":{\"notice\":\"** GOVERNANCE GETTERS **\"},\"isOracleActive(uint256)\":{\"notice\":\"Oracle is only allowed for a period every day & pool operations are stopped then\"},\"isStakingPausedForPool(uint256)\":{\"notice\":\"** Staking Pools **\"},\"newProposal(address,uint256,uint256,bytes)\":{\"notice\":\"creates a new proposal as id = keccak(name),\"},\"operatorActivationExpiration(uint256,uint256)\":{\"notice\":\"** Operator GETTERS ***\"},\"pauseStakingForPool(uint256)\":{\"notice\":\"when a pool is paused there are NO new funds to be minted, NO surplus.\"},\"payDebt(uint256,uint256)\":{\"notice\":\"An Operator is expected to pay for the DEBT of a staking pool\"},\"planetActiveOperator(uint256)\":{\"notice\":\"ActiveOperator can claim the surplus of the given staking pool to create validators,There can be only one active operator for an ID. However old active operators can still continue operating until activationExpiration timestamp and acquire fees.*\"},\"planetClaimableSurplus(uint256)\":{\"notice\":\"total amount of staked Avax that can be claimed, as Fees are not claimable to be staked\"},\"planetDebt(uint256)\":{\"notice\":\"When a debt is calculated, it also takes the unclaimed Fees into consideration for the Planet since payDebt pays that -if it is more than surplus- first and then covers the withdrawal Pool.\"},\"planetLPToken(uint256)\":{\"notice\":\"LP token of the Withdrawal pool of given ID\"},\"planetOraclePrice(uint256)\":{\"notice\":\"oraclePrice is a reliable source for any contract operation on-chain\"},\"planetPBalance(uint256)\":{\"notice\":\"Debt of the planet is found by approaching to it's price within WithdrawalPool\"},\"planetSurplus(uint256)\":{\"notice\":\"total amount of staked Avax that has been waiting to be staked\"},\"planetWithdrawalPool(uint256)\":{\"notice\":\"pool that maintains the price of the staking derivative\"},\"reportOracle(uint256,uint256,uint256[],uint256[])\":{\"notice\":\"only Oracle can report a new price. However price is not purely calculated by it. the balance on P subchain is estimated by it, including the unrealized staking rewards. Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\"},\"setOperationFee(uint256)\":{\"notice\":\"** GOVERNANCE/SENATE SETTERS **\"},\"setPBank(uint256,uint256,bytes)\":{\"notice\":\"pBank is the only address on the P subchain that interacts with tokens that is claimed by operator as surplus.\"},\"setPlanetInterface(uint256,address,bool)\":{\"notice\":\"if a planet did not unset an old Interface, before setting a new one;  & if new interface is unsetted, the old one will not be remembered!!  use gAVAX.isInterface(interface,  id)\"}},\"notice\":\"TYPE: seperates the proposals and related functionality between different ID types. * RESERVED TYPES on Portalv1: * * TYPE 4: Operator * * TYPE 5: Planet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/Portal.sol\":\"Portal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Portal/Portal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557\\r\\n//  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\r\\n//  \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\r\\n//  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d      \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\r\\n//  \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2551     \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\r\\n//   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n//\\r\\n\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./utils/DataStoreLib.sol\\\";\\r\\nimport \\\"./utils/GeodeUtilsLib.sol\\\";\\r\\nimport \\\"./utils/StakeUtilsLib.sol\\\";\\r\\nimport \\\"../interfaces/IPortal.sol\\\";\\r\\nimport \\\"../interfaces/IERC20InterfaceUpgradable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Geode Finance Avalanche Portal: Avax Liquid Staking\\r\\n *\\r\\n * Geode Portal is a first of its kind Decentralized Minter that builds\\r\\n * a trustless staking Ecosystem for any service provider.\\r\\n *\\r\\n * @dev refer to DataStoreUtils before reviewing\\r\\n * @dev refer to GeodeUtils > Includes the logic for management of Geode Portal with Senate.\\r\\n * @dev refer to StakeUtils > Includes the logic for staking functionality with Withdrawal Pools\\r\\n * @notice TYPE: seperates the proposals and related functionality between different ID types.\\r\\n * * RESERVED TYPES on Portalv1:\\r\\n * * * TYPE 4: Operator\\r\\n * * * TYPE 5: Planet\\r\\n */\\r\\n\\r\\ncontract Portal is\\r\\n  IPortal,\\r\\n  ReentrancyGuardUpgradeable,\\r\\n  PausableUpgradeable,\\r\\n  ERC1155HolderUpgradeable,\\r\\n  UUPSUpgradeable\\r\\n{\\r\\n  /**\\r\\n   * @dev following events are added to help fellow devs with better ABIs\\r\\n   * @dev contract size is not affected\\r\\n   */\\r\\n  // GeodeUtils Events\\r\\n  event OperationFeeUpdated(uint256 newFee);\\r\\n  event MaxOperationFeeUpdated(uint256 newMaxFee);\\r\\n  event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n  event Proposed(\\r\\n    uint256 id,\\r\\n    address _CONTROLLER,\\r\\n    uint256 _type,\\r\\n    uint256 _duration\\r\\n  );\\r\\n  event ProposalApproved(uint256 id);\\r\\n  event NewElectorType(uint256 _type);\\r\\n  event Vote(uint256 proposalId, uint256 electorId);\\r\\n  event NewSenate(address senate, uint256 senate_expire_timestamp);\\r\\n\\r\\n  // StakeUtils Events\\r\\n  event MaintainerFeeUpdated(uint256 id, uint256 fee);\\r\\n  event MaxMaintainerFeeUpdated(uint256 newMaxFee);\\r\\n  event PriceChanged(uint256 id, uint256 pricePerShare);\\r\\n  event OracleUpdate(\\r\\n    uint256 id,\\r\\n    uint256 price,\\r\\n    uint256 newPBalance,\\r\\n    uint256 distributedFeeTotal,\\r\\n    uint256 updateTimeStamp\\r\\n  );\\r\\n  event OperatorActivated(uint256 id, uint256 activeOperator);\\r\\n  event OperatorDeactivated(uint256 id, uint256 deactiveOperator);\\r\\n  event debtPaid(uint256 id, uint256 operatorId, uint256 paidDebt);\\r\\n  event SurplusClaimed(uint256 id, uint256 newSurplus);\\r\\n  event FeeClaimed(uint256 id, uint256 claimerId, uint256 newSurplus);\\r\\n  event PausedPool(uint256 id);\\r\\n  event UnpausedPool(uint256 id);\\r\\n\\r\\n  // Portal Events\\r\\n  event ContractVersionSet(uint256 version);\\r\\n  event DefaultInterfaceSet(address DefaultInterface);\\r\\n  event pBankSet(uint256 operatorId, uint256 planetId, bytes pBank);\\r\\n\\r\\n  using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n  using GeodeUtils for GeodeUtils.Universe;\\r\\n  using StakeUtils for StakeUtils.StakePool;\\r\\n\\r\\n  DataStoreUtils.DataStore private DATASTORE;\\r\\n  GeodeUtils.Universe private GEODE;\\r\\n  StakeUtils.StakePool private STAKEPOOL;\\r\\n\\r\\n  /// @notice Default erc1155 interface, currently allows every id to be act as ERC20\\r\\n  address public DEFAULT_INTERFACE;\\r\\n  uint256 public CONTRACT_VERSION;\\r\\n\\r\\n  function initialize(\\r\\n    address _GOVERNANCE,\\r\\n    address _ORACLE,\\r\\n    address _gAVAX,\\r\\n    address _DEFAULT_SWAP_POOL,\\r\\n    address _DEFAULT_INTERFACE,\\r\\n    address _DEFAULT_LP_TOKEN\\r\\n  ) public virtual override initializer {\\r\\n    __ReentrancyGuard_init();\\r\\n    __Pausable_init();\\r\\n    __ERC1155Holder_init();\\r\\n    __UUPSUpgradeable_init();\\r\\n\\r\\n    require(_GOVERNANCE != address(0), \\\"Portal: _GOVERNANCE can not be zero\\\");\\r\\n    require(_ORACLE != address(0), \\\"Portal: _ORACLE can not be zero\\\");\\r\\n    require(_gAVAX != address(0), \\\"Portal: _gAVAX can not be zero\\\");\\r\\n    require(\\r\\n      _DEFAULT_SWAP_POOL != address(0),\\r\\n      \\\"Portal: _DEFAULT_SWAP_POOL can not be zero\\\"\\r\\n    );\\r\\n    require(\\r\\n      _DEFAULT_INTERFACE != address(0),\\r\\n      \\\"Portal: _DEFAULT_INTERFACE can not be zero\\\"\\r\\n    );\\r\\n    require(\\r\\n      _DEFAULT_LP_TOKEN != address(0),\\r\\n      \\\"Portal: _DEFAULT_LP_TOKEN can not be zero\\\"\\r\\n    );\\r\\n    /**\\r\\n     * since it is deployment of v1 contracts senate is currently the governance\\r\\n     * A vote can be proposed when electorCount > 4\\r\\n     */\\r\\n    GEODE.GOVERNANCE = _GOVERNANCE;\\r\\n    GEODE.SENATE = GEODE.GOVERNANCE;\\r\\n    GEODE.SENATE_EXPIRE_TIMESTAMP =\\r\\n      block.timestamp +\\r\\n      GeodeUtils.MAX_SENATE_PERIOD;\\r\\n    GEODE.OPERATION_FEE = 0;\\r\\n    GEODE.MAX_OPERATION_FEE = 0;\\r\\n    GEODE.FEE_DENOMINATOR = 10**10;\\r\\n    // allow Planets to vote for Senate\\r\\n    GEODE.setElectorType(DATASTORE, 5, true);\\r\\n\\r\\n    DEFAULT_INTERFACE = _DEFAULT_INTERFACE;\\r\\n\\r\\n    STAKEPOOL.FEE_DENOMINATOR = GEODE.FEE_DENOMINATOR;\\r\\n    STAKEPOOL.gAVAX = _gAVAX;\\r\\n    STAKEPOOL.ORACLE = _ORACLE;\\r\\n    STAKEPOOL.DEFAULT_SWAP_POOL = _DEFAULT_SWAP_POOL;\\r\\n    STAKEPOOL.DEFAULT_LP_TOKEN = _DEFAULT_LP_TOKEN;\\r\\n    STAKEPOOL.DEFAULT_A = 60;\\r\\n    STAKEPOOL.DEFAULT_FEE = 4e6;\\r\\n    STAKEPOOL.DEFAULT_ADMIN_FEE = 5e9;\\r\\n    STAKEPOOL.PERIOD_PRICE_INCREASE_LIMIT = (2 * GEODE.FEE_DENOMINATOR) / 1e3; // 0.2%\\r\\n    STAKEPOOL.MAX_MAINTAINER_FEE = (10 * GEODE.FEE_DENOMINATOR) / 1e2; //10%\\r\\n\\r\\n    GEODE.approvedUpgrade = address(0);\\r\\n\\r\\n    CONTRACT_VERSION = 1;\\r\\n    emit ContractVersionSet(1);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(msg.sender == GEODE.GOVERNANCE, \\\"Portal: sender not GOVERNANCE\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                    ** Contract specific functions **\\r\\n   **/\\r\\n\\r\\n  ///@dev required by the OZ UUPS module\\r\\n  function _authorizeUpgrade(address proposed_implementation)\\r\\n    internal\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    require(proposed_implementation != address(0));\\r\\n    require(\\r\\n      GEODE.isUpgradeAllowed(proposed_implementation),\\r\\n      \\\"Portal: is not allowed to upgrade\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function pause() external virtual override onlyGovernance {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  function unpause() external virtual override onlyGovernance {\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  function getVersion() external view virtual override returns (uint256) {\\r\\n    return CONTRACT_VERSION;\\r\\n  }\\r\\n\\r\\n  function gAVAX() external view virtual override returns (address) {\\r\\n    return address(STAKEPOOL.getgAVAX());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** GETTERS **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   *                                    ** GOVERNANCE GETTERS **\\r\\n   */\\r\\n\\r\\n  function getSenate() external view virtual override returns (address) {\\r\\n    return GEODE.getSenate();\\r\\n  }\\r\\n\\r\\n  function getGovernance() external view virtual override returns (address) {\\r\\n    return GEODE.getGovernance();\\r\\n  }\\r\\n\\r\\n  function getOperationFee() external view virtual override returns (uint256) {\\r\\n    return GEODE.getOperationFee();\\r\\n  }\\r\\n\\r\\n  function getMaxOperationFee()\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return GEODE.getMaxOperationFee();\\r\\n  }\\r\\n\\r\\n  function getSenateExpireTimestamp()\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return GEODE.getSenateExpireTimestamp();\\r\\n  }\\r\\n\\r\\n  function getFeeDenominator()\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return GEODE.FEE_DENOMINATOR;\\r\\n  }\\r\\n\\r\\n  function getStakePoolParams()\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (StakeUtils.StakePool memory)\\r\\n  {\\r\\n    return STAKEPOOL;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *                                          **ID GETTERS **\\r\\n   */\\r\\n\\r\\n  /// @return allIdsByType array of DatastoreUtilsLib\\r\\n  function getIdsByType(uint256 _type)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    return DATASTORE.allIdsByType[_type];\\r\\n  }\\r\\n\\r\\n  /// @notice id is keccak(name)\\r\\n  function getIdFromName(string calldata _name)\\r\\n    external\\r\\n    pure\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256 _id)\\r\\n  {\\r\\n    _id = uint256(keccak256(abi.encodePacked(_name)));\\r\\n  }\\r\\n\\r\\n  /// @notice returns bytes(0) for empty ids, mandatory\\r\\n  function getNameFromId(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return DATASTORE.readBytesForId(_id, \\\"name\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice returns address(0) for empty ids, mandatory\\r\\n  function getCONTROLLERFromId(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice returns address(0) if NOT set, NOT mandatory\\r\\n   * @dev maintainer operates the id: claims the fee, pays the debt, signs the messages for verification etc.\\r\\n   */\\r\\n  function getMaintainerFromId(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return DATASTORE.readAddressForId(_id, \\\"maintainer\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\\r\\n  function getMaintainerFeeFromId(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return STAKEPOOL.getMaintainerFee(DATASTORE, _id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** Planet GETTERS **\\r\\n   **/\\r\\n\\r\\n  /// @dev not reliable => refer setPlanetInterface\\r\\n  function planetCurrentInterface(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return DATASTORE.readAddressForId(_id, \\\"currentInterface\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice pool that maintains the price of the staking derivative\\r\\n  function planetWithdrawalPool(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(StakeUtils.withdrawalPoolById(DATASTORE, _id));\\r\\n  }\\r\\n\\r\\n  /// @notice LP token of the Withdrawal pool of given ID\\r\\n  function planetLPToken(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(StakeUtils.LPTokenById(DATASTORE, _id));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice ActiveOperator can claim the surplus of the given staking pool to create validators,\\r\\n   * @notice There can be only one active operator for an ID. However old active operators can still\\r\\n   * continue operating until activationExpiration timestamp and acquire fees.\\r\\n   **/\\r\\n  function planetActiveOperator(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return DATASTORE.readUintForId(_id, \\\"activeOperator\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                              ** Operator GETTERS **\\r\\n   **/\\r\\n\\r\\n  function operatorActivationExpiration(uint256 planetId, uint256 operatorId)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return\\r\\n      DATASTORE.readUintForId(\\r\\n        planetId,\\r\\n        bytes32(keccak256(abi.encodePacked(operatorId, \\\"activationExpiration\\\")))\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** SETTERS **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice only CONTROLLER is allowed to change the CONTROLLER of the pool\\r\\n   * check is done inside the library.\\r\\n   * @dev this action can not be overwritten by the old CONTROLLER after set.\\r\\n   */\\r\\n  function changeIdCONTROLLER(uint256 _id, address _newCONTROLLER)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n  {\\r\\n    GeodeUtils.changeIdCONTROLLER(DATASTORE, _id, _newCONTROLLER);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only CONTROLLER is allowed to change the maintainer of the pool\\r\\n   * check is done inside the library.\\r\\n   */\\r\\n  function changeIdMaintainer(uint256 _id, address _newMaintainer)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n  {\\r\\n    StakeUtils.changeMaintainer(DATASTORE, _id, _newMaintainer);\\r\\n  }\\r\\n\\r\\n  function setMaintainerFee(uint256 _id, uint256 _newFee)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    STAKEPOOL.setMaintainerFee(DATASTORE, _id, _newFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * ** GOVERNANCE/SENATE SETTERS **\\r\\n   */\\r\\n\\r\\n  function setOperationFee(uint256 _newFee)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    onlyGovernance\\r\\n    returns (bool success)\\r\\n  {\\r\\n    success = GEODE.setOperationFee(_newFee);\\r\\n  }\\r\\n\\r\\n  /// @dev onlySenate CHECKED inside\\r\\n  function setMaxOperationFee(uint256 _newFee)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool success)\\r\\n  {\\r\\n    success = GEODE.setMaxOperationFee(_newFee);\\r\\n  }\\r\\n\\r\\n  function setMaxMaintainerFee(uint256 _newMaxFee)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    onlyGovernance\\r\\n  {\\r\\n    STAKEPOOL.setMaxMaintainerFee(_newMaxFee);\\r\\n  }\\r\\n\\r\\n  function setDefaultInterface(address _newDefault)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    onlyGovernance\\r\\n  {\\r\\n    DEFAULT_INTERFACE = _newDefault;\\r\\n    emit DefaultInterfaceSet(_newDefault);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * ** Planet SETTERS **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and\\r\\n   * creating validators\\r\\n   */\\r\\n  function activateOperator(uint256 _id, uint256 _activeId)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    returns (bool)\\r\\n  {\\r\\n    return StakeUtils.activateOperator(DATASTORE, _id, _activeId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice deactivates an old operator for the given staking pool\\r\\n   * @dev when activationExpiration is up, operator will NOT be able generate fees from pool,\\r\\n   * it is expected for them to return the assets as surplus with payDebt function\\r\\n   * @dev _deactivateAfter seconds until activation expires,\\r\\n   */\\r\\n  function deactivateOperator(uint256 _id, uint256 _deactivedId)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return StakeUtils.deactivateOperator(DATASTORE, _id, _deactivedId);\\r\\n  }\\r\\n\\r\\n  function _setInterface(\\r\\n    uint256 _id,\\r\\n    address _Interface,\\r\\n    bool isSet\\r\\n  ) internal {\\r\\n    STAKEPOOL.getgAVAX().setInterface(_Interface, _id, isSet);\\r\\n    if (isSet) DATASTORE.writeAddressForId(_id, \\\"currentInterface\\\", _Interface);\\r\\n    else if (DATASTORE.readAddressForId(_id, \\\"currentInterface\\\") == _Interface)\\r\\n      DATASTORE.writeAddressForId(_id, \\\"currentInterface\\\", address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice if a planet did not unset an old Interface, before setting a new one;\\r\\n   *  & if new interface is unsetted, the old one will not be remembered!!\\r\\n   *  use gAVAX.isInterface(interface,  id)\\r\\n   * @param _Interface address of the new gAVAX ERC1155 interface for given ID\\r\\n   * @param isSet true if new interface is going to be set, false if old interface is being unset\\r\\n   */\\r\\n  function setPlanetInterface(\\r\\n    uint256 _id,\\r\\n    address _Interface,\\r\\n    bool isSet\\r\\n  ) external virtual override whenNotPaused {\\r\\n    require(\\r\\n      DATASTORE.readAddressForId(_id, \\\"maintainer\\\") == msg.sender,\\r\\n      \\\"Portal: sender not maintainer\\\"\\r\\n    );\\r\\n    _setInterface(_id, _Interface, isSet);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * ** Operator SETTERS/GETTERS**\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice pBank is the only address on the P subchain that interacts with tokens that is claimed by\\r\\n   * operator as surplus.\\r\\n   * @dev this logic makes the operator-planet interactions more reliable and transparent\\r\\n   * when used by oracle to detect the token flow between different subchains.\\r\\n   */\\r\\n  function setPBank(\\r\\n    uint256 operatorId,\\r\\n    uint256 planetId,\\r\\n    bytes memory pBank\\r\\n  ) external virtual override whenNotPaused {\\r\\n    require(\\r\\n      DATASTORE.readAddressForId(operatorId, \\\"maintainer\\\") == msg.sender,\\r\\n      \\\"Portal: sender not maintainer\\\"\\r\\n    );\\r\\n\\r\\n    DATASTORE.writeBytesForId(\\r\\n      operatorId,\\r\\n      bytes32(keccak256(abi.encodePacked(planetId, \\\"pBank\\\"))),\\r\\n      pBank\\r\\n    );\\r\\n    emit pBankSet(operatorId, planetId, pBank);\\r\\n  }\\r\\n\\r\\n  function getPBank(uint256 operatorId, uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      DATASTORE.readBytesForId(\\r\\n        operatorId,\\r\\n        bytes32(keccak256(abi.encodePacked(planetId, \\\"pBank\\\")))\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** PROPOSALS **\\r\\n   */\\r\\n\\r\\n  function getProposal(uint256 id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (GeodeUtils.Proposal memory)\\r\\n  {\\r\\n    return GEODE.getProposal(id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice creates a new proposal as id = keccak(name),\\r\\n   * @param _CONTROLLER address of the\\r\\n   * @param _type of the proposal is seperator between different user experiences\\r\\n   * it can be upgrade proposal, senate election, operator/planet proposal etc.\\r\\n   * @param _proposalDuration proposal can not approved after expiration but can be override\\r\\n   * @param _name unique, id = keccak(name)\\r\\n   * @dev \\\"name already claimed check\\\" is being made here as override can be a wanted feature in the future\\r\\n   */\\r\\n  function newProposal(\\r\\n    address _CONTROLLER,\\r\\n    uint256 _type,\\r\\n    uint256 _proposalDuration,\\r\\n    bytes calldata _name\\r\\n  ) external virtual override whenNotPaused onlyGovernance {\\r\\n    require(\\r\\n      DATASTORE\\r\\n        .readBytesForId(uint256(keccak256(abi.encodePacked(_name))), \\\"name\\\")\\r\\n        .length == 0,\\r\\n      \\\"PORTAL: name already claimed\\\"\\r\\n    );\\r\\n    GEODE.newProposal(_CONTROLLER, _type, _proposalDuration, _name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev only Senate is checked in GEODE.approveProposal\\r\\n   */\\r\\n  function approveProposal(uint256 _id)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n  {\\r\\n    /**\\r\\n     * RESERVED GeodeUtilsLib\\r\\n     * TYPE 0: inactive\\r\\n     * TYPE 1: Senate\\r\\n     * TYPE 2: Upgrade\\r\\n     * TYPE 3: **deprecated**\\r\\n     * RESERVED PORTALv1.0\\r\\n     * TYPE 4: operator\\r\\n     * TYPE 5: planet(public Staking pool)\\r\\n     * RESERVED PORTALv1.3:\\r\\n     * TYPE 6:  TODO :: private Staking pool (only maintainer)\\r\\n     **/\\r\\n    GEODE.approveProposal(DATASTORE, _id);\\r\\n    if (DATASTORE.readUintForId(_id, \\\"TYPE\\\") == 4) {\\r\\n      // operator\\r\\n      DATASTORE.writeAddressForId(\\r\\n        _id,\\r\\n        \\\"maintainer\\\",\\r\\n        DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\")\\r\\n      );\\r\\n    } else if (DATASTORE.readUintForId(_id, \\\"TYPE\\\") == 5) {\\r\\n      // planet\\r\\n      DATASTORE.writeAddressForId(\\r\\n        _id,\\r\\n        \\\"maintainer\\\",\\r\\n        DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\")\\r\\n      );\\r\\n      address currentInterface = StakeUtils._clone(DEFAULT_INTERFACE);\\r\\n      IERC20InterfaceUpgradable(currentInterface).initialize(\\r\\n        _id,\\r\\n        string(DATASTORE.readBytesForId(_id, \\\"name\\\")),\\r\\n        address(STAKEPOOL.getgAVAX())\\r\\n      );\\r\\n      _setInterface(_id, currentInterface, true);\\r\\n      address WithdrawalPool = STAKEPOOL.deployWithdrawalPool(DATASTORE, _id);\\r\\n      Ownable(WithdrawalPool).transferOwnership(GEODE.GOVERNANCE);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function approveSenate(uint256 proposalId, uint256 electorId)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n  {\\r\\n    GEODE.approveSenate(DATASTORE, proposalId, electorId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** ORACLE **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice oraclePrice is a reliable source for any contract operation on-chain\\r\\n   * @dev also the *mint price* as gAVAX.pricePerShare(id)\\r\\n   * @dev TotalStakedAvax can be estimated by: TotalSupply(id) * planetOraclePrice(id)\\r\\n   */\\r\\n  function planetOraclePrice(uint256 _id)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256 _pricePershare)\\r\\n  {\\r\\n    _pricePershare = STAKEPOOL.oraclePrice(_id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Oracle is only allowed for a period every day & pool operations are stopped then\\r\\n   * @dev returns false after oracle update for the given pool.\\r\\n   */\\r\\n  function isOracleActive(uint256 _planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return StakeUtils._isOracleActive(DATASTORE, _planetId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only Oracle can report a new price. However price is not purely calculated by it.\\r\\n   * the balance on P subchain is estimated by it, including the unrealized staking rewards.\\r\\n   * Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\\r\\n\\r\\n   * @param _opIds all ids of all operators who still collect fees.\\r\\n   * @param _pBalanceIncreases the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\\r\\n   * @dev simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\\r\\n   * @return price : new price after sanitychecks, might be useful if onchain oracle in the future\\r\\n   */\\r\\n  function reportOracle(\\r\\n    uint256 _reportedTimeStamp,\\r\\n    uint256 _planetId,\\r\\n    uint256[] memory _opIds,\\r\\n    uint256[] memory _pBalanceIncreases\\r\\n  )\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    nonReentrant\\r\\n    whenNotPaused\\r\\n    returns (uint256 price)\\r\\n  {\\r\\n    price = STAKEPOOL.reportOracle(\\r\\n      DATASTORE,\\r\\n      _reportedTimeStamp,\\r\\n      _planetId,\\r\\n      _opIds,\\r\\n      _pBalanceIncreases\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** DEBT & SURPLUS **\\r\\n   */\\r\\n\\r\\n  /// @notice total amount of staked Avax that has been waiting to be staked\\r\\n  function planetSurplus(uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return DATASTORE.readUintForId(planetId, \\\"surplus\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice total amount of staked Avax that can be claimed, as Fees are not claimable to be staked\\r\\n  function planetClaimableSurplus(uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    if (\\r\\n      DATASTORE.readUintForId(planetId, \\\"surplus\\\") >\\r\\n      DATASTORE.readUintForId(planetId, \\\"unclaimedFees\\\")\\r\\n    ) {\\r\\n      return\\r\\n        DATASTORE.readUintForId(planetId, \\\"surplus\\\") -\\r\\n        DATASTORE.readUintForId(planetId, \\\"unclaimedFees\\\");\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice When a debt is calculated, it also takes the unclaimed Fees into consideration for the Planet\\r\\n   * since payDebt pays that -if it is more than surplus- first and then covers the withdrawal Pool.\\r\\n   * @return debtInAvax is the current debt amount that pays for fees and provides a stable price to withdrawalPool\\r\\n   */\\r\\n  function planetDebt(uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256 debtInAvax)\\r\\n  {\\r\\n    debtInAvax = StakeUtils.withdrawalPoolById(DATASTORE, planetId).getDebt();\\r\\n    if (\\r\\n      DATASTORE.readUintForId(planetId, \\\"unclaimedFees\\\") >\\r\\n      DATASTORE.readUintForId(planetId, \\\"surplus\\\")\\r\\n    ) {\\r\\n      uint256 debtInFees = DATASTORE.readUintForId(planetId, \\\"unclaimedFees\\\") -\\r\\n        DATASTORE.readUintForId(planetId, \\\"surplus\\\");\\r\\n      debtInAvax += debtInFees;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Debt of the planet is found by approaching to it's price within WithdrawalPool\\r\\n   * @return debtInAvax is the first guess that provides a withdrtawalPool price\\r\\n   * that is between limits of slippage when buyback&burn.\\r\\n   */\\r\\n  function planetPBalance(uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return DATASTORE.readUintForId(planetId, \\\"pBalance\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice amount of fee (as AVAX) that has been distributed to the maintainer so far\\r\\n   * @dev for planet's maintainer's accumulatedFee (planetId,planetId)\\r\\n   */\\r\\n  function accumulatedFee(uint256 planetId, uint256 claimerId)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (uint256 fee, ) = StakeUtils.accumulatedFee(DATASTORE, planetId, claimerId);\\r\\n    return fee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice An Operator is expected to pay for the DEBT of a staking pool\\r\\n   * @dev msg.value-debt is put to surplus, this can be used to increase surplus without minting new tokens!! useful to claim fees\\r\\n   */\\r\\n  function payDebt(uint256 planetId, uint256 operatorId)\\r\\n    external\\r\\n    payable\\r\\n    virtual\\r\\n    override\\r\\n    nonReentrant\\r\\n    whenNotPaused\\r\\n  {\\r\\n    STAKEPOOL.payDebt(DATASTORE, planetId, operatorId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice operators can not claim fees if: expired OR deactivated\\r\\n   * @notice current unclaimedFees are not allowed to be claimed as surplus\\r\\n   * @return success if transfer of funds is succesful\\r\\n   */\\r\\n  function claimSurplus(uint256 planetId)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    nonReentrant\\r\\n    returns (bool success)\\r\\n  {\\r\\n    success = StakeUtils.claimSurplus(\\r\\n      DATASTORE,\\r\\n      planetId,\\r\\n      DATASTORE.readUintForId(planetId, \\\"activeOperator\\\")\\r\\n    );\\r\\n    require(success, \\\"Portal: Failed to send surplus\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice anyone can call this function, but it sends AVAX only to maintainer.\\r\\n   * @notice reverts if there are not enough surplus.\\r\\n   */\\r\\n  function claimFee(uint256 planetId, uint256 claimerId)\\r\\n    external\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    nonReentrant\\r\\n    returns (uint256 feeSent)\\r\\n  {\\r\\n    feeSent = StakeUtils.claimFee(DATASTORE, planetId, claimerId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** Staking Pools **\\r\\n   */\\r\\n  function isStakingPausedForPool(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return StakeUtils.isStakingPausedForPool(DATASTORE, _id);\\r\\n  }\\r\\n\\r\\n  /// @notice when a pool is paused there are NO new funds to be minted, NO surplus.\\r\\n  function pauseStakingForPool(uint256 _id) external virtual override {\\r\\n    StakeUtils.pauseStakingForPool(DATASTORE, _id);\\r\\n  }\\r\\n\\r\\n  function unpauseStakingForPool(uint256 _id) external virtual override {\\r\\n    StakeUtils.unpauseStakingForPool(DATASTORE, _id);\\r\\n  }\\r\\n\\r\\n  function stake(\\r\\n    uint256 planetId,\\r\\n    uint256 minGavax,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    payable\\r\\n    virtual\\r\\n    override\\r\\n    whenNotPaused\\r\\n    nonReentrant\\r\\n    returns (uint256 totalgAvax)\\r\\n  {\\r\\n    totalgAvax = STAKEPOOL.stake(DATASTORE, planetId, minGavax, deadline);\\r\\n    require(totalgAvax > 0, \\\"Portal: unsuccesful deposit\\\");\\r\\n  }\\r\\n\\r\\n  uint256[45] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x17764225e156915929da2018dc58fb07520473db14aeded876039d498c0c8bdd\",\"license\":\"MIT\"},\"contracts/Portal/utils/DataStoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Storage Management library for dynamic structs based on data types\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n  /**\\r\\n   * @notice Main Struct for reading and writing data to storage for given id+key pairs\\r\\n   * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n   * @param uintData keccak(id, key) =>  returns uint256\\r\\n   * @param bytesData keccak(id, key) => returns bytes\\r\\n   * @param addressData keccak(id, key) =>  returns address\\r\\n   * NOTE any other storage type can be expressed as bytes\\r\\n   */\\r\\n  struct DataStore {\\r\\n    mapping(uint256 => uint256[]) allIdsByType;\\r\\n    mapping(bytes32 => uint256) uintData;\\r\\n    mapping(bytes32 => bytes) bytesData;\\r\\n    mapping(bytes32 => address) addressData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * **DATA GETTERS **\\r\\n   **/\\r\\n  function readUintForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (uint256 data) {\\r\\n    data = self.uintData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  function readBytesForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (bytes memory data) {\\r\\n    data = self.bytesData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  function readAddressForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (address data) {\\r\\n    data = self.addressData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * **DATA SETTERS **\\r\\n   **/\\r\\n  function writeUintForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    uint256 data\\r\\n  ) public {\\r\\n    self.uintData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n\\r\\n  function writeBytesForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    bytes memory data\\r\\n  ) public {\\r\\n    self.bytesData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n\\r\\n  function writeAddressForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    address data\\r\\n  ) public {\\r\\n    self.addressData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x16e2087089643f4eed141f33ed3452872843f1827d8bb43fa64f968939d4e302\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"./DataStoreLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GeodeUtils library\\r\\n * @notice Exclusively contains functions responsible for administration of Geode Portal,\\r\\n * including functions related to \\\"limited upgradability\\\" with Senate & porposals.\\r\\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\\r\\n * @dev ALL \\\"fee\\\" variables are limited by FEE_DENOMINATOR = 100%\\r\\n * @dev Admin functions are already protected.\\r\\n * Note that this library contains both functions called by users(ID) and admins(GOVERNANCE, SENATE )\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary GeodeUtils {\\r\\n  using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n  event OperationFeeUpdated(uint256 newFee);\\r\\n  event MaxOperationFeeUpdated(uint256 newMaxFee);\\r\\n  event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n  event Proposed(\\r\\n    uint256 id,\\r\\n    address _CONTROLLER,\\r\\n    uint256 _type,\\r\\n    uint256 _duration\\r\\n  );\\r\\n  event ProposalApproved(uint256 id);\\r\\n  event NewElectorType(uint256 _type);\\r\\n  event Vote(uint256 proposalId, uint256 electorId);\\r\\n  event NewSenate(address senate, uint256 senate_expire_timestamp);\\r\\n\\r\\n  /**\\r\\n\\r\\n   * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\\r\\n   *\\r\\n   * @notice A Proposal has 4 specs:\\r\\n   * @param TYPE: seperates the proposals and related functionality between different ID types.\\r\\n   * * RESERVED TYPES on GeodeUtils:\\r\\n   * * * TYPE 0: inactive\\r\\n   * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\\r\\n   * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\\r\\n   * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\\r\\n   * this TYPE is now reserved to make it easier for secondary contracts to add their own type.\\r\\n   *\\r\\n   * @param name: id is created by keccak(name)\\r\\n   *\\r\\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\\r\\n   * * This slot can be given the control of an id to a user, a new implementation contract, a new Senate etc.\\r\\n   *\\r\\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\r\\n   * * Expired proposals can not be approved by Senate\\r\\n   * * Expired proposals can be overriden by new proposals\\r\\n   **/\\r\\n  struct Proposal {\\r\\n    address CONTROLLER;\\r\\n    uint256 TYPE;\\r\\n    uint256 deadline;\\r\\n    bytes name;\\r\\n  }\\r\\n  /**\\r\\n   * @notice Universe is A blockchain. In this case, it defines Avalanche\\r\\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\r\\n   * Suggests updates, such as new planets, operators, contract upgrades and new Senate, on the Ecosystem _without any permissions to force them_\\r\\n   * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\\r\\n   * Note SENATE is proposed by Governance and voted by all planets, if 2/3 approves.\\r\\n   * @param OPERATION_FEE operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_OPERATION_FEE\\r\\n   * @param MAX_OPERATION_FEE set by SENATE, limited by FEE_DENOMINATOR\\r\\n   * @param FEE_DENOMINATOR represents 100%\\r\\n   * @param SENATE_EXPIRE_TIMESTAMP refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\r\\n   * @param approvedUpgrade only 1(one) implementation contract can be \\\"approved\\\" at any given time. @dev Should set to address(0) after every upgrade\\r\\n   * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\r\\n   * @param _electorTypes only given types can vote @dev must only be used at upgrades.\\r\\n   * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allowe surpassing type checks to save gas cost\\r\\n   **/\\r\\n  struct Universe {\\r\\n    address SENATE;\\r\\n    address GOVERNANCE;\\r\\n    uint256 OPERATION_FEE;\\r\\n    uint256 MAX_OPERATION_FEE;\\r\\n    uint256 FEE_DENOMINATOR;\\r\\n    uint256 SENATE_EXPIRE_TIMESTAMP;\\r\\n    address approvedUpgrade;\\r\\n    uint256 _electorCount;\\r\\n    mapping(uint256 => bool) _electorTypes;\\r\\n    mapping(uint256 => Proposal) _proposalForId;\\r\\n  }\\r\\n\\r\\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\r\\n  uint32 public constant MAX_PROPOSAL_DURATION = 1 weeks;\\r\\n  uint32 public constant MAX_SENATE_PERIOD = 730 days; // 2 years\\r\\n\\r\\n  modifier onlySenate(Universe storage self) {\\r\\n    require(msg.sender == self.SENATE, \\\"GeodeUtils: SENATE role needed\\\");\\r\\n    require(\\r\\n      block.timestamp < self.SENATE_EXPIRE_TIMESTAMP,\\r\\n      \\\"GeodeUtils: SENATE not active\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                         ** UNIVERSE GETTERS **\\r\\n   **/\\r\\n\\r\\n  /// @return the address of SENATE\\r\\n  function getSenate(Universe storage self) public view returns (address) {\\r\\n    return self.SENATE;\\r\\n  }\\r\\n\\r\\n  /// @return the address of GOVERNANCE\\r\\n  function getGovernance(Universe storage self) public view returns (address) {\\r\\n    return self.GOVERNANCE;\\r\\n  }\\r\\n\\r\\n  /// @notice MAX_OPERATION_FEE must limit OPERATION_FEE even if MAX is changed\\r\\n  /// @return active OPERATION_FEE; limited by MAX_OPERATION_FEE\\r\\n  function getOperationFee(Universe storage self)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return\\r\\n      self.OPERATION_FEE > self.MAX_OPERATION_FEE\\r\\n        ? self.MAX_OPERATION_FEE\\r\\n        : self.OPERATION_FEE;\\r\\n  }\\r\\n\\r\\n  /// @return MAX_OPERATION_FEE\\r\\n  function getMaxOperationFee(Universe storage self)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return self.MAX_OPERATION_FEE;\\r\\n  }\\r\\n\\r\\n  /// @return the expiration date of current SENATE as a timestamp\\r\\n  function getSenateExpireTimestamp(Universe storage self)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return self.SENATE_EXPIRE_TIMESTAMP;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                         ** UNIVERSE SETTERS **\\r\\n   */\\r\\n\\r\\n  /// @return true if the operation was succesful, might be helpful when governance rights are distributed\\r\\n  /// @dev can not set a fee more than MAX\\r\\n  /// @dev no need to check FEE_DENOMINATOR\\r\\n  function setOperationFee(Universe storage self, uint256 _newFee)\\r\\n    external\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(_newFee <= self.MAX_OPERATION_FEE, \\\"GeodeUtils: fee more than MAX\\\");\\r\\n    self.OPERATION_FEE = _newFee;\\r\\n    emit OperationFeeUpdated(_newFee);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @return true if the operation was succesful\\r\\n  /// @dev can not set a fee more than FEE_DENOMINATOR (100%)\\r\\n  function setMaxOperationFee(Universe storage self, uint256 _newMaxFee)\\r\\n    external\\r\\n    onlySenate(self)\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(\\r\\n      _newMaxFee <= self.FEE_DENOMINATOR,\\r\\n      \\\"GeodeUtils: fee more than 100%\\\"\\r\\n    );\\r\\n    self.MAX_OPERATION_FEE = _newMaxFee;\\r\\n    emit MaxOperationFeeUpdated(_newMaxFee);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  @notice only the current CONTROLLER can change\\r\\n  @dev this operation can not be reverted by old CONTROLLER\\r\\n  @dev in case the current controller wants to remove the \\r\\n  need to upgrade to NO Controller they should provide smt like 0x0..dead\\r\\n   */\\r\\n  function changeIdCONTROLLER(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 id,\\r\\n    address newCONTROLLER\\r\\n  ) external {\\r\\n    require(\\r\\n      newCONTROLLER != address(0),\\r\\n      \\\"GeodeUtils: CONTROLLER can not be zero\\\"\\r\\n    );\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\") == msg.sender,\\r\\n      \\\"GeodeUtils: not CONTROLLER of given id\\\"\\r\\n    );\\r\\n    _DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\r\\n    emit ControllerChanged(id, newCONTROLLER);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *                                          ** PROPOSALS **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * CONTROLLER Proposals\\r\\n   */\\r\\n\\r\\n  function getProposal(Universe storage self, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (Proposal memory)\\r\\n  {\\r\\n    return self._proposalForId[id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice to ensure the flexibility of Governance-less upgrades in the future, Anyone can create a Proposal.\\r\\n   * @notice a proposal can be overriden if: expired OR approved. DATASTORE(id) will not be overriden until the proposal is approved.\\r\\n   * @dev refer to structure of Proposal for explanations of params\\r\\n   */\\r\\n  function newProposal(\\r\\n    Universe storage self,\\r\\n    address _CONTROLLER,\\r\\n    uint256 _type,\\r\\n    uint256 _duration,\\r\\n    bytes calldata _name\\r\\n  ) external {\\r\\n    require(\\r\\n      _duration >= MIN_PROPOSAL_DURATION,\\r\\n      \\\"GeodeUtils: duration should be higher than min value\\\"\\r\\n    );\\r\\n    require(_duration <= MAX_PROPOSAL_DURATION, \\\"GeodeUtils: duration exceeds\\\");\\r\\n    uint256 id = uint256(keccak256(abi.encodePacked(_name)));\\r\\n    require(\\r\\n      self._proposalForId[id].deadline < block.timestamp,\\r\\n      \\\"GeodeUtils: name already proposed\\\"\\r\\n    );\\r\\n    self._proposalForId[id] = Proposal({\\r\\n      CONTROLLER: _CONTROLLER,\\r\\n      TYPE: _type,\\r\\n      deadline: block.timestamp + _duration,\\r\\n      name: _name\\r\\n    });\\r\\n    emit Proposed(id, _CONTROLLER, _type, _duration);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\\r\\n   *  any other addition should take place in Portal, as not related\\r\\n   *  @param id given ID proposal that has been approved by Senate\\r\\n   *  @dev Senate should not be able to approve expired proposals\\r\\n   *  @dev Senate should not be able to approve SENATE proposals :)\\r\\n   */\\r\\n  function approveProposal(\\r\\n    Universe storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 id\\r\\n  ) external onlySenate(self) {\\r\\n    require(\\r\\n      self._proposalForId[id].deadline >= block.timestamp,\\r\\n      \\\"GeodeUtils: proposal expired\\\"\\r\\n    );\\r\\n    require(\\r\\n      self._proposalForId[id].TYPE != 1,\\r\\n      \\\"GeodeUtils: Senate can not approve Senate Proposal\\\"\\r\\n    );\\r\\n    _DATASTORE.writeBytesForId(id, \\\"name\\\", self._proposalForId[id].name);\\r\\n    _DATASTORE.writeAddressForId(\\r\\n      id,\\r\\n      \\\"CONTROLLER\\\",\\r\\n      self._proposalForId[id].CONTROLLER\\r\\n    );\\r\\n    _DATASTORE.writeUintForId(id, \\\"TYPE\\\", self._proposalForId[id].TYPE);\\r\\n    _DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\\r\\n\\r\\n    if (self._proposalForId[id].TYPE == 2) {\\r\\n      self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\\r\\n    }\\r\\n    self._proposalForId[id].deadline = block.timestamp;\\r\\n    if (self._electorTypes[_DATASTORE.readUintForId(id, \\\"TYPE\\\")])\\r\\n      self._electorCount += 1;\\r\\n    emit ProposalApproved(id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * SENATE Proposals\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice only selected types can vote for senate\\r\\n   * @param _type selected type\\r\\n   * @param _isElector true if selected _type can vote for senate from now on\\r\\n   * @dev can not set with the same value again, preventing double increment/decrements\\r\\n   */\\r\\n  function setElectorType(\\r\\n    Universe storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _type,\\r\\n    bool _isElector\\r\\n  ) external {\\r\\n    require(\\r\\n      self._electorTypes[_type] != _isElector,\\r\\n      \\\"GeodeUtils: type already _isElector\\\"\\r\\n    );\\r\\n    require(\\r\\n      _type != 0 && _type != 1 && _type != 2 && _type != 3,\\r\\n      \\\"GeodeUtils: 0, Senate, Upgrade, ProxyAdmin cannot be elector!\\\"\\r\\n    );\\r\\n    self._electorTypes[_type] = _isElector;\\r\\n    if (_isElector) {\\r\\n      self._electorCount += _DATASTORE.allIdsByType[_type].length;\\r\\n    } else {\\r\\n      self._electorCount -= _DATASTORE.allIdsByType[_type].length;\\r\\n    }\\r\\n    emit NewElectorType(_type);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors are approved\\r\\n   * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\\r\\n   * @notice id can not vote if:\\r\\n   *- approved already\\r\\n   *- not its type is not elector\\r\\n   *- not proposal is expired\\r\\n   *- not senate proposal\\r\\n   * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\r\\n   * @dev pins id as \\\"voted\\\" when approved\\r\\n   * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\r\\n   */\\r\\n  function approveSenate(\\r\\n    Universe storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 proposalId,\\r\\n    uint256 electorId\\r\\n  ) external {\\r\\n    require(\\r\\n      self._proposalForId[proposalId].TYPE == 1,\\r\\n      \\\"GeodeUtils: NOT Senate Proposal\\\"\\r\\n    );\\r\\n    require(\\r\\n      self._proposalForId[proposalId].deadline >= block.timestamp,\\r\\n      \\\"GeodeUtils: proposal expired\\\"\\r\\n    );\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(electorId, \\\"CONTROLLER\\\") == msg.sender,\\r\\n      \\\"GeodeUtils: msg.sender should be CONTROLLER of given electorId!\\\"\\r\\n    );\\r\\n    require(\\r\\n      self._electorTypes[_DATASTORE.readUintForId(electorId, \\\"TYPE\\\")],\\r\\n      \\\"GeodeUtils: NOT an elector\\\"\\r\\n    );\\r\\n    require(\\r\\n      _DATASTORE.readUintForId(\\r\\n        proposalId,\\r\\n        bytes32(keccak256(abi.encodePacked(electorId, \\\"voted\\\")))\\r\\n      ) == 0,\\r\\n      \\\" GeodeUtils: already approved\\\"\\r\\n    );\\r\\n    _DATASTORE.writeUintForId(\\r\\n      proposalId,\\r\\n      bytes32(keccak256(abi.encodePacked(electorId, \\\"voted\\\"))),\\r\\n      1\\r\\n    );\\r\\n    emit Vote(proposalId, electorId);\\r\\n    _DATASTORE.writeUintForId(\\r\\n      proposalId,\\r\\n      \\\"approvalCount\\\",\\r\\n      _DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") + 1\\r\\n    );\\r\\n    if (\\r\\n      _DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\r\\n      ((self._electorCount + 1) * 2) / 3\\r\\n    ) {\\r\\n      self.SENATE = self._proposalForId[proposalId].CONTROLLER;\\r\\n      self._proposalForId[proposalId].deadline = block.timestamp;\\r\\n      self.SENATE_EXPIRE_TIMESTAMP = block.timestamp + MAX_SENATE_PERIOD; // 2 years\\r\\n      emit NewSenate(self.SENATE, self.SENATE_EXPIRE_TIMESTAMP);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get if it is allowed to change a specific contract with the current version.\\r\\n   * @return True if it is allowed by senate and false if not.\\r\\n   * @dev address(0) should return false\\r\\n   **/\\r\\n  function isUpgradeAllowed(\\r\\n    Universe storage self,\\r\\n    address proposed_implementation\\r\\n  ) external view returns (bool) {\\r\\n    return\\r\\n      self.approvedUpgrade != address(0) &&\\r\\n      self.approvedUpgrade == proposed_implementation;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1b15f9cdbb17a1410d47d4801f82e9848b0baeec9df393093fafc92aeb0ede92\",\"license\":\"MIT\"},\"contracts/Portal/utils/StakeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"../../interfaces/ISwap.sol\\\";\\r\\nimport \\\"../../interfaces/IgAVAX.sol\\\";\\r\\nimport \\\"../../WithdrawalPool/LPToken.sol\\\";\\r\\nimport \\\"./DataStoreLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakeUtils library\\r\\n * @notice Exclusively contains functions related to Avax Liquid Staking designed by Geode Finance\\r\\n * @notice biggest part of the functionality is related to Withdrawal Pools\\r\\n * which relies on continuous buybacks for price peg with DEBT/SURPLUS calculations\\r\\n * @dev Contracts relying on this library must initialize StakeUtils.StakePool\\r\\n * @dev ALL \\\"fee\\\" variables are limited by FEE_DENOMINATOR = 100%\\r\\n * Note *suggested* refer to GeodeUtils before reviewing\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n * Note beware of the staking pool and operator implementations:\\r\\n * Operatores have properties like accumulatedFee, fee(as a percentage), maintainer.\\r\\n * Every staking pool(aka planet) is also an operator by design.\\r\\n * Planets(type 5) inherit operators (type 4), with additional properties like staking pools -relates to\\r\\n * params: pBalance, surplus, unclaimedFees-, withdrawal pool - relates to debt - and liquid asset(gAvax).\\r\\n */\\r\\nlibrary StakeUtils {\\r\\n  using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n  event MaintainerFeeUpdated(uint256 id, uint256 fee);\\r\\n  event MaxMaintainerFeeUpdated(uint256 newMaxFee);\\r\\n  event PriceChanged(uint256 id, uint256 pricePerShare);\\r\\n  event OracleUpdate(\\r\\n    uint256 id,\\r\\n    uint256 price,\\r\\n    uint256 newPBalance,\\r\\n    uint256 distributedFeeTotal,\\r\\n    uint256 updateTimeStamp\\r\\n  );\\r\\n  event OperatorActivated(uint256 id, uint256 activeOperator);\\r\\n  event OperatorDeactivated(uint256 id, uint256 deactiveOperator);\\r\\n  event debtPaid(uint256 id, uint256 operatorId, uint256 paidDebt);\\r\\n  event SurplusClaimed(uint256 id, uint256 newSurplus);\\r\\n  event FeeClaimed(uint256 id, uint256 claimerId, uint256 newSurplus);\\r\\n  event PausedPool(uint256 id);\\r\\n  event UnpausedPool(uint256 id);\\r\\n\\r\\n  /**\\r\\n   * @notice StakePool includes the parameters related to Staking Pool Contracts.\\r\\n   * @notice A staking pool works with a *bound* Withdrawal Pool to create best pricing\\r\\n   * for the staking derivative. Withdrawal Pools uses StableSwap algorithm.\\r\\n   * @param gAVAX ERC1155 contract that keeps the totalSupply, pricepershare and balances of all StakingPools by ID\\r\\n   * @dev  gAVAX should not be changed ever!\\r\\n   * @param DEFAULT_SWAP_POOL STABLESWAP pool that will be cloned to be used as Withdrawal Pool of given ID\\r\\n   * @param DEFAULT_LP_TOKEN LP token implementation that will be cloned to be used for Withdrawal Pool of given ID\\r\\n   * @param ORACLE https://github.com/Geodefi/Telescope\\r\\n   * @param DEFAULT_A Withdrawal Pool parameter\\r\\n   * @param DEFAULT_FEE Withdrawal Pool parameter\\r\\n   * @param DEFAULT_ADMIN_FEE Withdrawal Pool parameter\\r\\n   * @param FEE_DENOMINATOR represents 100% ALSO Withdrawal Pool parameter\\r\\n   * @param MAX_MAINTAINER_FEE : limits operator.fee and planet.fee, set by GOVERNANCE\\r\\n   * @dev changing any of address parameters (gAVAX, ORACLE, DEFAULT_SWAP_POOL, DEFAULT_LP_TOKEN) MUST require a contract upgrade to ensure security\\r\\n   **/\\r\\n  struct StakePool {\\r\\n    address gAVAX;\\r\\n    address DEFAULT_SWAP_POOL;\\r\\n    address DEFAULT_LP_TOKEN;\\r\\n    address ORACLE;\\r\\n    uint256 DEFAULT_A;\\r\\n    uint256 DEFAULT_FEE;\\r\\n    uint256 DEFAULT_ADMIN_FEE;\\r\\n    uint256 FEE_DENOMINATOR;\\r\\n    uint256 PERIOD_PRICE_INCREASE_LIMIT;\\r\\n    uint256 MAX_MAINTAINER_FEE;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice gAVAX lacks *decimals*,\\r\\n   * @dev gAVAX_DENOMINATOR makes sure that we are taking care of decimals on calculations related to gAVAX\\r\\n   */\\r\\n  uint256 constant gAVAX_DENOMINATOR = 1e18;\\r\\n\\r\\n  /// @notice Oracle is active for the first 30 min for a day\\r\\n  uint256 constant ORACLE_PERIOD = 1 days;\\r\\n  uint256 constant ORACLE_ACTIVE_PERIOD = 30 minutes;\\r\\n  uint256 constant DEACTIVATION_PERIOD = 15 days;\\r\\n  uint256 constant IGNORABLE_DEBT = 1 ether;\\r\\n\\r\\n  /**\\r\\n   * @notice whenever an operator is activated for a staking pool, it sets an activationExpiration date, which\\r\\n   * means the op pay debt by burning gAvax tokens and collect fee from their validators.\\r\\n   * While this implementation allows any two different ids to cooperate, with multiple interactions at any given time,\\r\\n   * there can only be \\\"1\\\" activeOperator who can also claimSurplus to create new validators.\\r\\n   */\\r\\n  modifier beforeActivationExpiration(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _claimerId\\r\\n  ) {\\r\\n    require(\\r\\n      _DATASTORE.readUintForId(\\r\\n        _poolId,\\r\\n        bytes32(keccak256(abi.encodePacked(_claimerId, \\\"activationExpiration\\\")))\\r\\n      ) > block.timestamp,\\r\\n      \\\"StakeUtils: operatorId activationExpiration has past\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyMaintainer(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) {\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"maintainer\\\") == msg.sender,\\r\\n      \\\"StakeUtils: sender not maintainer\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _clone(address target) public returns (address) {\\r\\n    return Clones.clone(target);\\r\\n  }\\r\\n\\r\\n  function getgAVAX(StakePool storage self) public view returns (IgAVAX) {\\r\\n    return IgAVAX(self.gAVAX);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** Maintainer specific functions **\\r\\n   *\\r\\n   * @note \\\"Maintainer\\\" is a shared logic like \\\"fee\\\" by both operator and pools.\\r\\n   * Maintainers have permissiones to maintain the given id like setting a new fee or interface as\\r\\n   * well as paying debt etc. for operators.\\r\\n   * @dev maintainer is set by CONTROLLER of given id\\r\\n   */\\r\\n\\r\\n  /// @notice even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\\r\\n  function getMaintainerFee(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (uint256) {\\r\\n    return\\r\\n      _DATASTORE.readUintForId(_id, \\\"fee\\\") > self.MAX_MAINTAINER_FEE\\r\\n        ? self.MAX_MAINTAINER_FEE\\r\\n        : _DATASTORE.readUintForId(_id, \\\"fee\\\");\\r\\n  }\\r\\n\\r\\n  function setMaintainerFee(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _newFee\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    require(\\r\\n      _newFee <= self.MAX_MAINTAINER_FEE,\\r\\n      \\\"StakeUtils: MAX_MAINTAINER_FEE ERROR\\\"\\r\\n    );\\r\\n    _DATASTORE.writeUintForId(_id, \\\"fee\\\", _newFee);\\r\\n    emit MaintainerFeeUpdated(_id, _newFee);\\r\\n  }\\r\\n\\r\\n  function setMaxMaintainerFee(StakePool storage self, uint256 _newMaxFee)\\r\\n    external\\r\\n  {\\r\\n    require(\\r\\n      _newMaxFee <= self.FEE_DENOMINATOR,\\r\\n      \\\"StakeUtils: fee more than 100%\\\"\\r\\n    );\\r\\n    self.MAX_MAINTAINER_FEE = _newMaxFee;\\r\\n    emit MaxMaintainerFeeUpdated(_newMaxFee);\\r\\n  }\\r\\n\\r\\n  function changeMaintainer(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    address _newMaintainer\\r\\n  ) external {\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\") == msg.sender,\\r\\n      \\\"StakeUtils: not CONTROLLER of given id\\\"\\r\\n    );\\r\\n    require(\\r\\n      _newMaintainer != address(0),\\r\\n      \\\"StakeUtils: maintainer can not be zero\\\"\\r\\n    );\\r\\n\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"maintainer\\\", _newMaintainer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** Staking Pool specific functions **\\r\\n   */\\r\\n\\r\\n  /// @notice mints gAVAX tokens with given ID and amount.\\r\\n  /// @dev shouldn't be accesible publicly\\r\\n  function _mint(\\r\\n    address _gAVAX,\\r\\n    address _to,\\r\\n    uint256 _id,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    require(_id > 0, \\\"StakeUtils: _mint id should be > 0\\\");\\r\\n    IgAVAX(_gAVAX).mint(_to, _id, _amount, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice conducts a buyback using the given withdrawal pool,\\r\\n   * @param to address to send bought gAVAX(id). burns the tokens if to=address(0), transfers if not\\r\\n   * @param poolId id of the gAVAX that will be bought\\r\\n   * @param sellAvax AVAX amount to sell\\r\\n   * @param minToBuy TX is expected to revert by Swap.sol if not meet\\r\\n   * @param deadline TX is expected to revert by Swap.sol if deadline has past\\r\\n   * @dev this function assumes that pool is deployed by deployWithdrawalPool\\r\\n   * as index 0 is avax and index 1 is Gavax\\r\\n   */\\r\\n  function _buyback(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    address to,\\r\\n    uint256 poolId,\\r\\n    uint256 sellAvax,\\r\\n    uint256 minToBuy,\\r\\n    uint256 deadline\\r\\n  ) internal returns (uint256 outAmount) {\\r\\n    // SWAP in WP\\r\\n    outAmount = withdrawalPoolById(_DATASTORE, poolId).swap{ value: sellAvax }(\\r\\n      0,\\r\\n      1,\\r\\n      sellAvax,\\r\\n      minToBuy,\\r\\n      deadline\\r\\n    );\\r\\n    if (to == address(0)) {\\r\\n      // burn\\r\\n      getgAVAX(self).burn(address(this), poolId, outAmount);\\r\\n    } else {\\r\\n      // send back to user\\r\\n      getgAVAX(self).safeTransferFrom(address(this), to, poolId, outAmount, \\\"\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** ORACLE specific functions **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice sets pricePerShare parameter of gAVAX(id)\\r\\n   * @dev only ORACLE should be able to reach this after sanity checks on new price\\r\\n   */\\r\\n  function _setPricePerShare(\\r\\n    StakePool storage self,\\r\\n    uint256 pricePerShare_,\\r\\n    uint256 _id\\r\\n  ) internal {\\r\\n    require(_id > 0, \\\"StakeUtils: id should be > 0\\\");\\r\\n    getgAVAX(self).setPricePerShare(pricePerShare_, _id);\\r\\n    emit PriceChanged(_id, pricePerShare_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Oracle is only allowed for a period every day & pool operations are stopped then\\r\\n   * @return false if the last oracle update happened already (within the current daily period)\\r\\n   */\\r\\n  function _isOracleActive(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId\\r\\n  ) internal view returns (bool) {\\r\\n    return\\r\\n      (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\\r\\n      (_DATASTORE.readUintForId(_poolId, \\\"oracleUpdateTimeStamp\\\") <\\r\\n        block.timestamp - ORACLE_ACTIVE_PERIOD);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice oraclePrice is a reliable source for any contract operation\\r\\n   * @dev also the *mint price* when there is a no debt\\r\\n   */\\r\\n  function oraclePrice(StakePool storage self, uint256 _id)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256 _oraclePrice)\\r\\n  {\\r\\n    _oraclePrice = getgAVAX(self).pricePerShare(_id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\\r\\n   * @dev checks:\\r\\n   * 1. Price should be increased & it should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\\r\\n   *  with the factor of how many days since oracleUpdateTimeStamp has past.\\r\\n   *  To encourage report oracle each day, price increase limit is not calculated by considering compound effect\\r\\n   *  for multiple days.\\r\\n   */\\r\\n  function _sanityCheck(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _newPrice\\r\\n  ) internal view {\\r\\n    // need to put the lastPriceUpdate to DATASTORE to check if price is updated already for that day\\r\\n    uint256 periodsSinceUpdate = (block.timestamp +\\r\\n      ORACLE_ACTIVE_PERIOD -\\r\\n      _DATASTORE.readUintForId(_id, \\\"oracleUpdateTimeStamp\\\")) / ORACLE_PERIOD;\\r\\n    uint256 curPrice = oraclePrice(self, _id);\\r\\n    uint256 maxPrice = curPrice +\\r\\n      ((curPrice * self.PERIOD_PRICE_INCREASE_LIMIT * periodsSinceUpdate) /\\r\\n        self.FEE_DENOMINATOR);\\r\\n\\r\\n    require(\\r\\n      _newPrice <= maxPrice && _newPrice >= curPrice,\\r\\n      \\\"StakeUtils: price did NOT met\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice distribute fees to given operator Ids, by related to their fees.\\r\\n   * Finally, distribute the fee of maintainer of the pool from total amounts.\\r\\n   *\\r\\n   * @dev fees can be higher than current MAX, if MAX is changed afterwards, we check that condition.\\r\\n   */\\r\\n  function _distributeFees(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256[] calldata _opIds,\\r\\n    uint256[] calldata _pBalanceIncreases\\r\\n  ) internal returns (uint256 totalPBalanceIncrease, uint256 totalFees) {\\r\\n    require(\\r\\n      _opIds.length == _pBalanceIncreases.length,\\r\\n      \\\"StakeUtils: Array lengths doesn't match\\\"\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < _opIds.length; i++) {\\r\\n      // do not double spend if pool maintainer is also maintaining the validators\\r\\n      if (_opIds[i] != _poolId) {\\r\\n        // check IdCooperation[keccak256(abi.encodePacked(_id, operator))]\\r\\n        require(\\r\\n          _DATASTORE.readUintForId(\\r\\n            _poolId,\\r\\n            bytes32(\\r\\n              keccak256(abi.encodePacked(_opIds[i], \\\"activationExpiration\\\"))\\r\\n            )\\r\\n          ) > block.timestamp - ORACLE_PERIOD,\\r\\n          \\\"StakeUtils: _opId activationExpiration has past\\\"\\r\\n        );\\r\\n        uint256 opFee = getMaintainerFee(self, _DATASTORE, _opIds[i]);\\r\\n        (uint256 _fee, bytes32 _key) = accumulatedFee(\\r\\n          _DATASTORE,\\r\\n          _poolId,\\r\\n          _opIds[i]\\r\\n        );\\r\\n        uint256 gainedOpFee = (opFee * _pBalanceIncreases[i]) /\\r\\n          self.FEE_DENOMINATOR;\\r\\n        _DATASTORE.writeUintForId(_poolId, _key, _fee + gainedOpFee);\\r\\n        totalFees += gainedOpFee;\\r\\n      }\\r\\n      totalPBalanceIncrease += _pBalanceIncreases[i];\\r\\n    }\\r\\n\\r\\n    // op_fee * _pBalanceIncrease[i] to calculate respective fee from the gained increase\\r\\n    uint256 poolFee = getMaintainerFee(self, _DATASTORE, _poolId);\\r\\n    uint256 gainedPoolFee = (poolFee * totalPBalanceIncrease) /\\r\\n      self.FEE_DENOMINATOR;\\r\\n\\r\\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, _poolId, _poolId);\\r\\n    totalFees += gainedPoolFee;\\r\\n    _DATASTORE.writeUintForId(_poolId, key, fee + gainedPoolFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only Oracle can report a new price. However price is not purely calculated by it.\\r\\n   * the balance on P subchain is estimated by it, including the unrealized staking rewards.\\r\\n   * Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\\r\\n\\r\\n   * @param _reportedTimeStamp ensures prepeared report is prepeared within last activation period, prevent previous reports to be accepted. \\r\\n   * @param _opIds all ids of all operators who still collect fees.\\r\\n   * @param _pBalanceIncreases the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\\r\\n   * @dev simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\\r\\n   * @return price : new price after sanitychecks, might be useful if onchain oracle in the future\\r\\n   */\\r\\n  function reportOracle(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _reportedTimeStamp,\\r\\n    uint256 _poolId,\\r\\n    uint256[] calldata _opIds,\\r\\n    uint256[] calldata _pBalanceIncreases\\r\\n  ) external returns (uint256 price) {\\r\\n    require(msg.sender == self.ORACLE, \\\"StakeUtils: msg.sender NOT oracle\\\");\\r\\n    require(\\r\\n      _isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is NOT active\\\"\\r\\n    );\\r\\n    require(\\r\\n      _reportedTimeStamp >= block.timestamp - ORACLE_ACTIVE_PERIOD,\\r\\n      \\\"StakeUtils: Reported timestamp is NOT valid\\\"\\r\\n    );\\r\\n\\r\\n    // distribute fees\\r\\n    (uint256 totalPBalanceIncrease, uint256 totalFees) = _distributeFees(\\r\\n      self,\\r\\n      _DATASTORE,\\r\\n      _poolId,\\r\\n      _opIds,\\r\\n      _pBalanceIncreases\\r\\n    );\\r\\n\\r\\n    uint256 newPBalance = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\") +\\r\\n      totalPBalanceIncrease;\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", newPBalance);\\r\\n\\r\\n    uint256 unclaimed = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\") +\\r\\n      totalFees;\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"unclaimedFees\\\", unclaimed);\\r\\n\\r\\n    // deduct unclaimed fees from surplus\\r\\n    price =\\r\\n      ((newPBalance +\\r\\n        _DATASTORE.readUintForId(_poolId, \\\"surplus\\\") -\\r\\n        unclaimed) * gAVAX_DENOMINATOR) /\\r\\n      (getgAVAX(self).totalSupply(_poolId));\\r\\n    _sanityCheck(self, _DATASTORE, _poolId, price);\\r\\n    _setPricePerShare(self, price, _poolId);\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _poolId,\\r\\n      \\\"oracleUpdateTimeStamp\\\",\\r\\n      block.timestamp\\r\\n    );\\r\\n    emit OracleUpdate(\\r\\n      _poolId,\\r\\n      price,\\r\\n      newPBalance,\\r\\n      totalFees,\\r\\n      _reportedTimeStamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** DEBT/SURPLUS/FEE specific functions **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and\\r\\n   * creating validators, it activates the validator.\\r\\n   * @notice Changes activeOperator of the given ID; old activeOperator can NOT claim surplus anymore\\r\\n   * @dev However it can still continue holding its old balance until activationExpiration, and gain fees\\r\\n   * @dev activationExpiration timestamp until new activeoperator continues getting fees from id's staking pool\\r\\n   */\\r\\n  function activateOperator(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _activeId\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\\r\\n    _DATASTORE.writeUintForId(_id, \\\"activeOperator\\\", _activeId);\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _id,\\r\\n      bytes32(keccak256(abi.encodePacked(_activeId, \\\"activationExpiration\\\"))),\\r\\n      type(uint256).max\\r\\n    );\\r\\n    emit OperatorActivated(_id, _activeId);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice deactivates an old operator for the given staking pool\\r\\n   * @dev when activationExpiration is up, operator will NOT be able generate fees from pool,\\r\\n   * it is expected for them to return the assets as surplus with payDebt function\\r\\n   * @dev _deactivateAfter seconds until activation expires,\\r\\n   */\\r\\n  function deactivateOperator(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _deactivedId\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\\r\\n    if (_DATASTORE.readUintForId(_id, \\\"activeOperator\\\") == _deactivedId)\\r\\n      _DATASTORE.writeUintForId(_id, \\\"activeOperator\\\", 0);\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _id,\\r\\n      bytes32(\\r\\n        keccak256(abi.encodePacked(_deactivedId, \\\"activationExpiration\\\"))\\r\\n      ),\\r\\n      block.timestamp + DEACTIVATION_PERIOD //15 days\\r\\n    );\\r\\n    emit OperatorDeactivated(_id, _deactivedId);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Only an Operator is expected to pay for the DEBT of a staking pool.\\r\\n   * When it is paid, p subChain balance decreases, effectively changing the price calculations!\\r\\n   */\\r\\n  function payDebt(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _operatorId\\r\\n  )\\r\\n    external\\r\\n    onlyMaintainer(_DATASTORE, _operatorId)\\r\\n    beforeActivationExpiration(_DATASTORE, _poolId, _operatorId)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n\\r\\n    //mgs.value should be bigger than 0 for everything to make sense\\r\\n    require(msg.value > 0, \\\"StakeUtils: no avax is sent\\\");\\r\\n\\r\\n    // msg.value is assined to value, value is the variable to keep how much left in my hand to continue\\r\\n    // paying the rest of the debts and or how much left after paying the debts to put the rest in to surplus\\r\\n    uint256 value = msg.value;\\r\\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n\\r\\n    // this if statement checks if there is a operation fee that needs to be paid.\\r\\n    // If distributed fee exceeds the surplus, there is a gap between fees and surplus\\r\\n    // so we check if the unclaimedFees are bigger than surplus.\\r\\n    if (\\r\\n      _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\") >\\r\\n      _DATASTORE.readUintForId(_poolId, \\\"surplus\\\")\\r\\n    ) {\\r\\n      // the difference between unclaimedFees and the surplus is the debt for the fees.\\r\\n      uint256 debtInFees = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\") -\\r\\n        _DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n\\r\\n      // need to check if the debtInFees is bigger than the value, if not, can only pay value amount of debtInFees\\r\\n      // if not, we are paying all debtInFees by adding it to the surplus so that the difference might be 0(zero) after this action.\\r\\n      if (debtInFees > value) {\\r\\n        debtInFees = value;\\r\\n      }\\r\\n\\r\\n      // we pay for the debtInFees as we can\\r\\n      surplus += debtInFees;\\r\\n\\r\\n      // we substract the debtInFees from value since we cannot use that amount to pay the rest, it is already gone.\\r\\n      value -= debtInFees;\\r\\n    }\\r\\n\\r\\n    // we check if remaining value is bigger than 0 to save gas, because it may be already used\\r\\n    if (value > 0) {\\r\\n      // we get the debt from the withdrawal pool\\r\\n      uint256 debtToBurn = withdrawalPoolById(_DATASTORE, _poolId).getDebt();\\r\\n      // to save the gas we make sure that it is bigger then an ignorably low amount while we are doing a buyback\\r\\n      if (debtToBurn > IGNORABLE_DEBT) {\\r\\n        // same idea with the fee debt and values\\r\\n        if (debtToBurn > value) {\\r\\n          debtToBurn = value;\\r\\n        }\\r\\n\\r\\n        // burns\\r\\n        _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          address(0),\\r\\n          _poolId,\\r\\n          debtToBurn,\\r\\n          0,\\r\\n          type(uint256).max\\r\\n        );\\r\\n\\r\\n        // we substract the debt from value to see how much left if there is any left to put it on surplus\\r\\n        value -= debtToBurn;\\r\\n      }\\r\\n\\r\\n      // to save gas we are making sure that value is bigger than zero and if so, we add it to the surplus.\\r\\n      if (value > 0) {\\r\\n        surplus += value;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"surplus\\\", surplus + value);\\r\\n\\r\\n    // in all cases, if we pass the require msg.value > 0, that money is coming from the p chain\\r\\n    // and we need to decrease the pBalance for msg.value amount\\r\\n    uint256 pBalance = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\");\\r\\n    if (pBalance > msg.value) {\\r\\n      _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", pBalance - msg.value);\\r\\n    } else {\\r\\n      _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", 0);\\r\\n    }\\r\\n\\r\\n    emit debtPaid(_poolId, _operatorId, msg.value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only authorized Operator is expected to claim the surplus of a staking pool\\r\\n   * @notice current fees are not allowed to be claimed from surplus,\\r\\n   * however oracle update can also make it hard since it increases unclaimedFees without touching the surplus\\r\\n   */\\r\\n  function claimSurplus(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _claimerId\\r\\n  )\\r\\n    external\\r\\n    onlyMaintainer(_DATASTORE, _claimerId)\\r\\n    beforeActivationExpiration(_DATASTORE, _poolId, _claimerId)\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n    uint256 fees = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\");\\r\\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n    require(surplus > fees, \\\"StakeUtils: pool fees exceed surplus\\\");\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"surplus\\\", fees);\\r\\n\\r\\n    uint256 currentPBal = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\");\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _poolId,\\r\\n      \\\"pBalance\\\",\\r\\n      currentPBal + surplus - fees\\r\\n    );\\r\\n\\r\\n    (bool sent, ) = payable(\\r\\n      _DATASTORE.readAddressForId(_claimerId, \\\"maintainer\\\")\\r\\n    ).call{ value: surplus - fees }(\\\"\\\");\\r\\n    require(sent, \\\"StakeUtils: Failed to send Avax\\\");\\r\\n    emit SurplusClaimed(_poolId, surplus - fees);\\r\\n    return sent;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice accumulatedFee is stored with a key combines the poolId, claimerId & \\\"accumulatedFee\\\"\\r\\n   * @dev function also returns the key for ease of use, please use.\\r\\n   */\\r\\n  function accumulatedFee(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 claimerId\\r\\n  ) public view returns (uint256 fee, bytes32 key) {\\r\\n    key = bytes32(keccak256(abi.encodePacked(claimerId, \\\"accumulatedFee\\\")));\\r\\n    fee = _DATASTORE.readUintForId(poolId, key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice anyone can call this function, but it sends AVAX to maintainer.\\r\\n   * @notice reverts if there are not enough surplus.\\r\\n   */\\r\\n  function claimFee(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 claimerId\\r\\n  )\\r\\n    external\\r\\n    beforeActivationExpiration(_DATASTORE, poolId, claimerId)\\r\\n    returns (uint256 feeToSend)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, poolId, claimerId);\\r\\n\\r\\n    uint256 surplus = _DATASTORE.readUintForId(poolId, \\\"surplus\\\");\\r\\n    require(\\r\\n      fee > 0 && surplus > 0,\\r\\n      \\\"StakeUtils: fee and surplus should be bigger than zero\\\"\\r\\n    );\\r\\n\\r\\n    feeToSend = fee > surplus ? surplus : fee;\\r\\n    _DATASTORE.writeUintForId(poolId, \\\"surplus\\\", surplus - feeToSend);\\r\\n    uint256 _unclaimedFees = _DATASTORE.readUintForId(poolId, \\\"unclaimedFees\\\");\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      poolId,\\r\\n      \\\"unclaimedFees\\\",\\r\\n      _unclaimedFees - feeToSend\\r\\n    );\\r\\n\\r\\n    address receiver = payable(\\r\\n      _DATASTORE.readAddressForId(claimerId, \\\"maintainer\\\")\\r\\n    );\\r\\n\\r\\n    // set the accumulatedFee to zero\\r\\n    _DATASTORE.writeUintForId(poolId, key, fee - feeToSend);\\r\\n\\r\\n    (bool sent, ) = receiver.call{ value: feeToSend }(\\\"\\\");\\r\\n    require(sent, \\\"StakeUtils: Failed to send Avax\\\");\\r\\n    emit FeeClaimed(poolId, claimerId, feeToSend);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** WITHDRAWAL POOL specific functions **\\r\\n   */\\r\\n\\r\\n  function isStakingPausedForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (bool) {\\r\\n    // minting is paused when length != 0\\r\\n    return _DATASTORE.readBytesForId(_id, \\\"stakePaused\\\").length != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice pausing only prevents new staking operations.\\r\\n   * when a pool is paused for staking there are NO new funds to be minted, NO surplus.\\r\\n   */\\r\\n  function pauseStakingForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    _DATASTORE.writeBytesForId(_id, \\\"stakePaused\\\", bytes(\\\"1\\\")); // meaning true, importantly length > 0\\r\\n    emit PausedPool(_id);\\r\\n  }\\r\\n\\r\\n  function unpauseStakingForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    _DATASTORE.writeBytesForId(_id, \\\"stakePaused\\\", bytes(\\\"\\\")); // meaning false, importantly length = 0\\r\\n    emit UnpausedPool(_id);\\r\\n  }\\r\\n\\r\\n  function withdrawalPoolById(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (ISwap) {\\r\\n    return ISwap(_DATASTORE.readAddressForId(_id, \\\"withdrawalPool\\\"));\\r\\n  }\\r\\n\\r\\n  function LPTokenById(DataStoreUtils.DataStore storage _DATASTORE, uint256 _id)\\r\\n    public\\r\\n    view\\r\\n    returns (LPToken)\\r\\n  {\\r\\n    return LPToken(_DATASTORE.readAddressForId(_id, \\\"LPToken\\\"));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice deploys a new withdrawal pool using DEFAULT_SWAP_POOL\\r\\n   * @dev sets the withdrawal pool with respective\\r\\n   */\\r\\n  function deployWithdrawalPool(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external returns (address WithdrawalPool) {\\r\\n    require(_id > 0, \\\"StakeUtils: id should be > 0\\\");\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"withdrawalPool\\\") == address(0),\\r\\n      \\\"StakeUtils: withdrawalPool already exists\\\"\\r\\n    );\\r\\n\\r\\n    WithdrawalPool = _clone(self.DEFAULT_SWAP_POOL);\\r\\n\\r\\n    address _LPToken = ISwap(WithdrawalPool).initialize(\\r\\n      address(getgAVAX(self)),\\r\\n      _id,\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          _DATASTORE.readBytesForId(_id, \\\"name\\\"),\\r\\n          \\\"-Geode WP Token\\\"\\r\\n        )\\r\\n      ),\\r\\n      string(abi.encodePacked(_DATASTORE.readBytesForId(_id, \\\"name\\\"), \\\"-WP\\\")),\\r\\n      self.DEFAULT_A,\\r\\n      self.DEFAULT_FEE,\\r\\n      self.DEFAULT_ADMIN_FEE,\\r\\n      self.DEFAULT_LP_TOKEN\\r\\n    );\\r\\n\\r\\n    // initially 1 AVAX = 1 AVAX\\r\\n    _setPricePerShare(self, 1 ether, _id);\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"withdrawalPool\\\", WithdrawalPool);\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"LPToken\\\", _LPToken);\\r\\n\\r\\n    // approve token so we can use it in buybacks\\r\\n    getgAVAX(self).setApprovalForAll(WithdrawalPool, true);\\r\\n    LPTokenById(_DATASTORE, _id).approve(WithdrawalPool, type(uint256).max);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice staking function. buys if price is low, mints new tokens if a surplus is sent (extra avax through msg.value)\\r\\n   * @param poolId id of the staking pool, withdrawal pool and gAVAX to be used.\\r\\n   * @param minGavax swap op param\\r\\n   * @param deadline swap op param\\r\\n    // d  m.v\\r\\n    // 100 10 => buyback\\r\\n    // 100 100  => buyback\\r\\n    // 10 100  =>  buyback + mint\\r\\n    // 0 x => mint\\r\\n   */\\r\\n  function stake(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 minGavax,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 totalgAvax) {\\r\\n    require(msg.value > 0, \\\"GeodePortal: no avax given\\\");\\r\\n    require(\\r\\n      !isStakingPausedForPool(_DATASTORE, poolId),\\r\\n      \\\"StakeUtils: minting is paused\\\"\\r\\n    );\\r\\n    uint256 debt = withdrawalPoolById(_DATASTORE, poolId).getDebt();\\r\\n    if (debt >= msg.value) {\\r\\n      return\\r\\n        _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          msg.sender,\\r\\n          poolId,\\r\\n          msg.value,\\r\\n          minGavax,\\r\\n          deadline\\r\\n        );\\r\\n    } else {\\r\\n      uint256 boughtGavax = 0;\\r\\n      if (debt > IGNORABLE_DEBT) {\\r\\n        boughtGavax = _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          msg.sender,\\r\\n          poolId,\\r\\n          debt,\\r\\n          0,\\r\\n          deadline\\r\\n        );\\r\\n      }\\r\\n      uint256 remAvax = msg.value - debt;\\r\\n      uint256 mintGavax = (\\r\\n        ((remAvax * gAVAX_DENOMINATOR) / oraclePrice(self, poolId))\\r\\n      );\\r\\n      _mint(self.gAVAX, msg.sender, poolId, mintGavax);\\r\\n      _DATASTORE.writeUintForId(\\r\\n        poolId,\\r\\n        \\\"surplus\\\",\\r\\n        _DATASTORE.readUintForId(poolId, \\\"surplus\\\") + remAvax\\r\\n      );\\r\\n      require(\\r\\n        boughtGavax + mintGavax >= minGavax,\\r\\n        \\\"StakeUtils: less than minGavax\\\"\\r\\n      );\\r\\n      return boughtGavax + mintGavax;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5f63cadc7dea0a6bf1600d103c000881a4d463b34d06f69a1e0d5b8e9bf641e8\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Liquidity Provider Token\\r\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\r\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\r\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\r\\n */\\r\\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\\r\\n  /**\\r\\n   * @notice Initializes this LPToken contract with the given name and symbol\\r\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\r\\n   * in its initializer function.\\r\\n   * @param name name of this token\\r\\n   * @param symbol symbol of this token\\r\\n   */\\r\\n  function initialize(string memory name, string memory symbol)\\r\\n    external\\r\\n    initializer\\r\\n    returns (bool)\\r\\n  {\\r\\n    __Context_init_unchained();\\r\\n    __ERC20_init_unchained(name, symbol);\\r\\n    __Ownable_init_unchained();\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the given amount of LPToken to the recipient.\\r\\n   * @dev only owner can call this mint function\\r\\n   * @param recipient address of account to receive the tokens\\r\\n   * @param amount amount of tokens to mint\\r\\n   */\\r\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\r\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\r\\n    _mint(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\r\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\r\\n   * This assumes the owner is set to a Swap contract's address.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual override(ERC20Upgradeable) {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x12dbe7f8c21ec1cf4de45a7f2150e01e841f83f42436ab23fa76f35ef51383c8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20InterfaceUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20InterfaceUpgradable is IERC20Upgradeable {\\r\\n  function initialize(\\r\\n    uint256 id_,\\r\\n    string memory name_,\\r\\n    address _1155\\r\\n  ) external;\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue)\\r\\n    external\\r\\n    returns (bool);\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    external\\r\\n    returns (bool);\\r\\n\\r\\n  function pricePerShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x615bd16a566e9e7cd332eaa58004563b577792bfa6bc1c210f653b4d6302d2b0\",\"license\":\"MIT\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"../Portal/utils/DataStoreLib.sol\\\";\\r\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\r\\nimport \\\"../Portal/utils/StakeUtilsLib.sol\\\";\\r\\nimport \\\"../interfaces/IgAVAX.sol\\\";\\r\\n\\r\\ninterface IPortal {\\r\\n  function initialize(\\r\\n    address _GOVERNANCE,\\r\\n    address _ORACLE,\\r\\n    address _gAVAX,\\r\\n    address _DEFAULT_SWAP_POOL,\\r\\n    address _DEFAULT_INTERFACE,\\r\\n    address _DEFAULT_LP_TOKEN\\r\\n  ) external;\\r\\n\\r\\n  function pause() external;\\r\\n\\r\\n  function unpause() external;\\r\\n\\r\\n  function getVersion() external view returns (uint256);\\r\\n\\r\\n  function gAVAX() external view returns (address);\\r\\n\\r\\n  function getSenate() external view returns (address);\\r\\n\\r\\n  function getGovernance() external view returns (address);\\r\\n\\r\\n  function getOperationFee() external view returns (uint256);\\r\\n\\r\\n  function getMaxOperationFee() external view returns (uint256);\\r\\n\\r\\n  function getSenateExpireTimestamp() external view returns (uint256);\\r\\n\\r\\n  function getFeeDenominator() external view returns (uint256);\\r\\n\\r\\n  function getStakePoolParams()\\r\\n    external\\r\\n    view\\r\\n    returns (StakeUtils.StakePool memory);\\r\\n\\r\\n  function getIdsByType(uint256 _type) external view returns (uint256[] memory);\\r\\n\\r\\n  function getIdFromName(string calldata _name)\\r\\n    external\\r\\n    pure\\r\\n    returns (uint256 _id);\\r\\n\\r\\n  function getNameFromId(uint256 _id) external view returns (bytes memory);\\r\\n\\r\\n  function getCONTROLLERFromId(uint256 _id) external view returns (address);\\r\\n\\r\\n  function getMaintainerFromId(uint256 _id) external view returns (address);\\r\\n\\r\\n  function getMaintainerFeeFromId(uint256 _id) external view returns (uint256);\\r\\n\\r\\n  function planetCurrentInterface(uint256 _id) external view returns (address);\\r\\n\\r\\n  function planetWithdrawalPool(uint256 _id) external view returns (address);\\r\\n\\r\\n  function planetLPToken(uint256 _id) external view returns (address);\\r\\n\\r\\n  function planetActiveOperator(uint256 _id) external view returns (uint256);\\r\\n\\r\\n  function changeIdCONTROLLER(uint256 _id, address _newCONTROLLER) external;\\r\\n\\r\\n  function changeIdMaintainer(uint256 _id, address _newMaintainer) external;\\r\\n\\r\\n  function setMaintainerFee(uint256 _id, uint256 _newFee) external;\\r\\n\\r\\n  function setOperationFee(uint256 _newFee) external returns (bool success);\\r\\n\\r\\n  function setMaxOperationFee(uint256 _newFee) external returns (bool success);\\r\\n\\r\\n  function setMaxMaintainerFee(uint256 _newFee) external;\\r\\n\\r\\n  function setDefaultInterface(address _newDefault) external;\\r\\n\\r\\n  function activateOperator(uint256 _id, uint256 _activeId)\\r\\n    external\\r\\n    returns (bool);\\r\\n\\r\\n  function deactivateOperator(uint256 _id, uint256 _deactivedId)\\r\\n    external\\r\\n    returns (bool);\\r\\n\\r\\n  function setPlanetInterface(\\r\\n    uint256 _id,\\r\\n    address _Interface,\\r\\n    bool isSet\\r\\n  ) external;\\r\\n\\r\\n  function setPBank(\\r\\n    uint256 operatorId,\\r\\n    uint256 planetId,\\r\\n    bytes memory pBank\\r\\n  ) external;\\r\\n\\r\\n  function getPBank(uint256 operatorId, uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    returns (bytes memory);\\r\\n\\r\\n  function getProposal(uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (GeodeUtils.Proposal memory);\\r\\n\\r\\n  function newProposal(\\r\\n    address _CONTROLLER,\\r\\n    uint256 _type,\\r\\n    uint256 _proposalDuration,\\r\\n    bytes calldata _name\\r\\n  ) external;\\r\\n\\r\\n  function approveProposal(uint256 _id) external;\\r\\n\\r\\n  function approveSenate(uint256 proposalId, uint256 electorId) external;\\r\\n\\r\\n  function planetOraclePrice(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 _pricePershare);\\r\\n\\r\\n  function isOracleActive(uint256 _planetId) external view returns (bool);\\r\\n\\r\\n  function reportOracle(\\r\\n    uint256 _reportedTimeStamp,\\r\\n    uint256 _planetId,\\r\\n    uint256[] memory _opIds,\\r\\n    uint256[] memory _pBalanceIncreases\\r\\n  ) external returns (uint256 price);\\r\\n\\r\\n  function planetSurplus(uint256 planetId) external view returns (uint256);\\r\\n\\r\\n  function planetClaimableSurplus(uint256 planetId) external returns (uint256);\\r\\n\\r\\n  function planetDebt(uint256 planetId)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 debtInAvax);\\r\\n\\r\\n  function planetPBalance(uint256 planetId) external view returns (uint256);\\r\\n\\r\\n  function accumulatedFee(uint256 planetId, uint256 claimerId)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function payDebt(uint256 planetId, uint256 operatorId) external payable;\\r\\n\\r\\n  function claimSurplus(uint256 planetId) external returns (bool success);\\r\\n\\r\\n  function claimFee(uint256 planetId, uint256 claimerId)\\r\\n    external\\r\\n    returns (uint256 feeToSend);\\r\\n\\r\\n  function isStakingPausedForPool(uint256 _id) external view returns (bool);\\r\\n\\r\\n  function pauseStakingForPool(uint256 id) external;\\r\\n\\r\\n  function unpauseStakingForPool(uint256 id) external;\\r\\n\\r\\n  function stake(\\r\\n    uint256 planetId,\\r\\n    uint256 minGavax,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256 totalgAvax);\\r\\n}\\r\\n\",\"keccak256\":\"0xc26f00bd35158d5481b199f70dafef933444b3296878247ad10fa5b6af1e88a6\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./IgAVAX.sol\\\";\\r\\n\\r\\ninterface ISwap {\\r\\n  // pool data view functions\\r\\n  function getERC1155() external view returns (address);\\r\\n\\r\\n  function getA() external view returns (uint256);\\r\\n\\r\\n  function getAPrecise() external view returns (uint256);\\r\\n\\r\\n  function getToken() external view returns (uint256);\\r\\n\\r\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n  function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n  function getDebt() external view returns (uint256);\\r\\n\\r\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\r\\n\\r\\n  // min return calculation functions\\r\\n  function calculateSwap(\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function calculateRemoveLiquidity(uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n  function calculateRemoveLiquidityOneToken(\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex\\r\\n  ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n  // state modifying functions\\r\\n  function initialize(\\r\\n    address _gAvax,\\r\\n    uint256 _pooledTokenId,\\r\\n    string memory lpTokenName,\\r\\n    string memory lpTokenSymbol,\\r\\n    uint256 _a,\\r\\n    uint256 _fee,\\r\\n    uint256 _adminFee,\\r\\n    address lpTokenTargetAddress\\r\\n  ) external returns (address lpToken);\\r\\n\\r\\n  function swap(\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx,\\r\\n    uint256 minDy,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256);\\r\\n\\r\\n  function addLiquidity(\\r\\n    uint256[] calldata amounts,\\r\\n    uint256 minToMint,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    uint256 amount,\\r\\n    uint256[] calldata minAmounts,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory);\\r\\n\\r\\n  function removeLiquidityOneToken(\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex,\\r\\n    uint256 minAmount,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function removeLiquidityImbalance(\\r\\n    uint256[] calldata amounts,\\r\\n    uint256 maxBurnAmount,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function withdrawAdminFees() external;\\r\\n\\r\\n  function setAdminFee(uint256 newAdminFee) external;\\r\\n\\r\\n  function setSwapFee(uint256 newSwapFee) external;\\r\\n\\r\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\r\\n\\r\\n  function stopRampA() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb3e04fea3665487ed702679bf9b2934c06283675015eb1e0dd5f1e0ba29579b\",\"license\":\"MIT\"},\"contracts/interfaces/IgAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgAVAX {\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n  function uri(uint256) external view returns (string memory);\\r\\n\\r\\n  function balanceOf(address account, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n  function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n  function isApprovedForAll(address account, address operator)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function safeBatchTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function burn(\\r\\n    address account,\\r\\n    uint256 id,\\r\\n    uint256 value\\r\\n  ) external;\\r\\n\\r\\n  function burnBatch(\\r\\n    address account,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory values\\r\\n  ) external;\\r\\n\\r\\n  function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n  function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n  function mint(\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function mintBatch(\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function pause() external;\\r\\n\\r\\n  function unpause() external;\\r\\n\\r\\n  function pricePerShare(uint256 _id) external view returns (uint256);\\r\\n\\r\\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id) external;\\r\\n\\r\\n  function isInterface(address operator, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function setInterface(\\r\\n    address _Interface,\\r\\n    uint256 _id,\\r\\n    bool isSet\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe3954d8ed0616f70079a6799a677c988f79dce2412a6be7c5ae8dc0a95e8967b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c61536861005260003960008181611384015281816113c4015281816115e901528181611629015261177601526153686000f3fe6080604052600436106103b85760003560e01c80636f2bbcc7116101f2578063b3f227271161010d578063e402a5e2116100a0578063ec2c65c11161006f578063ec2c65c114610b0b578063ed500faa14610b20578063f23a6e6114610b40578063f4e1fc4114610b6c57600080fd5b8063e402a5e214610a7e578063e6277b7314610a9e578063e683016414610abe578063eb21b9d414610ade57600080fd5b8063c7f758a8116100dc578063c7f758a8146109ef578063cc2a9a5b14610a1c578063da8c9ddb14610a3c578063dfa4b5c614610a5e57600080fd5b8063b3f2272714610955578063bc197c811461096a578063c400b849146109af578063c50daead146109cf57600080fd5b80639419c8ef116101855780639a5fefda116101545780639a5fefda146108e2578063a638f2e214610902578063a9a05dbb14610915578063adfdc8ee1461093557600080fd5b80639419c8ef1461086257806396c71db41461088257806398951b56146108a257806399ed1f91146108c257600080fd5b80638456cb59116101c15780638456cb59146107ed5780638896d8ae146108025780639198a89714610822578063939b02fc1461084257600080fd5b80636f2bbcc71461076b57806373e91a0e146107805780637b5de0c4146107ad578063839a2d9a146107cd57600080fd5b8063475cff14116102e25780635c975abb11610275578063689338761161024457806368933876146106f65780636c8b02f7146107165780636d07e404146107365780636d18c8fb1461075657600080fd5b80635c975abb1461068b5780636065164c146106a357806362cc01e7146106c35780636655f6df146106d657600080fd5b806352900774116102b1578063529007741461061557806352d1902d1461063557806355522a3b1461064a578063572197a81461066a57600080fd5b8063475cff14146105a25780634b4184d1146105c25780634f1ef286146105e257806350aa72f0146105f557600080fd5b8063289b3c0d1161035a5780633802779811610329578063380277981461054157806338b90333146105615780633f4ba83a14610578578063413133ce1461058d57600080fd5b8063289b3c0d146104b457806328a00fff146104e15780633197a82d146105015780633659cfe61461052157600080fd5b80630fee1deb116103965780630fee1deb146104345780631b2522bc146104545780631cc8f3de1461047457806323b18ad21461049457600080fd5b806301ffc9a7146103bd57806307a462ca146103f25780630d8e6e2c14610414575b600080fd5b3480156103c957600080fd5b506103dd6103d836600461490d565b610b82565b60405190151581526020015b60405180910390f35b3480156103fe57600080fd5b5061041261040d366004614a70565b610bb9565b005b34801561042057600080fd5b506101aa545b6040519081526020016103e9565b34801561044057600080fd5b5061042661044f366004614b06565b610c64565b34801561046057600080fd5b506103dd61046f366004614a57565b610d03565b34801561048057600080fd5b506103dd61048f366004614b06565b610eed565b3480156104a057600080fd5b506104266104af366004614b06565b610f8a565b3480156104c057600080fd5b506104c9611071565b6040516001600160a01b0390911681526020016103e9565b3480156104ed57600080fd5b506104126104fc366004614b9e565b6110fe565b34801561050d57600080fd5b5061042661051c366004614a57565b6112eb565b34801561052d57600080fd5b5061041261053c36600461464e565b611379565b34801561054d57600080fd5b5061042661055c366004614a57565b611459565b34801561056d57600080fd5b506104266101aa5481565b34801561058457600080fd5b506104126114a4565b34801561059957600080fd5b506104c96114d9565b3480156105ae57600080fd5b506104266105bd366004614a57565b611515565b3480156105ce57600080fd5b506104126105dd366004614a57565b61156f565b6104126105f036600461481f565b6115de565b34801561060157600080fd5b50610412610610366004614b06565b6116af565b34801561062157600080fd5b50610412610630366004614a57565b6116fe565b34801561064157600080fd5b50610426611769565b34801561065657600080fd5b506104c9610665366004614a57565b61181c565b34801561067657600080fd5b506101a9546104c9906001600160a01b031681565b34801561069757600080fd5b5060655460ff166103dd565b3480156106af57600080fd5b506104c96106be366004614a57565b6118aa565b6104126106d1366004614b06565b6118e8565b3480156106e257600080fd5b506104126106f1366004614b06565b6119b5565b34801561070257600080fd5b50610412610711366004614a57565b611a27565b34801561072257600080fd5b506104c9610731366004614a57565b611a67565b34801561074257600080fd5b50610412610751366004614a70565b611aaa565b34801561076257600080fd5b50610426611b1c565b34801561077757600080fd5b50610426611ba4565b34801561078c57600080fd5b506107a061079b366004614b06565b611be0565b6040516103e99190614cf0565b3480156107b957600080fd5b506104266107c8366004614b06565b611ce5565b3480156107d957600080fd5b506104266107e8366004614a57565b611dd4565b3480156107f957600080fd5b50610412612129565b34801561080e57600080fd5b5061042661081d36600461496b565b61215c565b34801561082e57600080fd5b506107a061083d366004614a57565b612190565b34801561084e57600080fd5b5061041261085d366004614aa0565b612222565b34801561086e57600080fd5b506103dd61087d366004614a57565b612338565b34801561088e57600080fd5b506103dd61089d366004614a57565b6123f2565b3480156108ae57600080fd5b506104126108bd366004614a57565b612435565b3480156108ce57600080fd5b506104126108dd36600461464e565b612ab8565b3480156108ee57600080fd5b506104266108fd366004614b28565b612b5b565b610426610910366004614bed565b612c4a565b34801561092157600080fd5b506103dd610930366004614a57565b612d90565b34801561094157600080fd5b506103dd610950366004614b06565b612d9e565b34801561096157600080fd5b506104c9612e10565b34801561097657600080fd5b5061099661098536600461470a565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016103e9565b3480156109bb57600080fd5b506104266109ca366004614a57565b612e4c565b3480156109db57600080fd5b506104c96109ea366004614a57565b612e8f565b3480156109fb57600080fd5b50610a0f610a0a366004614a57565b612eeb565b6040516103e99190614fb6565b348015610a2857600080fd5b50610412610a37366004614688565b612fae565b348015610a4857600080fd5b50610a516134a9565b6040516103e99190614ff7565b348015610a6a57600080fd5b506103dd610a79366004614a57565b61359f565b348015610a8a57600080fd5b50610412610a9936600461486e565b6135e2565b348015610aaa57600080fd5b50610426610ab9366004614a57565b6137b5565b348015610aca57600080fd5b50610426610ad9366004614a57565b6139fc565b348015610aea57600080fd5b50610afe610af9366004614a57565b613a50565b6040516103e99190614cac565b348015610b1757600080fd5b50610426613ab3565b348015610b2c57600080fd5b506104c9610b3b366004614a57565b613aef565b348015610b4c57600080fd5b50610996610b5b3660046147b7565b63f23a6e6160e01b95945050505050565b348015610b7857600080fd5b5061019954610426565b60006001600160e01b03198216630271189760e51b1480610bb357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60655460ff1615610be55760405162461bcd60e51b8152600401610bdc90614d9b565b60405180910390fd5b6040516355e66bad60e01b81526101916004820152602481018390526001600160a01b038216604482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906355e66bad906064015b60006040518083038186803b158015610c4857600080fd5b505af4158015610c5c573d6000803e3d6000fd5b505050505050565b60405163d965692d60e01b815261019160048201526024810183905260448101829052600090819073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063d965692d90606401604080518083038186803b158015610cc257600080fd5b505af4158015610cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfa9190614ae2565b50949350505050565b6000610d1160655460ff1690565b15610d2e5760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415610d515760405162461bcd60e51b8152600401610bdc90614e47565b600260015560405163f237bab360e01b815261019160048201819052602482018490526d30b1ba34bb32a7b832b930ba37b960911b604483015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__91632f11d0029190859073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b158015610de157600080fd5b505af4158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1991906148f4565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610e5d57600080fd5b505af4158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9591906148d7565b905080610ee45760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a204661696c656420746f2073656e6420737572706c757300006044820152606401610bdc565b60018055919050565b60405163e7345b6960e01b81526101916004820152602481018390526044810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063e7345b69906064015b60206040518083038186803b158015610f4b57600080fd5b505af4158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906148d7565b9392505050565b600061019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab390918585604051602001610fdc9181527330b1ba34bb30ba34b7b722bc3834b930ba34b7b760611b602082015260340190565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401611021939291909283526020830191909152604082015260600190565b60206040518083038186803b15801561103957600080fd5b505af415801561104d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906148f4565b60405163f00d779d60e01b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__9063f00d779d906024015b60206040518083038186803b1580156110c157600080fd5b505af41580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f9919061466b565b905090565b60655460ff16156111215760405162461bcd60e51b8152600401610bdc90614d9b565b604051630143c90b60e71b8152339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061115e90610191908890600401614f0d565b60206040518083038186803b15801561117657600080fd5b505af415801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae919061466b565b6001600160a01b0316146112045760405162461bcd60e51b815260206004820152601d60248201527f506f7274616c3a2073656e646572206e6f74206d61696e7461696e65720000006044820152606401610bdc565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63eee4dd9090918585604051602001611245918152647042616e6b60d81b602082015260250190565b60405160208183030381529060405280519060200120856040518563ffffffff1660e01b815260040161127b9493929190614e7e565b60006040518083038186803b15801561129357600080fd5b505af41580156112a7573d6000803e3d6000fd5b505050507f3bc88bbd3a9c32c3ce5d01fb3f092508c56205e51eb07a9f231f76224f78e9088383836040516112de9392919061516e565b60405180910390a1505050565b60405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061132990610191908690600401614f98565b60206040518083038186803b15801561134157600080fd5b505af4158015611355573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906148f4565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113c25760405162461bcd60e51b8152600401610bdc90614d03565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661140b6000805160206152ec833981519152546001600160a01b031690565b6001600160a01b0316146114315760405162461bcd60e51b8152600401610bdc90614d4f565b61143a81613b32565b6040805160008082526020820190925261145691839190613c2e565b50565b6040516368b1fc4d60e11b815261019f600482015261019160248201526044810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063d163f89a90606401611329565b610196546001600160a01b031633146114cf5760405162461bcd60e51b8152600401610bdc90614dc5565b6114d7613da8565b565b604051631fa66e6d60e11b815261019f600482015260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda906024016110a9565b60405163f237bab360e01b81526101916004820152602481018290526d30b1ba34bb32a7b832b930ba37b960911b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390606401611329565b604051632b49c8db60e11b815261019160048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063569391b6906044015b60006040518083038186803b1580156115c357600080fd5b505af41580156115d7573d6000803e3d6000fd5b5050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116275760405162461bcd60e51b8152600401610bdc90614d03565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116706000805160206152ec833981519152546001600160a01b031690565b6001600160a01b0316146116965760405162461bcd60e51b8152600401610bdc90614d4f565b61169f82613b32565b6116ab82826001613c2e565b5050565b604051637efa2a7d60e11b815261019f60048201526101916024820152604481018390526064810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fdf454fa90608401610c30565b610196546001600160a01b031633146117295760405162461bcd60e51b8152600401610bdc90614dc5565b604051630700d74b60e01b815261019f60048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90630700d74b906044016115ab565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118095760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bdc565b506000805160206152ec83398151915290565b604051630143c90b60e71b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061185a90610191908690600401614f0d565b60206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb3919061466b565b604051630143c90b60e71b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061185a90610191908690600401614ec8565b6002600154141561190b5760405162461bcd60e51b8152600401610bdc90614e47565b600260015560655460ff16156119335760405162461bcd60e51b8152600401610bdc90614d9b565b6040516386a51db560e01b815261019f60048201526101916024820152604481018390526064810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906386a51db59060840160006040518083038186803b15801561199557600080fd5b505af41580156119a9573d6000803e3d6000fd5b50506001805550505050565b60655460ff16156119d85760405162461bcd60e51b8152600401610bdc90614d9b565b604051635fff751760e01b815261019560048201526101916024820152604481018390526064810182905273__$470c7289acb57212a69b34ceb5289ef95c$__90635fff751790608401610c30565b604051639e8c228360e01b815261019160048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90639e8c2283906044016115ab565b6040516303f4d30760e61b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fd34c1c09060440161185a565b60655460ff1615611acd5760405162461bcd60e51b8152600401610bdc90614d9b565b60405163017e493760e31b81526101916004820152602481018390526001600160a01b038216604482015273__$470c7289acb57212a69b34ceb5289ef95c$__90630bf249b890606401610c30565b6040516314e00f7960e21b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__906353803de4906024015b60206040518083038186803b158015611b6c57600080fd5b505af4158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f991906148f4565b604051631e0cbd7f60e11b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90633c197afe90602401611b54565b6060611bee60655460ff1690565b15611c0b5760405162461bcd60e51b8152600401610bdc90614d9b565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca11690918585604051602001611c4c918152647042616e6b60d81b602082015260250190565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401611c91939291909283526020830191909152604082015260600190565b60006040518083038186803b158015611ca957600080fd5b505af4158015611cbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f839190810190614937565b6000611cf360655460ff1690565b15611d105760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415611d335760405162461bcd60e51b8152600401610bdc90614e47565b6002600155604051624ffb0760e61b81526101916004820152602481018490526044810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906313fec1c09060640160206040518083038186803b158015611d9157600080fd5b505af4158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc991906148f4565b600180559392505050565b6040516303f4d30760e61b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fd34c1c09060440160206040518083038186803b158015611e2a57600080fd5b505af4158015611e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e62919061466b565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9a57600080fd5b505afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed291906148f4565b60405163f237bab360e01b815290915073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390611f1090610191908690600401614f98565b60206040518083038186803b158015611f2857600080fd5b505af4158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6091906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390611f9b90610191908790600401614ee9565b60206040518083038186803b158015611fb357600080fd5b505af4158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb91906148f4565b11156121245760405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061202f90610191908790600401614f98565b60206040518083038186803b15801561204757600080fd5b505af415801561205b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207f91906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab3906120ba90610191908890600401614ee9565b60206040518083038186803b1580156120d257600080fd5b505af41580156120e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210a91906148f4565b612114919061522f565b905061212081836151e4565b9150505b919050565b610196546001600160a01b031633146121545760405162461bcd60e51b8152600401610bdc90614dc5565b6114d7613e3b565b60008282604051602001612171929190614c80565b60408051601f1981840301815291905280516020909101209392505050565b6040516301ae508b60e11b815260609073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063035ca116906121ce90610191908690600401614ead565b60006040518083038186803b1580156121e657600080fd5b505af41580156121fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb39190810190614937565b60655460ff16156122455760405162461bcd60e51b8152600401610bdc90614d9b565b604051630143c90b60e71b8152339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061228290610191908890600401614f0d565b60206040518083038186803b15801561229a57600080fd5b505af41580156122ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d2919061466b565b6001600160a01b0316146123285760405162461bcd60e51b815260206004820152601d60248201527f506f7274616c3a2073656e646572206e6f74206d61696e7461696e65720000006044820152606401610bdc565b612333838383613e93565b505050565b610196546000906001600160a01b031633146123665760405162461bcd60e51b8152600401610bdc90614dc5565b604051637f3864d560e11b815261019560048201526024810183905273__$470c7289acb57212a69b34ceb5289ef95c$__9063fe70c9aa906044015b60206040518083038186803b1580156123ba57600080fd5b505af41580156123ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906148d7565b6040516385c56cc560e01b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__906385c56cc5906044016123a2565b60655460ff16156124585760405162461bcd60e51b8152600401610bdc90614d9b565b6040516325b0fcff60e11b8152610195600482015261019160248201526044810182905273__$470c7289acb57212a69b34ceb5289ef95c$__90634b61f9fe9060640160006040518083038186803b1580156124b357600080fd5b505af41580156124c7573d6000803e3d6000fd5b505060405163f237bab360e01b8152610191600482015260248101849052635459504560e01b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__925063f237bab3915060640160206040518083038186803b15801561252b57600080fd5b505af415801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906148f4565b6004141561262057604051630143c90b60e71b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190610191908490849063a1e48580906125b29085908590600401614ec8565b60206040518083038186803b1580156125ca57600080fd5b505af41580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612602919061466b565b6040518463ffffffff1660e01b81526004016115ab93929190614f2e565b60405163f237bab360e01b8152610191600482015260248101829052635459504560e01b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561268057600080fd5b505af4158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b891906148f4565b6005141561145657604051630143c90b60e71b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190610191908490849063a1e48580906127079085908590600401614ec8565b60206040518083038186803b15801561271f57600080fd5b505af4158015612733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612757919061466b565b6040518463ffffffff1660e01b815260040161277593929190614f2e565b60006040518083038186803b15801561278d57600080fd5b505af41580156127a1573d6000803e3d6000fd5b50506101a9546040516334e8609360e01b81526001600160a01b0390911660048201526000925073__$3203ba5584f3f9d3a0d8e6013dbecad587$__91506334e860939060240160206040518083038186803b15801561280057600080fd5b505af4158015612814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612838919061466b565b9050806001600160a01b0316631d9a9ea28361019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca1169091876040518363ffffffff1660e01b8152600401612887929190614ead565b60006040518083038186803b15801561289f57600080fd5b505af41580156128b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128db9190810190614937565b604051631fa66e6d60e11b815261019f600482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda9060240160206040518083038186803b15801561292757600080fd5b505af415801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f919061466b565b6040518463ffffffff1660e01b815260040161297d9392919061513d565b600060405180830381600087803b15801561299757600080fd5b505af11580156129ab573d6000803e3d6000fd5b505050506129bb82826001613e93565b604051636b4a768560e01b815261019f600482015261019160248201526044810183905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90636b4a76859060640160206040518083038186803b158015612a1957600080fd5b505af4158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a51919061466b565b6101965460405163f2fde38b60e01b81526001600160a01b03918216600482015291925082169063f2fde38b90602401600060405180830381600087803b158015612a9b57600080fd5b505af1158015612aaf573d6000803e3d6000fd5b50505050505050565b60655460ff1615612adb5760405162461bcd60e51b8152600401610bdc90614d9b565b610196546001600160a01b03163314612b065760405162461bcd60e51b8152600401610bdc90614dc5565b6101a980546001600160a01b0319166001600160a01b0383169081179091556040519081527fe6846a8621a1ef6311f1292f92a0097c76a6ede02a8b870077a8941bb095a2369060200160405180910390a150565b600060026001541415612b805760405162461bcd60e51b8152600401610bdc90614e47565b600260015560655460ff1615612ba85760405162461bcd60e51b8152600401610bdc90614d9b565b604051635c3557c160e11b815273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063b86aaf8290612bed9061019f90610191908a908a908a908a906004016150a0565b60206040518083038186803b158015612c0557600080fd5b505af4158015612c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3d91906148f4565b6001805595945050505050565b6000612c5860655460ff1690565b15612c755760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415612c985760405162461bcd60e51b8152600401610bdc90614e47565b600260015560405163029dac9760e11b815261019f6004820152610191602482015260448101859052606481018490526084810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063053b592e9060a40160206040518083038186803b158015612d0657600080fd5b505af4158015612d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3e91906148f4565b905060008111611dc95760405162461bcd60e51b815260206004820152601b60248201527f506f7274616c3a20756e73756363657366756c206465706f73697400000000006044820152606401610bdc565b6000610bb3610191836140ee565b6000612dac60655460ff1690565b15612dc95760405162461bcd60e51b8152600401610bdc90614d9b565b604051636ecc896560e01b81526101916004820152602481018490526044810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90636ecc896590606401610f33565b604051632748984160e11b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90634e913082906024016110a9565b60405163538b984f60e01b815261019f60048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063538b984f90604401611329565b604051630143c90b60e71b81526101916004820152602481018290526f63757272656e74496e7465726661636560801b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640161185a565b612f1f604051806080016040528060006001600160a01b031681526020016000815260200160008152602001606081525090565b60405163d115f19560e01b815261019560048201526024810183905273__$470c7289acb57212a69b34ceb5289ef95c$__9063d115f1959060440160006040518083038186803b158015612f7257600080fd5b505af4158015612f86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb391908101906149ac565b600054610100900460ff16612fc95760005460ff1615612fcd565b303b155b6130305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bdc565b600054610100900460ff16158015613052576000805461ffff19166101011790555b61305a6141c5565b6130626141f4565b61306a614223565b613072614223565b6001600160a01b0387166130d45760405162461bcd60e51b815260206004820152602360248201527f506f7274616c3a205f474f5645524e414e43452063616e206e6f74206265207a60448201526265726f60e81b6064820152608401610bdc565b6001600160a01b03861661312a5760405162461bcd60e51b815260206004820152601f60248201527f506f7274616c3a205f4f5241434c452063616e206e6f74206265207a65726f006044820152606401610bdc565b6001600160a01b0385166131805760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a205f67415641582063616e206e6f74206265207a65726f00006044820152606401610bdc565b6001600160a01b0384166131e95760405162461bcd60e51b815260206004820152602a60248201527f506f7274616c3a205f44454641554c545f535741505f504f4f4c2063616e206e6044820152696f74206265207a65726f60b01b6064820152608401610bdc565b6001600160a01b0383166132525760405162461bcd60e51b815260206004820152602a60248201527f506f7274616c3a205f44454641554c545f494e544552464143452063616e206e6044820152696f74206265207a65726f60b01b6064820152608401610bdc565b6001600160a01b0382166132ba5760405162461bcd60e51b815260206004820152602960248201527f506f7274616c3a205f44454641554c545f4c505f544f4b454e2063616e206e6f60448201526874206265207a65726f60b81b6064820152608401610bdc565b61019680546001600160a01b0389166001600160a01b03199182168117909255610195805490911690911790556132f56303c26700426151e4565b61019a556000610197819055610198556402540be40061019955604051630105835b60e41b815261019560048201526101916024820152600560448201526001606482015273__$470c7289acb57212a69b34ceb5289ef95c$__9063105835b09060840160006040518083038186803b15801561337157600080fd5b505af4158015613385573d6000803e3d6000fd5b50506101a980546001600160a01b03199081166001600160a01b0388811691909117909255610199546101a681905561019f805483168b85161790556101a2805483168c85161790556101a0805483168a85161790556101a18054909216928716929092179055603c6101a355623d09006101a45564012a05f2006101a5556103e8925061341591506002615210565b61341f91906151fc565b6101a7556101995460649061343590600a615210565b61343f91906151fc565b6101a85561019b80546001600160a01b031916905560016101aa8190556040519081527ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a18015612aaf576000805461ff001916905550505050505050565b61352360405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50604080516101408101825261019f546001600160a01b0390811682526101a054811660208301526101a1548116928201929092526101a25490911660608201526101a35460808201526101a45460a08201526101a55460c08201526101a65460e08201526101a7546101008201526101a85461012082015290565b6040516343dbfc0560e01b815261019560048201526024810182905260009073__$470c7289acb57212a69b34ceb5289ef95c$__906343dbfc05906044016123a2565b60655460ff16156136055760405162461bcd60e51b8152600401610bdc90614d9b565b610196546001600160a01b031633146136305760405162461bcd60e51b8152600401610bdc90614dc5565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca11690918484604051602001613662929190614c80565b60408051601f198184030181529082905280516020909101206001600160e01b031960e085901b1682526136999291600401614ead565b60006040518083038186803b1580156136b157600080fd5b505af41580156136c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136ed9190810190614937565b511561373b5760405162461bcd60e51b815260206004820152601c60248201527f504f5254414c3a206e616d6520616c726561647920636c61696d6564000000006044820152606401610bdc565b6040516305fc644760e11b815273__$470c7289acb57212a69b34ceb5289ef95c$__90630bf8c88e9061377e9061019590899089908990899089906004016150ea565b60006040518083038186803b15801561379657600080fd5b505af41580156137aa573d6000803e3d6000fd5b505050505050505050565b60405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab3906137f390610191908690600401614ee9565b60206040518083038186803b15801561380b57600080fd5b505af415801561381f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384391906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061387e90610191908790600401614f98565b60206040518083038186803b15801561389657600080fd5b505af41580156138aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ce91906148f4565b11156139f45760405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061390f90610191908690600401614ee9565b60206040518083038186803b15801561392757600080fd5b505af415801561393b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395f91906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061399a90610191908790600401614f98565b60206040518083038186803b1580156139b257600080fd5b505af41580156139c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ea91906148f4565b610bb3919061522f565b506000919050565b60405163f237bab360e01b8152610191600482015260248101829052677042616c616e636560c01b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390606401611329565b60008181526101916020908152604091829020805483518184028101840190945280845260609392830182828015613aa757602002820191906000526020600020905b815481526020019060010190808311613a93575b50505050509050919050565b6040516320cd480560e21b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90638335201490602401611b54565b604051630f272bc760e21b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633c9caf1c9060440161185a565b6001600160a01b038116613b4557600080fd5b604051633680b40760e01b815261019560048201526001600160a01b038216602482015273__$470c7289acb57212a69b34ceb5289ef95c$__90633680b4079060440160206040518083038186803b158015613ba057600080fd5b505af4158015613bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd891906148d7565b6114565760405162461bcd60e51b815260206004820152602160248201527f506f7274616c3a206973206e6f7420616c6c6f77656420746f207570677261646044820152606560f81b6064820152608401610bdc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613c61576123338361424a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9a57600080fd5b505afa925050508015613cca575060408051601f3d908101601f19168201909252613cc7918101906148f4565b60015b613d2d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610bdc565b6000805160206152ec8339815191528114613d9c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610bdc565b506123338383836142e6565b60655460ff16613df15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bdc565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615613e5e5760405162461bcd60e51b8152600401610bdc90614d9b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613e1e3390565b604051631fa66e6d60e11b815261019f600482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda9060240160206040518083038186803b158015613edf57600080fd5b505af4158015613ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f17919061466b565b6040516327b03e0160e21b81526001600160a01b0384811660048301526024820186905283151560448301529190911690639ec0f80490606401600060405180830381600087803b158015613f6b57600080fd5b505af1158015613f7f573d6000803e3d6000fd5b505050508015613ff25760405163dff34ff160e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190613fc6906101919087908790600401614f60565b60006040518083038186803b158015613fde57600080fd5b505af4158015612aaf573d6000803e3d6000fd5b604051630143c90b60e71b81526101916004820152602481018490526f63757272656e74496e7465726661636560801b60448201526001600160a01b0383169073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640160206040518083038186803b15801561406957600080fd5b505af415801561407d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a1919061466b565b6001600160a01b031614156123335760405163dff34ff160e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190613fc690610191908790600090600401614f60565b60006107086141006201518042615272565b11158015610f8357506141156107084261522f565b60405163f237bab360e01b815260048101859052602481018490527406f7261636c6555706461746554696d655374616d7605c1b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561418557600080fd5b505af4158015614199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bd91906148f4565b109392505050565b600054610100900460ff166141ec5760405162461bcd60e51b8152600401610bdc90614dfc565b6114d7614311565b600054610100900460ff1661421b5760405162461bcd60e51b8152600401610bdc90614dfc565b6114d761433e565b600054610100900460ff166114d75760405162461bcd60e51b8152600401610bdc90614dfc565b6001600160a01b0381163b6142b75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610bdc565b6000805160206152ec83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6142ef83614371565b6000825111806142fc5750805b156123335761430b83836143b1565b50505050565b600054610100900460ff166143385760405162461bcd60e51b8152600401610bdc90614dfc565b60018055565b600054610100900460ff166143655760405162461bcd60e51b8152600401610bdc90614dfc565b6065805460ff19169055565b61437a8161424a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6144195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610bdc565b600080846001600160a01b0316846040516144349190614c90565b600060405180830381855af49150503d806000811461446f576040519150601f19603f3d011682016040523d82523d6000602084013e614474565b606091505b509150915061449c828260405180606001604052806027815260200161530c602791396144a5565b95945050505050565b606083156144b4575081610f83565b8251156144c45782518084602001fd5b8160405162461bcd60e51b8152600401610bdc9190614cf0565b600082601f8301126144ef57600080fd5b813560206001600160401b0382111561450a5761450a6152b2565b8160051b61451982820161518d565b83815282810190868401838801850189101561453457600080fd5b600093505b85841015614557578035835260019390930192918401918401614539565b50979650505050505050565b60008083601f84011261457557600080fd5b5081356001600160401b0381111561458c57600080fd5b6020830191508360208285010111156145a457600080fd5b9250929050565b600082601f8301126145bc57600080fd5b81356145cf6145ca826151bd565b61518d565b8181528460208386010111156145e457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261461257600080fd5b81516146206145ca826151bd565b81815284602083860101111561463557600080fd5b614646826020830160208701615246565b949350505050565b60006020828403121561466057600080fd5b8135610f83816152c8565b60006020828403121561467d57600080fd5b8151610f83816152c8565b60008060008060008060c087890312156146a157600080fd5b86356146ac816152c8565b955060208701356146bc816152c8565b945060408701356146cc816152c8565b935060608701356146dc816152c8565b925060808701356146ec816152c8565b915060a08701356146fc816152c8565b809150509295509295509295565b600080600080600060a0868803121561472257600080fd5b853561472d816152c8565b9450602086013561473d816152c8565b935060408601356001600160401b038082111561475957600080fd5b61476589838a016144de565b9450606088013591508082111561477b57600080fd5b61478789838a016144de565b9350608088013591508082111561479d57600080fd5b506147aa888289016145ab565b9150509295509295909350565b600080600080600060a086880312156147cf57600080fd5b85356147da816152c8565b945060208601356147ea816152c8565b9350604086013592506060860135915060808601356001600160401b0381111561481357600080fd5b6147aa888289016145ab565b6000806040838503121561483257600080fd5b823561483d816152c8565b915060208301356001600160401b0381111561485857600080fd5b614864858286016145ab565b9150509250929050565b60008060008060006080868803121561488657600080fd5b8535614891816152c8565b9450602086013593506040860135925060608601356001600160401b038111156148ba57600080fd5b6148c688828901614563565b969995985093965092949392505050565b6000602082840312156148e957600080fd5b8151610f83816152dd565b60006020828403121561490657600080fd5b5051919050565b60006020828403121561491f57600080fd5b81356001600160e01b031981168114610f8357600080fd5b60006020828403121561494957600080fd5b81516001600160401b0381111561495f57600080fd5b61464684828501614601565b6000806020838503121561497e57600080fd5b82356001600160401b0381111561499457600080fd5b6149a085828601614563565b90969095509350505050565b6000602082840312156149be57600080fd5b81516001600160401b03808211156149d557600080fd5b90830190608082860312156149e957600080fd5b604051608081018181108382111715614a0457614a046152b2565b6040528251614a12816152c8565b808252506020830151602082015260408301516040820152606083015182811115614a3c57600080fd5b614a4887828601614601565b60608301525095945050505050565b600060208284031215614a6957600080fd5b5035919050565b60008060408385031215614a8357600080fd5b823591506020830135614a95816152c8565b809150509250929050565b600080600060608486031215614ab557600080fd5b833592506020840135614ac7816152c8565b91506040840135614ad7816152dd565b809150509250925092565b60008060408385031215614af557600080fd5b505080516020909101519092909150565b60008060408385031215614b1957600080fd5b50508035926020909101359150565b60008060008060808587031215614b3e57600080fd5b843593506020850135925060408501356001600160401b0380821115614b6357600080fd5b614b6f888389016144de565b93506060870135915080821115614b8557600080fd5b50614b92878288016144de565b91505092959194509250565b600080600060608486031215614bb357600080fd5b833592506020840135915060408401356001600160401b03811115614bd757600080fd5b614be3868287016145ab565b9150509250925092565b600080600060608486031215614c0257600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015614c4957815187529582019590820190600101614c2d565b509495945050505050565b60008151808452614c6c816020860160208601615246565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251614ca2818460208701615246565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015614ce457835183529284019291840191600101614cc8565b50909695505050505050565b602081526000610f836020830184614c54565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f506f7274616c3a2073656e646572206e6f7420474f5645524e414e4345000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b848152836020820152826040820152608060608201526000614ea36080830184614c54565b9695505050505050565b9182526020820152636e616d6560e01b604082015260600190565b91825260208201526921a7a72a2927a62622a960b11b604082015260600190565b91825260208201526c756e636c61696d65644665657360981b604082015260600190565b91825260208201526936b0b4b73a30b4b732b960b11b604082015260600190565b92835260208301919091526936b0b4b73a30b4b732b960b11b60408301526001600160a01b0316606082015260800190565b92835260208301919091526f63757272656e74496e7465726661636560801b60408301526001600160a01b0316606082015260800190565b918252602082015266737572706c757360c81b604082015260600190565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160808084015261464660a0840182614c54565b81516001600160a01b031681526101408101602083015161502360208401826001600160a01b03169052565b50604083015161503e60408401826001600160a01b03169052565b50606083015161505960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b86815285602082015284604082015283606082015260c0608082015260006150cb60c0830185614c19565b82810360a08401526150dd8185614c19565b9998505050505050505050565b86815260018060a01b038616602082015284604082015283606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b8381526060602082015260006151566060830185614c54565b905060018060a01b0383166040830152949350505050565b83815282602082015260606040820152600061449c6060830184614c54565b604051601f8201601f191681016001600160401b03811182821017156151b5576151b56152b2565b604052919050565b60006001600160401b038211156151d6576151d66152b2565b50601f01601f191660200190565b600082198211156151f7576151f7615286565b500190565b60008261520b5761520b61529c565b500490565b600081600019048311821515161561522a5761522a615286565b500290565b60008282101561524157615241615286565b500390565b60005b83811015615261578181015183820152602001615249565b8381111561430b5750506000910152565b6000826152815761528161529c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461145657600080fd5b801515811461145657600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f73e1e6ac52cbbd22a67c9c4c8a61b15bac867ea73e3afb18ea7515b8a3373b964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103b85760003560e01c80636f2bbcc7116101f2578063b3f227271161010d578063e402a5e2116100a0578063ec2c65c11161006f578063ec2c65c114610b0b578063ed500faa14610b20578063f23a6e6114610b40578063f4e1fc4114610b6c57600080fd5b8063e402a5e214610a7e578063e6277b7314610a9e578063e683016414610abe578063eb21b9d414610ade57600080fd5b8063c7f758a8116100dc578063c7f758a8146109ef578063cc2a9a5b14610a1c578063da8c9ddb14610a3c578063dfa4b5c614610a5e57600080fd5b8063b3f2272714610955578063bc197c811461096a578063c400b849146109af578063c50daead146109cf57600080fd5b80639419c8ef116101855780639a5fefda116101545780639a5fefda146108e2578063a638f2e214610902578063a9a05dbb14610915578063adfdc8ee1461093557600080fd5b80639419c8ef1461086257806396c71db41461088257806398951b56146108a257806399ed1f91146108c257600080fd5b80638456cb59116101c15780638456cb59146107ed5780638896d8ae146108025780639198a89714610822578063939b02fc1461084257600080fd5b80636f2bbcc71461076b57806373e91a0e146107805780637b5de0c4146107ad578063839a2d9a146107cd57600080fd5b8063475cff14116102e25780635c975abb11610275578063689338761161024457806368933876146106f65780636c8b02f7146107165780636d07e404146107365780636d18c8fb1461075657600080fd5b80635c975abb1461068b5780636065164c146106a357806362cc01e7146106c35780636655f6df146106d657600080fd5b806352900774116102b1578063529007741461061557806352d1902d1461063557806355522a3b1461064a578063572197a81461066a57600080fd5b8063475cff14146105a25780634b4184d1146105c25780634f1ef286146105e257806350aa72f0146105f557600080fd5b8063289b3c0d1161035a5780633802779811610329578063380277981461054157806338b90333146105615780633f4ba83a14610578578063413133ce1461058d57600080fd5b8063289b3c0d146104b457806328a00fff146104e15780633197a82d146105015780633659cfe61461052157600080fd5b80630fee1deb116103965780630fee1deb146104345780631b2522bc146104545780631cc8f3de1461047457806323b18ad21461049457600080fd5b806301ffc9a7146103bd57806307a462ca146103f25780630d8e6e2c14610414575b600080fd5b3480156103c957600080fd5b506103dd6103d836600461490d565b610b82565b60405190151581526020015b60405180910390f35b3480156103fe57600080fd5b5061041261040d366004614a70565b610bb9565b005b34801561042057600080fd5b506101aa545b6040519081526020016103e9565b34801561044057600080fd5b5061042661044f366004614b06565b610c64565b34801561046057600080fd5b506103dd61046f366004614a57565b610d03565b34801561048057600080fd5b506103dd61048f366004614b06565b610eed565b3480156104a057600080fd5b506104266104af366004614b06565b610f8a565b3480156104c057600080fd5b506104c9611071565b6040516001600160a01b0390911681526020016103e9565b3480156104ed57600080fd5b506104126104fc366004614b9e565b6110fe565b34801561050d57600080fd5b5061042661051c366004614a57565b6112eb565b34801561052d57600080fd5b5061041261053c36600461464e565b611379565b34801561054d57600080fd5b5061042661055c366004614a57565b611459565b34801561056d57600080fd5b506104266101aa5481565b34801561058457600080fd5b506104126114a4565b34801561059957600080fd5b506104c96114d9565b3480156105ae57600080fd5b506104266105bd366004614a57565b611515565b3480156105ce57600080fd5b506104126105dd366004614a57565b61156f565b6104126105f036600461481f565b6115de565b34801561060157600080fd5b50610412610610366004614b06565b6116af565b34801561062157600080fd5b50610412610630366004614a57565b6116fe565b34801561064157600080fd5b50610426611769565b34801561065657600080fd5b506104c9610665366004614a57565b61181c565b34801561067657600080fd5b506101a9546104c9906001600160a01b031681565b34801561069757600080fd5b5060655460ff166103dd565b3480156106af57600080fd5b506104c96106be366004614a57565b6118aa565b6104126106d1366004614b06565b6118e8565b3480156106e257600080fd5b506104126106f1366004614b06565b6119b5565b34801561070257600080fd5b50610412610711366004614a57565b611a27565b34801561072257600080fd5b506104c9610731366004614a57565b611a67565b34801561074257600080fd5b50610412610751366004614a70565b611aaa565b34801561076257600080fd5b50610426611b1c565b34801561077757600080fd5b50610426611ba4565b34801561078c57600080fd5b506107a061079b366004614b06565b611be0565b6040516103e99190614cf0565b3480156107b957600080fd5b506104266107c8366004614b06565b611ce5565b3480156107d957600080fd5b506104266107e8366004614a57565b611dd4565b3480156107f957600080fd5b50610412612129565b34801561080e57600080fd5b5061042661081d36600461496b565b61215c565b34801561082e57600080fd5b506107a061083d366004614a57565b612190565b34801561084e57600080fd5b5061041261085d366004614aa0565b612222565b34801561086e57600080fd5b506103dd61087d366004614a57565b612338565b34801561088e57600080fd5b506103dd61089d366004614a57565b6123f2565b3480156108ae57600080fd5b506104126108bd366004614a57565b612435565b3480156108ce57600080fd5b506104126108dd36600461464e565b612ab8565b3480156108ee57600080fd5b506104266108fd366004614b28565b612b5b565b610426610910366004614bed565b612c4a565b34801561092157600080fd5b506103dd610930366004614a57565b612d90565b34801561094157600080fd5b506103dd610950366004614b06565b612d9e565b34801561096157600080fd5b506104c9612e10565b34801561097657600080fd5b5061099661098536600461470a565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016103e9565b3480156109bb57600080fd5b506104266109ca366004614a57565b612e4c565b3480156109db57600080fd5b506104c96109ea366004614a57565b612e8f565b3480156109fb57600080fd5b50610a0f610a0a366004614a57565b612eeb565b6040516103e99190614fb6565b348015610a2857600080fd5b50610412610a37366004614688565b612fae565b348015610a4857600080fd5b50610a516134a9565b6040516103e99190614ff7565b348015610a6a57600080fd5b506103dd610a79366004614a57565b61359f565b348015610a8a57600080fd5b50610412610a9936600461486e565b6135e2565b348015610aaa57600080fd5b50610426610ab9366004614a57565b6137b5565b348015610aca57600080fd5b50610426610ad9366004614a57565b6139fc565b348015610aea57600080fd5b50610afe610af9366004614a57565b613a50565b6040516103e99190614cac565b348015610b1757600080fd5b50610426613ab3565b348015610b2c57600080fd5b506104c9610b3b366004614a57565b613aef565b348015610b4c57600080fd5b50610996610b5b3660046147b7565b63f23a6e6160e01b95945050505050565b348015610b7857600080fd5b5061019954610426565b60006001600160e01b03198216630271189760e51b1480610bb357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60655460ff1615610be55760405162461bcd60e51b8152600401610bdc90614d9b565b60405180910390fd5b6040516355e66bad60e01b81526101916004820152602481018390526001600160a01b038216604482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906355e66bad906064015b60006040518083038186803b158015610c4857600080fd5b505af4158015610c5c573d6000803e3d6000fd5b505050505050565b60405163d965692d60e01b815261019160048201526024810183905260448101829052600090819073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063d965692d90606401604080518083038186803b158015610cc257600080fd5b505af4158015610cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfa9190614ae2565b50949350505050565b6000610d1160655460ff1690565b15610d2e5760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415610d515760405162461bcd60e51b8152600401610bdc90614e47565b600260015560405163f237bab360e01b815261019160048201819052602482018490526d30b1ba34bb32a7b832b930ba37b960911b604483015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__91632f11d0029190859073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b158015610de157600080fd5b505af4158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1991906148f4565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610e5d57600080fd5b505af4158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9591906148d7565b905080610ee45760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a204661696c656420746f2073656e6420737572706c757300006044820152606401610bdc565b60018055919050565b60405163e7345b6960e01b81526101916004820152602481018390526044810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063e7345b69906064015b60206040518083038186803b158015610f4b57600080fd5b505af4158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906148d7565b9392505050565b600061019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab390918585604051602001610fdc9181527330b1ba34bb30ba34b7b722bc3834b930ba34b7b760611b602082015260340190565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401611021939291909283526020830191909152604082015260600190565b60206040518083038186803b15801561103957600080fd5b505af415801561104d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906148f4565b60405163f00d779d60e01b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__9063f00d779d906024015b60206040518083038186803b1580156110c157600080fd5b505af41580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f9919061466b565b905090565b60655460ff16156111215760405162461bcd60e51b8152600401610bdc90614d9b565b604051630143c90b60e71b8152339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061115e90610191908890600401614f0d565b60206040518083038186803b15801561117657600080fd5b505af415801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae919061466b565b6001600160a01b0316146112045760405162461bcd60e51b815260206004820152601d60248201527f506f7274616c3a2073656e646572206e6f74206d61696e7461696e65720000006044820152606401610bdc565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63eee4dd9090918585604051602001611245918152647042616e6b60d81b602082015260250190565b60405160208183030381529060405280519060200120856040518563ffffffff1660e01b815260040161127b9493929190614e7e565b60006040518083038186803b15801561129357600080fd5b505af41580156112a7573d6000803e3d6000fd5b505050507f3bc88bbd3a9c32c3ce5d01fb3f092508c56205e51eb07a9f231f76224f78e9088383836040516112de9392919061516e565b60405180910390a1505050565b60405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061132990610191908690600401614f98565b60206040518083038186803b15801561134157600080fd5b505af4158015611355573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906148f4565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113c25760405162461bcd60e51b8152600401610bdc90614d03565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661140b6000805160206152ec833981519152546001600160a01b031690565b6001600160a01b0316146114315760405162461bcd60e51b8152600401610bdc90614d4f565b61143a81613b32565b6040805160008082526020820190925261145691839190613c2e565b50565b6040516368b1fc4d60e11b815261019f600482015261019160248201526044810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063d163f89a90606401611329565b610196546001600160a01b031633146114cf5760405162461bcd60e51b8152600401610bdc90614dc5565b6114d7613da8565b565b604051631fa66e6d60e11b815261019f600482015260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda906024016110a9565b60405163f237bab360e01b81526101916004820152602481018290526d30b1ba34bb32a7b832b930ba37b960911b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390606401611329565b604051632b49c8db60e11b815261019160048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063569391b6906044015b60006040518083038186803b1580156115c357600080fd5b505af41580156115d7573d6000803e3d6000fd5b5050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116275760405162461bcd60e51b8152600401610bdc90614d03565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116706000805160206152ec833981519152546001600160a01b031690565b6001600160a01b0316146116965760405162461bcd60e51b8152600401610bdc90614d4f565b61169f82613b32565b6116ab82826001613c2e565b5050565b604051637efa2a7d60e11b815261019f60048201526101916024820152604481018390526064810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fdf454fa90608401610c30565b610196546001600160a01b031633146117295760405162461bcd60e51b8152600401610bdc90614dc5565b604051630700d74b60e01b815261019f60048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90630700d74b906044016115ab565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118095760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bdc565b506000805160206152ec83398151915290565b604051630143c90b60e71b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061185a90610191908690600401614f0d565b60206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb3919061466b565b604051630143c90b60e71b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061185a90610191908690600401614ec8565b6002600154141561190b5760405162461bcd60e51b8152600401610bdc90614e47565b600260015560655460ff16156119335760405162461bcd60e51b8152600401610bdc90614d9b565b6040516386a51db560e01b815261019f60048201526101916024820152604481018390526064810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906386a51db59060840160006040518083038186803b15801561199557600080fd5b505af41580156119a9573d6000803e3d6000fd5b50506001805550505050565b60655460ff16156119d85760405162461bcd60e51b8152600401610bdc90614d9b565b604051635fff751760e01b815261019560048201526101916024820152604481018390526064810182905273__$470c7289acb57212a69b34ceb5289ef95c$__90635fff751790608401610c30565b604051639e8c228360e01b815261019160048201526024810182905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90639e8c2283906044016115ab565b6040516303f4d30760e61b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fd34c1c09060440161185a565b60655460ff1615611acd5760405162461bcd60e51b8152600401610bdc90614d9b565b60405163017e493760e31b81526101916004820152602481018390526001600160a01b038216604482015273__$470c7289acb57212a69b34ceb5289ef95c$__90630bf249b890606401610c30565b6040516314e00f7960e21b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__906353803de4906024015b60206040518083038186803b158015611b6c57600080fd5b505af4158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f991906148f4565b604051631e0cbd7f60e11b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90633c197afe90602401611b54565b6060611bee60655460ff1690565b15611c0b5760405162461bcd60e51b8152600401610bdc90614d9b565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca11690918585604051602001611c4c918152647042616e6b60d81b602082015260250190565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401611c91939291909283526020830191909152604082015260600190565b60006040518083038186803b158015611ca957600080fd5b505af4158015611cbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f839190810190614937565b6000611cf360655460ff1690565b15611d105760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415611d335760405162461bcd60e51b8152600401610bdc90614e47565b6002600155604051624ffb0760e61b81526101916004820152602481018490526044810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__906313fec1c09060640160206040518083038186803b158015611d9157600080fd5b505af4158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc991906148f4565b600180559392505050565b6040516303f4d30760e61b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063fd34c1c09060440160206040518083038186803b158015611e2a57600080fd5b505af4158015611e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e62919061466b565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9a57600080fd5b505afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed291906148f4565b60405163f237bab360e01b815290915073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390611f1090610191908690600401614f98565b60206040518083038186803b158015611f2857600080fd5b505af4158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6091906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390611f9b90610191908790600401614ee9565b60206040518083038186803b158015611fb357600080fd5b505af4158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb91906148f4565b11156121245760405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061202f90610191908790600401614f98565b60206040518083038186803b15801561204757600080fd5b505af415801561205b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207f91906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab3906120ba90610191908890600401614ee9565b60206040518083038186803b1580156120d257600080fd5b505af41580156120e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210a91906148f4565b612114919061522f565b905061212081836151e4565b9150505b919050565b610196546001600160a01b031633146121545760405162461bcd60e51b8152600401610bdc90614dc5565b6114d7613e3b565b60008282604051602001612171929190614c80565b60408051601f1981840301815291905280516020909101209392505050565b6040516301ae508b60e11b815260609073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063035ca116906121ce90610191908690600401614ead565b60006040518083038186803b1580156121e657600080fd5b505af41580156121fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb39190810190614937565b60655460ff16156122455760405162461bcd60e51b8152600401610bdc90614d9b565b604051630143c90b60e71b8152339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061228290610191908890600401614f0d565b60206040518083038186803b15801561229a57600080fd5b505af41580156122ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d2919061466b565b6001600160a01b0316146123285760405162461bcd60e51b815260206004820152601d60248201527f506f7274616c3a2073656e646572206e6f74206d61696e7461696e65720000006044820152606401610bdc565b612333838383613e93565b505050565b610196546000906001600160a01b031633146123665760405162461bcd60e51b8152600401610bdc90614dc5565b604051637f3864d560e11b815261019560048201526024810183905273__$470c7289acb57212a69b34ceb5289ef95c$__9063fe70c9aa906044015b60206040518083038186803b1580156123ba57600080fd5b505af41580156123ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906148d7565b6040516385c56cc560e01b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__906385c56cc5906044016123a2565b60655460ff16156124585760405162461bcd60e51b8152600401610bdc90614d9b565b6040516325b0fcff60e11b8152610195600482015261019160248201526044810182905273__$470c7289acb57212a69b34ceb5289ef95c$__90634b61f9fe9060640160006040518083038186803b1580156124b357600080fd5b505af41580156124c7573d6000803e3d6000fd5b505060405163f237bab360e01b8152610191600482015260248101849052635459504560e01b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__925063f237bab3915060640160206040518083038186803b15801561252b57600080fd5b505af415801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906148f4565b6004141561262057604051630143c90b60e71b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190610191908490849063a1e48580906125b29085908590600401614ec8565b60206040518083038186803b1580156125ca57600080fd5b505af41580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612602919061466b565b6040518463ffffffff1660e01b81526004016115ab93929190614f2e565b60405163f237bab360e01b8152610191600482015260248101829052635459504560e01b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561268057600080fd5b505af4158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b891906148f4565b6005141561145657604051630143c90b60e71b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190610191908490849063a1e48580906127079085908590600401614ec8565b60206040518083038186803b15801561271f57600080fd5b505af4158015612733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612757919061466b565b6040518463ffffffff1660e01b815260040161277593929190614f2e565b60006040518083038186803b15801561278d57600080fd5b505af41580156127a1573d6000803e3d6000fd5b50506101a9546040516334e8609360e01b81526001600160a01b0390911660048201526000925073__$3203ba5584f3f9d3a0d8e6013dbecad587$__91506334e860939060240160206040518083038186803b15801561280057600080fd5b505af4158015612814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612838919061466b565b9050806001600160a01b0316631d9a9ea28361019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca1169091876040518363ffffffff1660e01b8152600401612887929190614ead565b60006040518083038186803b15801561289f57600080fd5b505af41580156128b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128db9190810190614937565b604051631fa66e6d60e11b815261019f600482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda9060240160206040518083038186803b15801561292757600080fd5b505af415801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f919061466b565b6040518463ffffffff1660e01b815260040161297d9392919061513d565b600060405180830381600087803b15801561299757600080fd5b505af11580156129ab573d6000803e3d6000fd5b505050506129bb82826001613e93565b604051636b4a768560e01b815261019f600482015261019160248201526044810183905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90636b4a76859060640160206040518083038186803b158015612a1957600080fd5b505af4158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a51919061466b565b6101965460405163f2fde38b60e01b81526001600160a01b03918216600482015291925082169063f2fde38b90602401600060405180830381600087803b158015612a9b57600080fd5b505af1158015612aaf573d6000803e3d6000fd5b50505050505050565b60655460ff1615612adb5760405162461bcd60e51b8152600401610bdc90614d9b565b610196546001600160a01b03163314612b065760405162461bcd60e51b8152600401610bdc90614dc5565b6101a980546001600160a01b0319166001600160a01b0383169081179091556040519081527fe6846a8621a1ef6311f1292f92a0097c76a6ede02a8b870077a8941bb095a2369060200160405180910390a150565b600060026001541415612b805760405162461bcd60e51b8152600401610bdc90614e47565b600260015560655460ff1615612ba85760405162461bcd60e51b8152600401610bdc90614d9b565b604051635c3557c160e11b815273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063b86aaf8290612bed9061019f90610191908a908a908a908a906004016150a0565b60206040518083038186803b158015612c0557600080fd5b505af4158015612c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3d91906148f4565b6001805595945050505050565b6000612c5860655460ff1690565b15612c755760405162461bcd60e51b8152600401610bdc90614d9b565b60026001541415612c985760405162461bcd60e51b8152600401610bdc90614e47565b600260015560405163029dac9760e11b815261019f6004820152610191602482015260448101859052606481018490526084810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063053b592e9060a40160206040518083038186803b158015612d0657600080fd5b505af4158015612d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3e91906148f4565b905060008111611dc95760405162461bcd60e51b815260206004820152601b60248201527f506f7274616c3a20756e73756363657366756c206465706f73697400000000006044820152606401610bdc565b6000610bb3610191836140ee565b6000612dac60655460ff1690565b15612dc95760405162461bcd60e51b8152600401610bdc90614d9b565b604051636ecc896560e01b81526101916004820152602481018490526044810183905273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90636ecc896590606401610f33565b604051632748984160e11b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90634e913082906024016110a9565b60405163538b984f60e01b815261019f60048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__9063538b984f90604401611329565b604051630143c90b60e71b81526101916004820152602481018290526f63757272656e74496e7465726661636560801b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640161185a565b612f1f604051806080016040528060006001600160a01b031681526020016000815260200160008152602001606081525090565b60405163d115f19560e01b815261019560048201526024810183905273__$470c7289acb57212a69b34ceb5289ef95c$__9063d115f1959060440160006040518083038186803b158015612f7257600080fd5b505af4158015612f86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb391908101906149ac565b600054610100900460ff16612fc95760005460ff1615612fcd565b303b155b6130305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bdc565b600054610100900460ff16158015613052576000805461ffff19166101011790555b61305a6141c5565b6130626141f4565b61306a614223565b613072614223565b6001600160a01b0387166130d45760405162461bcd60e51b815260206004820152602360248201527f506f7274616c3a205f474f5645524e414e43452063616e206e6f74206265207a60448201526265726f60e81b6064820152608401610bdc565b6001600160a01b03861661312a5760405162461bcd60e51b815260206004820152601f60248201527f506f7274616c3a205f4f5241434c452063616e206e6f74206265207a65726f006044820152606401610bdc565b6001600160a01b0385166131805760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a205f67415641582063616e206e6f74206265207a65726f00006044820152606401610bdc565b6001600160a01b0384166131e95760405162461bcd60e51b815260206004820152602a60248201527f506f7274616c3a205f44454641554c545f535741505f504f4f4c2063616e206e6044820152696f74206265207a65726f60b01b6064820152608401610bdc565b6001600160a01b0383166132525760405162461bcd60e51b815260206004820152602a60248201527f506f7274616c3a205f44454641554c545f494e544552464143452063616e206e6044820152696f74206265207a65726f60b01b6064820152608401610bdc565b6001600160a01b0382166132ba5760405162461bcd60e51b815260206004820152602960248201527f506f7274616c3a205f44454641554c545f4c505f544f4b454e2063616e206e6f60448201526874206265207a65726f60b81b6064820152608401610bdc565b61019680546001600160a01b0389166001600160a01b03199182168117909255610195805490911690911790556132f56303c26700426151e4565b61019a556000610197819055610198556402540be40061019955604051630105835b60e41b815261019560048201526101916024820152600560448201526001606482015273__$470c7289acb57212a69b34ceb5289ef95c$__9063105835b09060840160006040518083038186803b15801561337157600080fd5b505af4158015613385573d6000803e3d6000fd5b50506101a980546001600160a01b03199081166001600160a01b0388811691909117909255610199546101a681905561019f805483168b85161790556101a2805483168c85161790556101a0805483168a85161790556101a18054909216928716929092179055603c6101a355623d09006101a45564012a05f2006101a5556103e8925061341591506002615210565b61341f91906151fc565b6101a7556101995460649061343590600a615210565b61343f91906151fc565b6101a85561019b80546001600160a01b031916905560016101aa8190556040519081527ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a18015612aaf576000805461ff001916905550505050505050565b61352360405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50604080516101408101825261019f546001600160a01b0390811682526101a054811660208301526101a1548116928201929092526101a25490911660608201526101a35460808201526101a45460a08201526101a55460c08201526101a65460e08201526101a7546101008201526101a85461012082015290565b6040516343dbfc0560e01b815261019560048201526024810182905260009073__$470c7289acb57212a69b34ceb5289ef95c$__906343dbfc05906044016123a2565b60655460ff16156136055760405162461bcd60e51b8152600401610bdc90614d9b565b610196546001600160a01b031633146136305760405162461bcd60e51b8152600401610bdc90614dc5565b61019173__$71e976e6d346a5055cfd7fe2380e485d9d$__63035ca11690918484604051602001613662929190614c80565b60408051601f198184030181529082905280516020909101206001600160e01b031960e085901b1682526136999291600401614ead565b60006040518083038186803b1580156136b157600080fd5b505af41580156136c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136ed9190810190614937565b511561373b5760405162461bcd60e51b815260206004820152601c60248201527f504f5254414c3a206e616d6520616c726561647920636c61696d6564000000006044820152606401610bdc565b6040516305fc644760e11b815273__$470c7289acb57212a69b34ceb5289ef95c$__90630bf8c88e9061377e9061019590899089908990899089906004016150ea565b60006040518083038186803b15801561379657600080fd5b505af41580156137aa573d6000803e3d6000fd5b505050505050505050565b60405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab3906137f390610191908690600401614ee9565b60206040518083038186803b15801561380b57600080fd5b505af415801561381f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384391906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061387e90610191908790600401614f98565b60206040518083038186803b15801561389657600080fd5b505af41580156138aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ce91906148f4565b11156139f45760405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061390f90610191908690600401614ee9565b60206040518083038186803b15801561392757600080fd5b505af415801561393b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395f91906148f4565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061399a90610191908790600401614f98565b60206040518083038186803b1580156139b257600080fd5b505af41580156139c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ea91906148f4565b610bb3919061522f565b506000919050565b60405163f237bab360e01b8152610191600482015260248101829052677042616c616e636560c01b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390606401611329565b60008181526101916020908152604091829020805483518184028101840190945280845260609392830182828015613aa757602002820191906000526020600020905b815481526020019060010190808311613a93575b50505050509050919050565b6040516320cd480560e21b8152610195600482015260009073__$470c7289acb57212a69b34ceb5289ef95c$__90638335201490602401611b54565b604051630f272bc760e21b815261019160048201526024810182905260009073__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633c9caf1c9060440161185a565b6001600160a01b038116613b4557600080fd5b604051633680b40760e01b815261019560048201526001600160a01b038216602482015273__$470c7289acb57212a69b34ceb5289ef95c$__90633680b4079060440160206040518083038186803b158015613ba057600080fd5b505af4158015613bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd891906148d7565b6114565760405162461bcd60e51b815260206004820152602160248201527f506f7274616c3a206973206e6f7420616c6c6f77656420746f207570677261646044820152606560f81b6064820152608401610bdc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613c61576123338361424a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9a57600080fd5b505afa925050508015613cca575060408051601f3d908101601f19168201909252613cc7918101906148f4565b60015b613d2d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610bdc565b6000805160206152ec8339815191528114613d9c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610bdc565b506123338383836142e6565b60655460ff16613df15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bdc565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615613e5e5760405162461bcd60e51b8152600401610bdc90614d9b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613e1e3390565b604051631fa66e6d60e11b815261019f600482015273__$3203ba5584f3f9d3a0d8e6013dbecad587$__90633f4cdcda9060240160206040518083038186803b158015613edf57600080fd5b505af4158015613ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f17919061466b565b6040516327b03e0160e21b81526001600160a01b0384811660048301526024820186905283151560448301529190911690639ec0f80490606401600060405180830381600087803b158015613f6b57600080fd5b505af1158015613f7f573d6000803e3d6000fd5b505050508015613ff25760405163dff34ff160e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190613fc6906101919087908790600401614f60565b60006040518083038186803b158015613fde57600080fd5b505af4158015612aaf573d6000803e3d6000fd5b604051630143c90b60e71b81526101916004820152602481018490526f63757272656e74496e7465726661636560801b60448201526001600160a01b0383169073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640160206040518083038186803b15801561406957600080fd5b505af415801561407d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a1919061466b565b6001600160a01b031614156123335760405163dff34ff160e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff190613fc690610191908790600090600401614f60565b60006107086141006201518042615272565b11158015610f8357506141156107084261522f565b60405163f237bab360e01b815260048101859052602481018490527406f7261636c6555706461746554696d655374616d7605c1b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561418557600080fd5b505af4158015614199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bd91906148f4565b109392505050565b600054610100900460ff166141ec5760405162461bcd60e51b8152600401610bdc90614dfc565b6114d7614311565b600054610100900460ff1661421b5760405162461bcd60e51b8152600401610bdc90614dfc565b6114d761433e565b600054610100900460ff166114d75760405162461bcd60e51b8152600401610bdc90614dfc565b6001600160a01b0381163b6142b75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610bdc565b6000805160206152ec83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6142ef83614371565b6000825111806142fc5750805b156123335761430b83836143b1565b50505050565b600054610100900460ff166143385760405162461bcd60e51b8152600401610bdc90614dfc565b60018055565b600054610100900460ff166143655760405162461bcd60e51b8152600401610bdc90614dfc565b6065805460ff19169055565b61437a8161424a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6144195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610bdc565b600080846001600160a01b0316846040516144349190614c90565b600060405180830381855af49150503d806000811461446f576040519150601f19603f3d011682016040523d82523d6000602084013e614474565b606091505b509150915061449c828260405180606001604052806027815260200161530c602791396144a5565b95945050505050565b606083156144b4575081610f83565b8251156144c45782518084602001fd5b8160405162461bcd60e51b8152600401610bdc9190614cf0565b600082601f8301126144ef57600080fd5b813560206001600160401b0382111561450a5761450a6152b2565b8160051b61451982820161518d565b83815282810190868401838801850189101561453457600080fd5b600093505b85841015614557578035835260019390930192918401918401614539565b50979650505050505050565b60008083601f84011261457557600080fd5b5081356001600160401b0381111561458c57600080fd5b6020830191508360208285010111156145a457600080fd5b9250929050565b600082601f8301126145bc57600080fd5b81356145cf6145ca826151bd565b61518d565b8181528460208386010111156145e457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261461257600080fd5b81516146206145ca826151bd565b81815284602083860101111561463557600080fd5b614646826020830160208701615246565b949350505050565b60006020828403121561466057600080fd5b8135610f83816152c8565b60006020828403121561467d57600080fd5b8151610f83816152c8565b60008060008060008060c087890312156146a157600080fd5b86356146ac816152c8565b955060208701356146bc816152c8565b945060408701356146cc816152c8565b935060608701356146dc816152c8565b925060808701356146ec816152c8565b915060a08701356146fc816152c8565b809150509295509295509295565b600080600080600060a0868803121561472257600080fd5b853561472d816152c8565b9450602086013561473d816152c8565b935060408601356001600160401b038082111561475957600080fd5b61476589838a016144de565b9450606088013591508082111561477b57600080fd5b61478789838a016144de565b9350608088013591508082111561479d57600080fd5b506147aa888289016145ab565b9150509295509295909350565b600080600080600060a086880312156147cf57600080fd5b85356147da816152c8565b945060208601356147ea816152c8565b9350604086013592506060860135915060808601356001600160401b0381111561481357600080fd5b6147aa888289016145ab565b6000806040838503121561483257600080fd5b823561483d816152c8565b915060208301356001600160401b0381111561485857600080fd5b614864858286016145ab565b9150509250929050565b60008060008060006080868803121561488657600080fd5b8535614891816152c8565b9450602086013593506040860135925060608601356001600160401b038111156148ba57600080fd5b6148c688828901614563565b969995985093965092949392505050565b6000602082840312156148e957600080fd5b8151610f83816152dd565b60006020828403121561490657600080fd5b5051919050565b60006020828403121561491f57600080fd5b81356001600160e01b031981168114610f8357600080fd5b60006020828403121561494957600080fd5b81516001600160401b0381111561495f57600080fd5b61464684828501614601565b6000806020838503121561497e57600080fd5b82356001600160401b0381111561499457600080fd5b6149a085828601614563565b90969095509350505050565b6000602082840312156149be57600080fd5b81516001600160401b03808211156149d557600080fd5b90830190608082860312156149e957600080fd5b604051608081018181108382111715614a0457614a046152b2565b6040528251614a12816152c8565b808252506020830151602082015260408301516040820152606083015182811115614a3c57600080fd5b614a4887828601614601565b60608301525095945050505050565b600060208284031215614a6957600080fd5b5035919050565b60008060408385031215614a8357600080fd5b823591506020830135614a95816152c8565b809150509250929050565b600080600060608486031215614ab557600080fd5b833592506020840135614ac7816152c8565b91506040840135614ad7816152dd565b809150509250925092565b60008060408385031215614af557600080fd5b505080516020909101519092909150565b60008060408385031215614b1957600080fd5b50508035926020909101359150565b60008060008060808587031215614b3e57600080fd5b843593506020850135925060408501356001600160401b0380821115614b6357600080fd5b614b6f888389016144de565b93506060870135915080821115614b8557600080fd5b50614b92878288016144de565b91505092959194509250565b600080600060608486031215614bb357600080fd5b833592506020840135915060408401356001600160401b03811115614bd757600080fd5b614be3868287016145ab565b9150509250925092565b600080600060608486031215614c0257600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015614c4957815187529582019590820190600101614c2d565b509495945050505050565b60008151808452614c6c816020860160208601615246565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251614ca2818460208701615246565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015614ce457835183529284019291840191600101614cc8565b50909695505050505050565b602081526000610f836020830184614c54565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f506f7274616c3a2073656e646572206e6f7420474f5645524e414e4345000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b848152836020820152826040820152608060608201526000614ea36080830184614c54565b9695505050505050565b9182526020820152636e616d6560e01b604082015260600190565b91825260208201526921a7a72a2927a62622a960b11b604082015260600190565b91825260208201526c756e636c61696d65644665657360981b604082015260600190565b91825260208201526936b0b4b73a30b4b732b960b11b604082015260600190565b92835260208301919091526936b0b4b73a30b4b732b960b11b60408301526001600160a01b0316606082015260800190565b92835260208301919091526f63757272656e74496e7465726661636560801b60408301526001600160a01b0316606082015260800190565b918252602082015266737572706c757360c81b604082015260600190565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160808084015261464660a0840182614c54565b81516001600160a01b031681526101408101602083015161502360208401826001600160a01b03169052565b50604083015161503e60408401826001600160a01b03169052565b50606083015161505960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b86815285602082015284604082015283606082015260c0608082015260006150cb60c0830185614c19565b82810360a08401526150dd8185614c19565b9998505050505050505050565b86815260018060a01b038616602082015284604082015283606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b8381526060602082015260006151566060830185614c54565b905060018060a01b0383166040830152949350505050565b83815282602082015260606040820152600061449c6060830184614c54565b604051601f8201601f191681016001600160401b03811182821017156151b5576151b56152b2565b604052919050565b60006001600160401b038211156151d6576151d66152b2565b50601f01601f191660200190565b600082198211156151f7576151f7615286565b500190565b60008261520b5761520b61529c565b500490565b600081600019048311821515161561522a5761522a615286565b500290565b60008282101561524157615241615286565b500390565b60005b83811015615261578181015183820152602001615249565b8381111561430b5750506000910152565b6000826152815761528161529c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461145657600080fd5b801515811461145657600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f73e1e6ac52cbbd22a67c9c4c8a61b15bac867ea73e3afb18ea7515b8a3373b964736f6c63430008070033",
  "devdoc": {
    "details": "refer to DataStoreUtils before reviewingrefer to GeodeUtils > Includes the logic for management of Geode Portal with Senate.refer to StakeUtils > Includes the logic for staking functionality with Withdrawal Pools",
    "events": {
      "OperationFeeUpdated(uint256)": {
        "details": "following events are added to help fellow devs with better ABIscontract size is not affected"
      }
    },
    "kind": "dev",
    "methods": {
      "accumulatedFee(uint256,uint256)": {
        "details": "for planet's maintainer's accumulatedFee (planetId,planetId)"
      },
      "approveProposal(uint256)": {
        "details": "only Senate is checked in GEODE.approveProposal"
      },
      "changeIdCONTROLLER(uint256,address)": {
        "details": "this action can not be overwritten by the old CONTROLLER after set."
      },
      "claimSurplus(uint256)": {
        "returns": {
          "success": "if transfer of funds is succesful"
        }
      },
      "deactivateOperator(uint256,uint256)": {
        "details": "when activationExpiration is up, operator will NOT be able generate fees from pool, it is expected for them to return the assets as surplus with payDebt function_deactivateAfter seconds until activation expires,"
      },
      "getIdsByType(uint256)": {
        "returns": {
          "_0": "allIdsByType array of DatastoreUtilsLib"
        }
      },
      "getMaintainerFromId(uint256)": {
        "details": "maintainer operates the id: claims the fee, pays the debt, signs the messages for verification etc."
      },
      "isOracleActive(uint256)": {
        "details": "returns false after oracle update for the given pool."
      },
      "newProposal(address,uint256,uint256,bytes)": {
        "details": "\"name already claimed check\" is being made here as override can be a wanted feature in the future",
        "params": {
          "_CONTROLLER": "address of the",
          "_name": "unique, id = keccak(name)",
          "_proposalDuration": "proposal can not approved after expiration but can be override",
          "_type": "of the proposal is seperator between different user experiences it can be upgrade proposal, senate election, operator/planet proposal etc."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payDebt(uint256,uint256)": {
        "details": "msg.value-debt is put to surplus, this can be used to increase surplus without minting new tokens!! useful to claim fees"
      },
      "planetCurrentInterface(uint256)": {
        "details": "not reliable => refer setPlanetInterface"
      },
      "planetDebt(uint256)": {
        "returns": {
          "debtInAvax": "is the current debt amount that pays for fees and provides a stable price to withdrawalPool"
        }
      },
      "planetOraclePrice(uint256)": {
        "details": "also the *mint price* as gAVAX.pricePerShare(id)TotalStakedAvax can be estimated by: TotalSupply(id) * planetOraclePrice(id)"
      },
      "planetPBalance(uint256)": {
        "returns": {
          "_0": "debtInAvax is the first guess that provides a withdrtawalPool price that is between limits of slippage when buyback&burn."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "reportOracle(uint256,uint256,uint256[],uint256[])": {
        "details": "simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)",
        "params": {
          "_opIds": "all ids of all operators who still collect fees.",
          "_pBalanceIncreases": "the amount of avax that has been gained by the operator as POS rewards, respective to _opIds"
        },
        "returns": {
          "price": ": new price after sanitychecks, might be useful if onchain oracle in the future"
        }
      },
      "setMaxOperationFee(uint256)": {
        "details": "onlySenate CHECKED inside"
      },
      "setPBank(uint256,uint256,bytes)": {
        "details": "this logic makes the operator-planet interactions more reliable and transparent when used by oracle to detect the token flow between different subchains."
      },
      "setPlanetInterface(uint256,address,bool)": {
        "params": {
          "_Interface": "address of the new gAVAX ERC1155 interface for given ID",
          "isSet": "true if new interface is going to be set, false if old interface is being unset"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Geode Finance Avalanche Portal: Avax Liquid Staking Geode Portal is a first of its kind Decentralized Minter that builds a trustless staking Ecosystem for any service provider.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_INTERFACE()": {
        "notice": "Default erc1155 interface, currently allows every id to be act as ERC20"
      },
      "accumulatedFee(uint256,uint256)": {
        "notice": "amount of fee (as AVAX) that has been distributed to the maintainer so far"
      },
      "activateOperator(uint256,uint256)": {
        "notice": "When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and creating validators"
      },
      "changeIdCONTROLLER(uint256,address)": {
        "notice": "only CONTROLLER is allowed to change the CONTROLLER of the pool check is done inside the library."
      },
      "changeIdMaintainer(uint256,address)": {
        "notice": "only CONTROLLER is allowed to change the maintainer of the pool check is done inside the library."
      },
      "claimFee(uint256,uint256)": {
        "notice": "anyone can call this function, but it sends AVAX only to maintainer.reverts if there are not enough surplus."
      },
      "claimSurplus(uint256)": {
        "notice": "operators can not claim fees if: expired OR deactivatedcurrent unclaimedFees are not allowed to be claimed as surplus"
      },
      "deactivateOperator(uint256,uint256)": {
        "notice": "deactivates an old operator for the given staking pool"
      },
      "getCONTROLLERFromId(uint256)": {
        "notice": "returns address(0) for empty ids, mandatory"
      },
      "getIdFromName(string)": {
        "notice": "id is keccak(name)"
      },
      "getMaintainerFeeFromId(uint256)": {
        "notice": "even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum"
      },
      "getMaintainerFromId(uint256)": {
        "notice": "returns address(0) if NOT set, NOT mandatory"
      },
      "getNameFromId(uint256)": {
        "notice": "returns bytes(0) for empty ids, mandatory"
      },
      "getProposal(uint256)": {
        "notice": "** PROPOSALS **"
      },
      "getSenate()": {
        "notice": "** GOVERNANCE GETTERS **"
      },
      "isOracleActive(uint256)": {
        "notice": "Oracle is only allowed for a period every day & pool operations are stopped then"
      },
      "isStakingPausedForPool(uint256)": {
        "notice": "** Staking Pools **"
      },
      "newProposal(address,uint256,uint256,bytes)": {
        "notice": "creates a new proposal as id = keccak(name),"
      },
      "operatorActivationExpiration(uint256,uint256)": {
        "notice": "** Operator GETTERS ***"
      },
      "pauseStakingForPool(uint256)": {
        "notice": "when a pool is paused there are NO new funds to be minted, NO surplus."
      },
      "payDebt(uint256,uint256)": {
        "notice": "An Operator is expected to pay for the DEBT of a staking pool"
      },
      "planetActiveOperator(uint256)": {
        "notice": "ActiveOperator can claim the surplus of the given staking pool to create validators,There can be only one active operator for an ID. However old active operators can still continue operating until activationExpiration timestamp and acquire fees.*"
      },
      "planetClaimableSurplus(uint256)": {
        "notice": "total amount of staked Avax that can be claimed, as Fees are not claimable to be staked"
      },
      "planetDebt(uint256)": {
        "notice": "When a debt is calculated, it also takes the unclaimed Fees into consideration for the Planet since payDebt pays that -if it is more than surplus- first and then covers the withdrawal Pool."
      },
      "planetLPToken(uint256)": {
        "notice": "LP token of the Withdrawal pool of given ID"
      },
      "planetOraclePrice(uint256)": {
        "notice": "oraclePrice is a reliable source for any contract operation on-chain"
      },
      "planetPBalance(uint256)": {
        "notice": "Debt of the planet is found by approaching to it's price within WithdrawalPool"
      },
      "planetSurplus(uint256)": {
        "notice": "total amount of staked Avax that has been waiting to be staked"
      },
      "planetWithdrawalPool(uint256)": {
        "notice": "pool that maintains the price of the staking derivative"
      },
      "reportOracle(uint256,uint256,uint256[],uint256[])": {
        "notice": "only Oracle can report a new price. However price is not purely calculated by it. the balance on P subchain is estimated by it, including the unrealized staking rewards. Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds."
      },
      "setOperationFee(uint256)": {
        "notice": "** GOVERNANCE/SENATE SETTERS **"
      },
      "setPBank(uint256,uint256,bytes)": {
        "notice": "pBank is the only address on the P subchain that interacts with tokens that is claimed by operator as surplus."
      },
      "setPlanetInterface(uint256,address,bool)": {
        "notice": "if a planet did not unset an old Interface, before setting a new one;  & if new interface is unsetted, the old one will not be remembered!!  use gAVAX.isInterface(interface,  id)"
      }
    },
    "notice": "TYPE: seperates the proposals and related functionality between different ID types. * RESERVED TYPES on Portalv1: * * TYPE 4: Operator * * TYPE 5: Planet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 519,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 522,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 847,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 891,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2122,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 743,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 832,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2226,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1057,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1003,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 501,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 721,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5025,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "DATASTORE",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(DataStore)10566_storage"
      },
      {
        "astId": 5028,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "GEODE",
        "offset": 0,
        "slot": "405",
        "type": "t_struct(Universe)10815_storage"
      },
      {
        "astId": 5031,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "STAKEPOOL",
        "offset": 0,
        "slot": "415",
        "type": "t_struct(StakePool)11648_storage"
      },
      {
        "astId": 5034,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "DEFAULT_INTERFACE",
        "offset": 0,
        "slot": "425",
        "type": "t_address"
      },
      {
        "astId": 5036,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "CONTRACT_VERSION",
        "offset": 0,
        "slot": "426",
        "type": "t_uint256"
      },
      {
        "astId": 6515,
        "contract": "contracts/Portal/Portal.sol:Portal",
        "label": "__gap",
        "offset": 0,
        "slot": "427",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)10789_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GeodeUtils.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)10789_storage"
      },
      "t_struct(DataStore)10566_storage": {
        "encoding": "inplace",
        "label": "struct DataStoreUtils.DataStore",
        "members": [
          {
            "astId": 10553,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "allIdsByType",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 10557,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "uintData",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 10561,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "bytesData",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes_storage)"
          },
          {
            "astId": 10565,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "addressData",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_address)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)10789_storage": {
        "encoding": "inplace",
        "label": "struct GeodeUtils.Proposal",
        "members": [
          {
            "astId": 10782,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "CONTROLLER",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10784,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "TYPE",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10786,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "deadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10788,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakePool)11648_storage": {
        "encoding": "inplace",
        "label": "struct StakeUtils.StakePool",
        "members": [
          {
            "astId": 11629,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "gAVAX",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11631,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "DEFAULT_SWAP_POOL",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11633,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "DEFAULT_LP_TOKEN",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11635,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "ORACLE",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11637,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "DEFAULT_A",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11639,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "DEFAULT_FEE",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11641,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "DEFAULT_ADMIN_FEE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11643,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "FEE_DENOMINATOR",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11645,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "PERIOD_PRICE_INCREASE_LIMIT",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 11647,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "MAX_MAINTAINER_FEE",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Universe)10815_storage": {
        "encoding": "inplace",
        "label": "struct GeodeUtils.Universe",
        "members": [
          {
            "astId": 10791,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "SENATE",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10793,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "GOVERNANCE",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10795,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "OPERATION_FEE",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10797,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "MAX_OPERATION_FEE",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10799,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "FEE_DENOMINATOR",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10801,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "SENATE_EXPIRE_TIMESTAMP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10803,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "approvedUpgrade",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 10805,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "_electorCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10809,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "_electorTypes",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10814,
            "contract": "contracts/Portal/Portal.sol:Portal",
            "label": "_proposalForId",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(Proposal)10789_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
