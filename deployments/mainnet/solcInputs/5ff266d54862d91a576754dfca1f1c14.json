{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20InterfaceUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IERC20InterfaceUpgradable is IERC20Upgradeable {\r\n  function initialize(\r\n    uint256 id_,\r\n    string memory name_,\r\n    address _1155\r\n  ) external;\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    returns (bool);\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    returns (bool);\r\n\r\n  function pricePerShare() external view returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/Portal/Portal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n//   ██████╗ ███████╗ ██████╗ ██████╗ ███████╗    ██████╗  ██████╗ ██████╗ ████████╗ █████╗ ██╗\r\n//  ██╔════╝ ██╔════╝██╔═══██╗██╔══██╗██╔════╝    ██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔══██╗██║\r\n//  ██║  ███╗█████╗  ██║   ██║██║  ██║█████╗      ██████╔╝██║   ██║██████╔╝   ██║   ███████║██║\r\n//  ██║   ██║██╔══╝  ██║   ██║██║  ██║██╔══╝      ██╔═══╝ ██║   ██║██╔══██╗   ██║   ██╔══██║██║\r\n//  ╚██████╔╝███████╗╚██████╔╝██████╔╝███████╗    ██║     ╚██████╔╝██║  ██║   ██║   ██║  ██║███████╗\r\n//   ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝\r\n//\r\n\r\npragma solidity =0.8.7;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./utils/DataStoreLib.sol\";\r\nimport \"./utils/GeodeUtilsLib.sol\";\r\nimport \"./utils/StakeUtilsLib.sol\";\r\nimport \"../interfaces/IPortal.sol\";\r\nimport \"../interfaces/IERC20InterfaceUpgradable.sol\";\r\n\r\n/**\r\n * @title Geode Finance Avalanche Portal: Avax Liquid Staking\r\n *\r\n * Geode Portal is a first of its kind Decentralized Minter that builds\r\n * a trustless staking Ecosystem for any service provider.\r\n *\r\n * @dev refer to DataStoreUtils before reviewing\r\n * @dev refer to GeodeUtils > Includes the logic for management of Geode Portal with Senate.\r\n * @dev refer to StakeUtils > Includes the logic for staking functionality with Withdrawal Pools\r\n * @notice TYPE: seperates the proposals and related functionality between different ID types.\r\n * * RESERVED TYPES on Portalv1:\r\n * * * TYPE 4: Operator\r\n * * * TYPE 5: Planet\r\n */\r\n\r\ncontract Portal is\r\n  IPortal,\r\n  ReentrancyGuardUpgradeable,\r\n  PausableUpgradeable,\r\n  ERC1155HolderUpgradeable,\r\n  UUPSUpgradeable\r\n{\r\n  /**\r\n   * @dev following events are added to help fellow devs with better ABIs\r\n   * @dev contract size is not affected\r\n   */\r\n  // GeodeUtils Events\r\n  event OperationFeeUpdated(uint256 newFee);\r\n  event MaxOperationFeeUpdated(uint256 newMaxFee);\r\n  event ControllerChanged(uint256 id, address newCONTROLLER);\r\n  event Proposed(\r\n    uint256 id,\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _duration\r\n  );\r\n  event ProposalApproved(uint256 id);\r\n  event NewElectorType(uint256 _type);\r\n  event Vote(uint256 proposalId, uint256 electorId);\r\n  event NewSenate(address senate, uint256 senate_expire_timestamp);\r\n\r\n  // StakeUtils Events\r\n  event MaintainerFeeUpdated(uint256 id, uint256 fee);\r\n  event MaxMaintainerFeeUpdated(uint256 newMaxFee);\r\n  event PriceChanged(uint256 id, uint256 pricePerShare);\r\n  event OracleUpdate(\r\n    uint256 id,\r\n    uint256 price,\r\n    uint256 newPBalance,\r\n    uint256 distributedFeeTotal,\r\n    uint256 updateTimeStamp\r\n  );\r\n  event OperatorActivated(uint256 id, uint256 activeOperator);\r\n  event OperatorDeactivated(uint256 id, uint256 deactiveOperator);\r\n  event debtPaid(uint256 id, uint256 operatorId, uint256 paidDebt);\r\n  event SurplusClaimed(uint256 id, uint256 newSurplus);\r\n  event FeeClaimed(uint256 id, uint256 claimerId, uint256 newSurplus);\r\n  event PausedPool(uint256 id);\r\n  event UnpausedPool(uint256 id);\r\n\r\n  // Portal Events\r\n  event ContractVersionSet(uint256 version);\r\n  event DefaultInterfaceSet(address DefaultInterface);\r\n  event pBankSet(uint256 operatorId, uint256 planetId, bytes pBank);\r\n\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n  using GeodeUtils for GeodeUtils.Universe;\r\n  using StakeUtils for StakeUtils.StakePool;\r\n\r\n  DataStoreUtils.DataStore private DATASTORE;\r\n  GeodeUtils.Universe private GEODE;\r\n  StakeUtils.StakePool private STAKEPOOL;\r\n\r\n  /// @notice Default erc1155 interface, currently allows every id to be act as ERC20\r\n  address public DEFAULT_INTERFACE;\r\n  uint256 public CONTRACT_VERSION;\r\n\r\n  function initialize(\r\n    address _GOVERNANCE,\r\n    address _ORACLE,\r\n    address _gAVAX,\r\n    address _DEFAULT_SWAP_POOL,\r\n    address _DEFAULT_INTERFACE,\r\n    address _DEFAULT_LP_TOKEN\r\n  ) public virtual override initializer {\r\n    __ReentrancyGuard_init();\r\n    __Pausable_init();\r\n    __ERC1155Holder_init();\r\n    __UUPSUpgradeable_init();\r\n\r\n    require(_GOVERNANCE != address(0), \"Portal: _GOVERNANCE can not be zero\");\r\n    require(_ORACLE != address(0), \"Portal: _ORACLE can not be zero\");\r\n    require(_gAVAX != address(0), \"Portal: _gAVAX can not be zero\");\r\n    require(\r\n      _DEFAULT_SWAP_POOL != address(0),\r\n      \"Portal: _DEFAULT_SWAP_POOL can not be zero\"\r\n    );\r\n    require(\r\n      _DEFAULT_INTERFACE != address(0),\r\n      \"Portal: _DEFAULT_INTERFACE can not be zero\"\r\n    );\r\n    require(\r\n      _DEFAULT_LP_TOKEN != address(0),\r\n      \"Portal: _DEFAULT_LP_TOKEN can not be zero\"\r\n    );\r\n    /**\r\n     * since it is deployment of v1 contracts senate is currently the governance\r\n     * A vote can be proposed when electorCount > 4\r\n     */\r\n    GEODE.GOVERNANCE = _GOVERNANCE;\r\n    GEODE.SENATE = GEODE.GOVERNANCE;\r\n    GEODE.SENATE_EXPIRE_TIMESTAMP =\r\n      block.timestamp +\r\n      GeodeUtils.MAX_SENATE_PERIOD;\r\n    GEODE.OPERATION_FEE = 0;\r\n    GEODE.MAX_OPERATION_FEE = 0;\r\n    GEODE.FEE_DENOMINATOR = 10**10;\r\n    // allow Planets to vote for Senate\r\n    GEODE.setElectorType(DATASTORE, 5, true);\r\n\r\n    DEFAULT_INTERFACE = _DEFAULT_INTERFACE;\r\n\r\n    STAKEPOOL.FEE_DENOMINATOR = GEODE.FEE_DENOMINATOR;\r\n    STAKEPOOL.gAVAX = _gAVAX;\r\n    STAKEPOOL.ORACLE = _ORACLE;\r\n    STAKEPOOL.DEFAULT_SWAP_POOL = _DEFAULT_SWAP_POOL;\r\n    STAKEPOOL.DEFAULT_LP_TOKEN = _DEFAULT_LP_TOKEN;\r\n    STAKEPOOL.DEFAULT_A = 60;\r\n    STAKEPOOL.DEFAULT_FEE = 4e6;\r\n    STAKEPOOL.DEFAULT_ADMIN_FEE = 5e9;\r\n    STAKEPOOL.PERIOD_PRICE_INCREASE_LIMIT = (2 * GEODE.FEE_DENOMINATOR) / 1e3; // 0.2%\r\n    STAKEPOOL.MAX_MAINTAINER_FEE = (10 * GEODE.FEE_DENOMINATOR) / 1e2; //10%\r\n\r\n    GEODE.approvedUpgrade = address(0);\r\n\r\n    CONTRACT_VERSION = 1;\r\n    emit ContractVersionSet(1);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(msg.sender == GEODE.GOVERNANCE, \"Portal: sender not GOVERNANCE\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *                                    ** Contract specific functions **\r\n   **/\r\n\r\n  ///@dev required by the OZ UUPS module\r\n  function _authorizeUpgrade(address proposed_implementation)\r\n    internal\r\n    virtual\r\n    override\r\n  {\r\n    require(proposed_implementation != address(0));\r\n    require(\r\n      GEODE.isUpgradeAllowed(proposed_implementation),\r\n      \"Portal: is not allowed to upgrade\"\r\n    );\r\n  }\r\n\r\n  function pause() external virtual override onlyGovernance {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external virtual override onlyGovernance {\r\n    _unpause();\r\n  }\r\n\r\n  function getVersion() external view virtual override returns (uint256) {\r\n    return CONTRACT_VERSION;\r\n  }\r\n\r\n  function gAVAX() external view virtual override returns (address) {\r\n    return address(STAKEPOOL.getgAVAX());\r\n  }\r\n\r\n  /**\r\n   *                                          ** GETTERS **\r\n   */\r\n\r\n  /**\r\n   *                                    ** GOVERNANCE GETTERS **\r\n   */\r\n\r\n  function getSenate() external view virtual override returns (address) {\r\n    return GEODE.getSenate();\r\n  }\r\n\r\n  function getGovernance() external view virtual override returns (address) {\r\n    return GEODE.getGovernance();\r\n  }\r\n\r\n  function getOperationFee() external view virtual override returns (uint256) {\r\n    return GEODE.getOperationFee();\r\n  }\r\n\r\n  function getMaxOperationFee()\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return GEODE.getMaxOperationFee();\r\n  }\r\n\r\n  function getSenateExpireTimestamp()\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return GEODE.getSenateExpireTimestamp();\r\n  }\r\n\r\n  function getFeeDenominator()\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return GEODE.FEE_DENOMINATOR;\r\n  }\r\n\r\n  function getStakePoolParams()\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (StakeUtils.StakePool memory)\r\n  {\r\n    return STAKEPOOL;\r\n  }\r\n\r\n  /*\r\n   *                                          **ID GETTERS **\r\n   */\r\n\r\n  /// @return allIdsByType array of DatastoreUtilsLib\r\n  function getIdsByType(uint256 _type)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256[] memory)\r\n  {\r\n    return DATASTORE.allIdsByType[_type];\r\n  }\r\n\r\n  /// @notice id is keccak(name)\r\n  function getIdFromName(string calldata _name)\r\n    external\r\n    pure\r\n    virtual\r\n    override\r\n    returns (uint256 _id)\r\n  {\r\n    _id = uint256(keccak256(abi.encodePacked(_name)));\r\n  }\r\n\r\n  /// @notice returns bytes(0) for empty ids, mandatory\r\n  function getNameFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (bytes memory)\r\n  {\r\n    return DATASTORE.readBytesForId(_id, \"name\");\r\n  }\r\n\r\n  /// @notice returns address(0) for empty ids, mandatory\r\n  function getCONTROLLERFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return DATASTORE.readAddressForId(_id, \"CONTROLLER\");\r\n  }\r\n\r\n  /**\r\n   * @notice returns address(0) if NOT set, NOT mandatory\r\n   * @dev maintainer operates the id: claims the fee, pays the debt, signs the messages for verification etc.\r\n   */\r\n  function getMaintainerFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return DATASTORE.readAddressForId(_id, \"maintainer\");\r\n  }\r\n\r\n  /// @notice even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\r\n  function getMaintainerFeeFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return STAKEPOOL.getMaintainerFee(DATASTORE, _id);\r\n  }\r\n\r\n  /**\r\n   *                                          ** Planet GETTERS **\r\n   **/\r\n\r\n  /// @dev not reliable, only shows the latest gAvaxInterface intended use for frontends etc. refer setPlanetInterface\r\n  function planetCurrentInterface(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return DATASTORE.readAddressForId(_id, \"currentInterface\");\r\n  }\r\n\r\n  /// @notice pool that maintains the price of the staking derivative\r\n  function planetWithdrawalPool(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return address(StakeUtils.withdrawalPoolById(DATASTORE, _id));\r\n  }\r\n\r\n  /// @notice LP token of the Withdrawal pool of given ID\r\n  function planetLPToken(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return address(StakeUtils.LPTokenById(DATASTORE, _id));\r\n  }\r\n\r\n  /**\r\n   * @notice ActiveOperator can claim the surplus of the given staking pool to create validators,\r\n   * @notice There can be only one active operator for an ID. However old active operators can still\r\n   * continue operating until activationExpiration timestamp and acquire fees.\r\n   **/\r\n  function planetActiveOperator(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return DATASTORE.readUintForId(_id, \"activeOperator\");\r\n  }\r\n\r\n  /**\r\n   *                                              ** Operator GETTERS **\r\n   **/\r\n\r\n  function operatorActivationExpiration(uint256 planetId, uint256 operatorId)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return\r\n      DATASTORE.readUintForId(\r\n        planetId,\r\n        bytes32(keccak256(abi.encodePacked(operatorId, \"activationExpiration\")))\r\n      );\r\n  }\r\n\r\n  /**\r\n   *                                          ** SETTERS **\r\n   */\r\n\r\n  /**\r\n   * @notice only CONTROLLER is allowed to change the CONTROLLER of the pool\r\n   * check is done inside the library.\r\n   * @dev this action can not be overwritten by the old CONTROLLER after set.\r\n   */\r\n  function changeIdCONTROLLER(uint256 _id, address _newCONTROLLER)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n  {\r\n    GeodeUtils.changeIdCONTROLLER(DATASTORE, _id, _newCONTROLLER);\r\n  }\r\n\r\n  /**\r\n   * @notice only CONTROLLER is allowed to change the maintainer of the pool\r\n   * check is done inside the library.\r\n   */\r\n  function changeIdMaintainer(uint256 _id, address _newMaintainer)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n  {\r\n    StakeUtils.changeMaintainer(DATASTORE, _id, _newMaintainer);\r\n  }\r\n\r\n  function setMaintainerFee(uint256 _id, uint256 _newFee)\r\n    external\r\n    virtual\r\n    override\r\n  {\r\n    STAKEPOOL.setMaintainerFee(DATASTORE, _id, _newFee);\r\n  }\r\n\r\n  /**\r\n   * ** GOVERNANCE/SENATE SETTERS **\r\n   */\r\n\r\n  function setOperationFee(uint256 _newFee)\r\n    external\r\n    virtual\r\n    override\r\n    onlyGovernance\r\n    returns (bool success)\r\n  {\r\n    success = GEODE.setOperationFee(_newFee);\r\n  }\r\n\r\n  /// @dev onlySenate CHECKED inside\r\n  function setMaxOperationFee(uint256 _newFee)\r\n    external\r\n    virtual\r\n    override\r\n    returns (bool success)\r\n  {\r\n    success = GEODE.setMaxOperationFee(_newFee);\r\n  }\r\n\r\n  function setMaxMaintainerFee(uint256 _newMaxFee)\r\n    external\r\n    virtual\r\n    override\r\n    onlyGovernance\r\n  {\r\n    STAKEPOOL.setMaxMaintainerFee(_newMaxFee);\r\n  }\r\n\r\n  function setDefaultInterface(address _newDefault)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n    onlyGovernance\r\n  {\r\n    require(\r\n      _newDefault != address(0),\r\n      \"Portal: DEFAULT_INTERFACE can not be zero\"\r\n    );\r\n    DEFAULT_INTERFACE = _newDefault;\r\n    emit DefaultInterfaceSet(_newDefault);\r\n  }\r\n\r\n  /**\r\n   * ** Planet SETTERS **\r\n   */\r\n\r\n  /**\r\n   * @notice When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and\r\n   * creating validators\r\n   */\r\n  function activateOperator(uint256 _id, uint256 _activeId)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.activateOperator(DATASTORE, _id, _activeId);\r\n  }\r\n\r\n  /**\r\n   * @notice deactivates an old operator for the given staking pool\r\n   * @dev when activationExpiration is up, operator will NOT be able generate fees from pool,\r\n   * it is expected for them to return the assets as surplus with payDebt function\r\n   * @dev _deactivateAfter seconds until activation expires,\r\n   */\r\n  function deactivateOperator(uint256 _id, uint256 _deactivedId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.deactivateOperator(DATASTORE, _id, _deactivedId);\r\n  }\r\n\r\n  function _setInterface(\r\n    uint256 _id,\r\n    address _Interface,\r\n    bool isSet\r\n  ) internal {\r\n    STAKEPOOL.getgAVAX().setInterface(_Interface, _id, isSet);\r\n    if (isSet) DATASTORE.writeAddressForId(_id, \"currentInterface\", _Interface);\r\n    else if (DATASTORE.readAddressForId(_id, \"currentInterface\") == _Interface)\r\n      DATASTORE.writeAddressForId(_id, \"currentInterface\", address(0));\r\n  }\r\n\r\n  /**\r\n   *  @notice if a planet did not unset an old Interface, before setting a new one;\r\n   *  & if new interface is unset, the old one will not be remembered!!\r\n   *  use gAVAX.isInterface(interface,  id)\r\n   * @param _Interface address of the new gAVAX ERC1155 interface for given ID\r\n   * @param isSet true if new interface is going to be set, false if old interface is being unset\r\n   */\r\n  function setPlanetInterface(\r\n    uint256 _id,\r\n    address _Interface,\r\n    bool isSet\r\n  ) external virtual override whenNotPaused {\r\n    require(\r\n      DATASTORE.readAddressForId(_id, \"maintainer\") == msg.sender,\r\n      \"Portal: sender not maintainer\"\r\n    );\r\n    _setInterface(_id, _Interface, isSet);\r\n  }\r\n\r\n  /**\r\n   * ** Operator SETTERS/GETTERS**\r\n   */\r\n\r\n  /**\r\n   * @notice pBank is the only address on the P subchain that interacts with tokens that is claimed by\r\n   * operator as surplus.\r\n   * @dev this logic makes the operator-planet interactions more reliable and transparent\r\n   * when used by oracle to detect the token flow between different subchains.\r\n   */\r\n  function setPBank(\r\n    uint256 operatorId,\r\n    uint256 planetId,\r\n    bytes memory pBank\r\n  ) external virtual override whenNotPaused {\r\n    require(\r\n      DATASTORE.readAddressForId(operatorId, \"maintainer\") == msg.sender,\r\n      \"Portal: sender not maintainer\"\r\n    );\r\n\r\n    DATASTORE.writeBytesForId(\r\n      operatorId,\r\n      bytes32(keccak256(abi.encodePacked(planetId, \"pBank\"))),\r\n      pBank\r\n    );\r\n    emit pBankSet(operatorId, planetId, pBank);\r\n  }\r\n\r\n  function getPBank(uint256 operatorId, uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      DATASTORE.readBytesForId(\r\n        operatorId,\r\n        bytes32(keccak256(abi.encodePacked(planetId, \"pBank\")))\r\n      );\r\n  }\r\n\r\n  /**\r\n   *                                          ** PROPOSALS **\r\n   */\r\n\r\n  function getProposal(uint256 id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (GeodeUtils.Proposal memory)\r\n  {\r\n    return GEODE.getProposal(id);\r\n  }\r\n\r\n  /**\r\n   * @notice creates a new proposal as id = keccak(name),\r\n   * @param _CONTROLLER address of the\r\n   * @param _type of the proposal is seperator between different user experiences\r\n   * it can be upgrade proposal, senate election, operator/planet proposal etc.\r\n   * @param _proposalDuration proposal can not approved after expiration but can be override\r\n   * @param _name unique, id = keccak(name)\r\n   * @dev \"name already claimed check\" is being made here as override can be a wanted feature in the future\r\n   */\r\n  function newProposal(\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _proposalDuration,\r\n    bytes calldata _name\r\n  ) external virtual override whenNotPaused onlyGovernance {\r\n    require(\r\n      DATASTORE\r\n        .readBytesForId(uint256(keccak256(abi.encodePacked(_name))), \"name\")\r\n        .length == 0,\r\n      \"PORTAL: name already claimed\"\r\n    );\r\n    GEODE.newProposal(_CONTROLLER, _type, _proposalDuration, _name);\r\n  }\r\n\r\n  /**\r\n   * @dev only Senate is checked in GEODE.approveProposal\r\n   */\r\n  function approveProposal(uint256 _id)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n  {\r\n    /**\r\n     * RESERVED GeodeUtilsLib\r\n     * TYPE 0: inactive\r\n     * TYPE 1: Senate\r\n     * TYPE 2: Upgrade\r\n     * TYPE 3: **deprecated**\r\n     * RESERVED PORTALv1.0\r\n     * TYPE 4: operator\r\n     * TYPE 5: planet(public Staking pool)\r\n     * RESERVED PORTALv1.3:\r\n     * TYPE 6:  TODO :: private Staking pool (only maintainer)\r\n     **/\r\n    GEODE.approveProposal(DATASTORE, _id);\r\n    if (DATASTORE.readUintForId(_id, \"TYPE\") == 4) {\r\n      // operator\r\n      DATASTORE.writeAddressForId(\r\n        _id,\r\n        \"maintainer\",\r\n        DATASTORE.readAddressForId(_id, \"CONTROLLER\")\r\n      );\r\n    } else if (DATASTORE.readUintForId(_id, \"TYPE\") == 5) {\r\n      // planet\r\n      DATASTORE.writeAddressForId(\r\n        _id,\r\n        \"maintainer\",\r\n        DATASTORE.readAddressForId(_id, \"CONTROLLER\")\r\n      );\r\n      address currentInterface = StakeUtils._clone(DEFAULT_INTERFACE);\r\n      IERC20InterfaceUpgradable(currentInterface).initialize(\r\n        _id,\r\n        string(DATASTORE.readBytesForId(_id, \"name\")),\r\n        address(STAKEPOOL.getgAVAX())\r\n      );\r\n      _setInterface(_id, currentInterface, true);\r\n      address WithdrawalPool = STAKEPOOL.deployWithdrawalPool(DATASTORE, _id);\r\n      Ownable(WithdrawalPool).transferOwnership(GEODE.GOVERNANCE);\r\n    }\r\n  }\r\n\r\n  function approveSenate(uint256 proposalId, uint256 electorId)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n  {\r\n    GEODE.approveSenate(DATASTORE, proposalId, electorId);\r\n  }\r\n\r\n  /**\r\n   *                                          ** ORACLE **\r\n   */\r\n\r\n  /**\r\n   * @notice oraclePrice is a reliable source for any contract operation on-chain\r\n   * @dev also the *mint price* as gAVAX.pricePerShare(id)\r\n   * @dev TotalStakedAvax can be estimated by: TotalSupply(id) * planetOraclePrice(id)\r\n   */\r\n  function planetOraclePrice(uint256 _id)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 _pricePershare)\r\n  {\r\n    _pricePershare = STAKEPOOL.oraclePrice(_id);\r\n  }\r\n\r\n  /**\r\n   * @notice Oracle is only allowed for a period every day & pool operations are stopped then\r\n   * @dev returns false after oracle update for the given pool.\r\n   */\r\n  function isOracleActive(uint256 _planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return StakeUtils._isOracleActive(DATASTORE, _planetId);\r\n  }\r\n\r\n  /**\r\n   * @notice only Oracle can report a new price. However price is not purely calculated by it.\r\n   * the balance on P subchain is estimated by it, including the unrealized staking rewards.\r\n   * Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\r\n\r\n   * @param _opIds all ids of all operators who still collect fees.\r\n   * @param _pBalanceIncreases the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\r\n   * @dev simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\r\n   * @return price : new price after sanitychecks, might be useful if onchain oracle in the future\r\n   */\r\n  function reportOracle(\r\n    uint256 _reportedTimeStamp,\r\n    uint256 _planetId,\r\n    uint256[] memory _opIds,\r\n    uint256[] memory _pBalanceIncreases\r\n  )\r\n    external\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    returns (uint256 price)\r\n  {\r\n    price = STAKEPOOL.reportOracle(\r\n      DATASTORE,\r\n      _reportedTimeStamp,\r\n      _planetId,\r\n      _opIds,\r\n      _pBalanceIncreases\r\n    );\r\n  }\r\n\r\n  /**\r\n   *                                          ** DEBT & SURPLUS **\r\n   */\r\n\r\n  /// @notice total amount of staked Avax that has been waiting to be staked\r\n  function planetSurplus(uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return DATASTORE.readUintForId(planetId, \"surplus\");\r\n  }\r\n\r\n  /// @notice total amount of staked Avax that can be claimed, as Fees are not claimable to be staked\r\n  function planetClaimableSurplus(uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    uint256 _surplus = DATASTORE.readUintForId(planetId, \"surplus\");\r\n    uint256 _unclaimedFees = DATASTORE.readUintForId(planetId, \"unclaimedFees\");\r\n    if (_surplus > _unclaimedFees) {\r\n      return _surplus - _unclaimedFees;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice amount of fee (as AVAX) that has been distributed in a staking pool, without being claimed\r\n   */\r\n  function unclaimedFees(uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 fee)\r\n  {\r\n    fee = DATASTORE.readUintForId(planetId, \"unclaimedFees\");\r\n  }\r\n\r\n  /**\r\n   * @notice amount of fee (as AVAX) that has been distributed to the maintainer so far\r\n   * @dev for planet's maintainer's accumulatedFee (planetId,planetId)\r\n   */\r\n  function accumulatedFee(uint256 planetId, uint256 claimerId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    (uint256 fee, ) = StakeUtils.accumulatedFee(DATASTORE, planetId, claimerId);\r\n    return fee;\r\n  }\r\n\r\n  /**\r\n   * @notice When a debt is calculated, it also takes the unclaimed Fees into consideration for the Planet\r\n   * since payDebt pays that -if it is more than surplus- first and then covers the withdrawal Pool.\r\n   * @return debtInAvax is the current debt amount that pays for fees and provides a stable price to withdrawalPool\r\n   */\r\n  function planetDebt(uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 debtInAvax)\r\n  {\r\n    debtInAvax = StakeUtils.withdrawalPoolById(DATASTORE, planetId).getDebt();\r\n    if (\r\n      DATASTORE.readUintForId(planetId, \"unclaimedFees\") >\r\n      DATASTORE.readUintForId(planetId, \"surplus\")\r\n    ) {\r\n      uint256 debtInFees = DATASTORE.readUintForId(planetId, \"unclaimedFees\") -\r\n        DATASTORE.readUintForId(planetId, \"surplus\");\r\n      debtInAvax += debtInFees;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Debt of the planet is found by approaching to it's price within WithdrawalPool\r\n   * @return debtInAvax is the first guess that provides a withdrtawalPool price\r\n   * that is between limits of slippage when buyback&burn.\r\n   */\r\n  function planetPBalance(uint256 planetId)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return DATASTORE.readUintForId(planetId, \"pBalance\");\r\n  }\r\n\r\n  /**\r\n   * @notice An Operator is expected to pay for the DEBT of a staking pool\r\n   * @dev msg.value-debt is put to surplus, this can be used to increase surplus without minting new tokens!! useful to claim fees\r\n   */\r\n  function payDebt(uint256 planetId, uint256 operatorId)\r\n    external\r\n    payable\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n  {\r\n    STAKEPOOL.payDebt(DATASTORE, planetId, operatorId);\r\n  }\r\n\r\n  /**\r\n   * @notice operators can not claim fees if: expired OR deactivated\r\n   * @notice current unclaimedFees are not allowed to be claimed as surplus\r\n   * @return success if transfer of funds is succesful\r\n   */\r\n  function claimSurplus(uint256 planetId)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n    nonReentrant\r\n    returns (bool success)\r\n  {\r\n    success = StakeUtils.claimSurplus(\r\n      DATASTORE,\r\n      planetId,\r\n      DATASTORE.readUintForId(planetId, \"activeOperator\")\r\n    );\r\n    require(success, \"Portal: Failed to send surplus\");\r\n  }\r\n\r\n  /**\r\n   * @notice anyone can call this function, but it sends AVAX only to maintainer.\r\n   * @notice reverts if there are not enough surplus.\r\n   */\r\n  function claimFee(uint256 planetId, uint256 claimerId)\r\n    external\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n    nonReentrant\r\n    returns (uint256 feeSent)\r\n  {\r\n    feeSent = StakeUtils.claimFee(DATASTORE, planetId, claimerId);\r\n  }\r\n\r\n  /**\r\n   *                                          ** Staking Pools **\r\n   */\r\n  function isStakingPausedForPool(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.isStakingPausedForPool(DATASTORE, _id);\r\n  }\r\n\r\n  /// @notice when a pool is paused there are NO new funds to be minted, NO surplus.\r\n  function pauseStakingForPool(uint256 _id) external virtual override {\r\n    StakeUtils.pauseStakingForPool(DATASTORE, _id);\r\n  }\r\n\r\n  function unpauseStakingForPool(uint256 _id) external virtual override {\r\n    StakeUtils.unpauseStakingForPool(DATASTORE, _id);\r\n  }\r\n\r\n  function stake(\r\n    uint256 planetId,\r\n    uint256 minGavax,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    virtual\r\n    override\r\n    whenNotPaused\r\n    nonReentrant\r\n    returns (uint256 totalgAvax)\r\n  {\r\n    totalgAvax = STAKEPOOL.stake(DATASTORE, planetId, minGavax, deadline);\r\n    require(totalgAvax > 0, \"Portal: unsuccesful deposit\");\r\n  }\r\n\r\n  uint256[45] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Portal/utils/DataStoreLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\n/**\r\n * @title Storage Management library for dynamic structs based on data types\r\n *\r\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\r\n * storage layout with the help of ids and keys.\r\n * Mainly focusing on upgradable contracts with multiple user types to create a\r\n * sustainable development environment.\r\n *\r\n * In summary, extra gas cost that would be saved with Storage packing are\r\n * ignored to create upgradable structs.\r\n *\r\n * IDs are the representation of a user with any given key as properties.\r\n * Type for ID is not mandatory, not all IDs should have an explicit type.\r\n * Thus there is no checks of types or keys.\r\n *\r\n * @notice distinct id and key pairs return different storage slots\r\n *\r\n */\r\nlibrary DataStoreUtils {\r\n  /**\r\n   * @notice Main Struct for reading and writing data to storage for given id+key pairs\r\n   * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\r\n   * @param uintData keccak(id, key) =>  returns uint256\r\n   * @param bytesData keccak(id, key) => returns bytes\r\n   * @param addressData keccak(id, key) =>  returns address\r\n   * NOTE any other storage type can be expressed as bytes\r\n   */\r\n  struct DataStore {\r\n    mapping(uint256 => uint256[]) allIdsByType;\r\n    mapping(bytes32 => uint256) uintData;\r\n    mapping(bytes32 => bytes) bytesData;\r\n    mapping(bytes32 => address) addressData;\r\n  }\r\n\r\n  /**\r\n   * **DATA GETTERS **\r\n   **/\r\n  function readUintForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key\r\n  ) public view returns (uint256 data) {\r\n    data = self.uintData[keccak256(abi.encodePacked(_id, _key))];\r\n  }\r\n\r\n  function readBytesForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key\r\n  ) public view returns (bytes memory data) {\r\n    data = self.bytesData[keccak256(abi.encodePacked(_id, _key))];\r\n  }\r\n\r\n  function readAddressForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key\r\n  ) public view returns (address data) {\r\n    data = self.addressData[keccak256(abi.encodePacked(_id, _key))];\r\n  }\r\n\r\n  /**\r\n   * **DATA SETTERS **\r\n   **/\r\n  function writeUintForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    uint256 data\r\n  ) public {\r\n    self.uintData[keccak256(abi.encodePacked(_id, _key))] = data;\r\n  }\r\n\r\n  function writeBytesForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    bytes memory data\r\n  ) public {\r\n    self.bytesData[keccak256(abi.encodePacked(_id, _key))] = data;\r\n  }\r\n\r\n  function writeAddressForId(\r\n    DataStore storage self,\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    address data\r\n  ) public {\r\n    self.addressData[keccak256(abi.encodePacked(_id, _key))] = data;\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/utils/GeodeUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"./DataStoreLib.sol\";\r\n\r\n/**\r\n * @title GeodeUtils library\r\n * @notice Exclusively contains functions responsible for administration of Geode Portal,\r\n * including functions related to \"limited upgradability\" with Senate & proposals.\r\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\r\n * @dev ALL \"fee\" variables are limited by FEE_DENOMINATOR = 100%\r\n * @dev Admin functions are already protected.\r\n * Note that this library contains both functions called by users(ID) and admins(GOVERNANCE, SENATE )\r\n * Note refer to DataStoreUtils before reviewing\r\n */\r\nlibrary GeodeUtils {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n\r\n  event OperationFeeUpdated(uint256 newFee);\r\n  event MaxOperationFeeUpdated(uint256 newMaxFee);\r\n  event ControllerChanged(uint256 id, address newCONTROLLER);\r\n  event Proposed(\r\n    uint256 id,\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _duration\r\n  );\r\n  event ProposalApproved(uint256 id);\r\n  event NewElectorType(uint256 _type);\r\n  event Vote(uint256 proposalId, uint256 electorId);\r\n  event NewSenate(address senate, uint256 senate_expire_timestamp);\r\n\r\n  /**\r\n\r\n   * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\r\n   *\r\n   * @notice A Proposal has 4 specs:\r\n   * @param TYPE: separates the proposals and related functionality between different ID types.\r\n   * * RESERVED TYPES on GeodeUtils:\r\n   * * * TYPE 0: inactive\r\n   * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\r\n   * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\r\n   * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\r\n   * this TYPE is now reserved to make it easier for secondary contracts to add their own type.\r\n   *\r\n   * @param name: id is created by keccak(name)\r\n   *\r\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\r\n   * * This slot can be given the control of an id to a user, a new implementation contract, a new Senate etc.\r\n   *\r\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\r\n   * * Expired proposals can not be approved by Senate\r\n   * * Expired proposals can be overriden by new proposals\r\n   **/\r\n  struct Proposal {\r\n    address CONTROLLER;\r\n    uint256 TYPE;\r\n    uint256 deadline;\r\n    bytes name;\r\n  }\r\n  /**\r\n   * @notice Universe is A blockchain. In this case, it defines Avalanche\r\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\r\n   * Suggests updates, such as new planets, operators, contract upgrades and new Senate, on the Ecosystem _without any permissions to force them_\r\n   * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\r\n   * Note SENATE is proposed by Governance and voted by all planets, if 2/3 approves.\r\n   * @param OPERATION_FEE operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_OPERATION_FEE\r\n   * @param MAX_OPERATION_FEE set by SENATE, limited by FEE_DENOMINATOR\r\n   * @param FEE_DENOMINATOR represents 100%\r\n   * @param SENATE_EXPIRE_TIMESTAMP refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\r\n   * @param approvedUpgrade only 1(one) implementation contract can be \"approved\" at any given time. @dev Should set to address(0) after every upgrade\r\n   * @param _electorCount increased when a new id is added with _electorTypes[id] == true\r\n   * @param _electorTypes only given types can vote @dev must only be used at upgrades.\r\n   * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allowe surpassing type checks to save gas cost\r\n   **/\r\n  struct Universe {\r\n    address SENATE;\r\n    address GOVERNANCE;\r\n    uint256 OPERATION_FEE;\r\n    uint256 MAX_OPERATION_FEE;\r\n    uint256 FEE_DENOMINATOR;\r\n    uint256 SENATE_EXPIRE_TIMESTAMP;\r\n    address approvedUpgrade;\r\n    uint256 _electorCount;\r\n    mapping(uint256 => bool) _electorTypes;\r\n    mapping(uint256 => Proposal) _proposalForId;\r\n  }\r\n\r\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\r\n  uint32 public constant MAX_PROPOSAL_DURATION = 1 weeks;\r\n  uint32 public constant MAX_SENATE_PERIOD = 730 days; // 2 years\r\n\r\n  modifier onlySenate(Universe storage self) {\r\n    require(msg.sender == self.SENATE, \"GeodeUtils: SENATE role needed\");\r\n    require(\r\n      block.timestamp < self.SENATE_EXPIRE_TIMESTAMP,\r\n      \"GeodeUtils: SENATE not active\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *                                         ** UNIVERSE GETTERS **\r\n   **/\r\n\r\n  /// @return the address of SENATE\r\n  function getSenate(Universe storage self) public view returns (address) {\r\n    return self.SENATE;\r\n  }\r\n\r\n  /// @return the address of GOVERNANCE\r\n  function getGovernance(Universe storage self) public view returns (address) {\r\n    return self.GOVERNANCE;\r\n  }\r\n\r\n  /// @notice MAX_OPERATION_FEE must limit OPERATION_FEE even if MAX is changed\r\n  /// @return active OPERATION_FEE; limited by MAX_OPERATION_FEE\r\n  function getOperationFee(Universe storage self)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return\r\n      self.OPERATION_FEE > self.MAX_OPERATION_FEE\r\n        ? self.MAX_OPERATION_FEE\r\n        : self.OPERATION_FEE;\r\n  }\r\n\r\n  /// @return MAX_OPERATION_FEE\r\n  function getMaxOperationFee(Universe storage self)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return self.MAX_OPERATION_FEE;\r\n  }\r\n\r\n  /// @return the expiration date of current SENATE as a timestamp\r\n  function getSenateExpireTimestamp(Universe storage self)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return self.SENATE_EXPIRE_TIMESTAMP;\r\n  }\r\n\r\n  /**\r\n   *                                         ** UNIVERSE SETTERS **\r\n   */\r\n\r\n  /// @return true if the operation was succesful, might be helpful when governance rights are distributed\r\n  /// @dev can not set a fee more than MAX\r\n  /// @dev no need to check FEE_DENOMINATOR\r\n  function setOperationFee(Universe storage self, uint256 _newFee)\r\n    external\r\n    returns (bool)\r\n  {\r\n    require(_newFee <= self.MAX_OPERATION_FEE, \"GeodeUtils: fee more than MAX\");\r\n    self.OPERATION_FEE = _newFee;\r\n    emit OperationFeeUpdated(_newFee);\r\n    return true;\r\n  }\r\n\r\n  /// @return true if the operation was succesful\r\n  /// @dev can not set a fee more than FEE_DENOMINATOR (100%)\r\n  function setMaxOperationFee(Universe storage self, uint256 _newMaxFee)\r\n    external\r\n    onlySenate(self)\r\n    returns (bool)\r\n  {\r\n    require(\r\n      _newMaxFee <= self.FEE_DENOMINATOR,\r\n      \"GeodeUtils: fee more than 100%\"\r\n    );\r\n    self.MAX_OPERATION_FEE = _newMaxFee;\r\n    emit MaxOperationFeeUpdated(_newMaxFee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  @notice only the current CONTROLLER can change\r\n  @dev this operation can not be reverted by old CONTROLLER\r\n  @dev in case the current controller wants to remove the \r\n  need to upgrade to NO Controller they should provide smt like 0x0..dead\r\n   */\r\n  function changeIdCONTROLLER(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 id,\r\n    address newCONTROLLER\r\n  ) external {\r\n    require(\r\n      newCONTROLLER != address(0),\r\n      \"GeodeUtils: CONTROLLER can not be zero\"\r\n    );\r\n    require(\r\n      _DATASTORE.readAddressForId(id, \"CONTROLLER\") == msg.sender,\r\n      \"GeodeUtils: not CONTROLLER of given id\"\r\n    );\r\n    _DATASTORE.writeAddressForId(id, \"CONTROLLER\", newCONTROLLER);\r\n    emit ControllerChanged(id, newCONTROLLER);\r\n  }\r\n\r\n  /**\r\n   *                                          ** PROPOSALS **\r\n   */\r\n\r\n  /**\r\n   * CONTROLLER Proposals\r\n   */\r\n\r\n  function getProposal(Universe storage self, uint256 id)\r\n    external\r\n    view\r\n    returns (Proposal memory)\r\n  {\r\n    return self._proposalForId[id];\r\n  }\r\n\r\n  /**\r\n   * @notice to ensure the flexibility of Governance-less upgrades in the future, Anyone can create a Proposal.\r\n   * @notice a proposal can be overriden if: expired OR approved. DATASTORE(id) will not be overriden until the proposal is approved.\r\n   * @dev refer to structure of Proposal for explanations of params\r\n   */\r\n  function newProposal(\r\n    Universe storage self,\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _duration,\r\n    bytes calldata _name\r\n  ) external {\r\n    require(\r\n      _duration >= MIN_PROPOSAL_DURATION,\r\n      \"GeodeUtils: duration should be higher than min value\"\r\n    );\r\n    require(_duration <= MAX_PROPOSAL_DURATION, \"GeodeUtils: duration exceeds\");\r\n    uint256 id = uint256(keccak256(abi.encodePacked(_name)));\r\n    require(\r\n      self._proposalForId[id].deadline < block.timestamp,\r\n      \"GeodeUtils: name already proposed\"\r\n    );\r\n    self._proposalForId[id] = Proposal({\r\n      CONTROLLER: _CONTROLLER,\r\n      TYPE: _type,\r\n      deadline: block.timestamp + _duration,\r\n      name: _name\r\n    });\r\n    emit Proposed(id, _CONTROLLER, _type, _duration);\r\n  }\r\n\r\n  /**\r\n   *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\r\n   *  any other addition should take place in Portal, as not related\r\n   *  @param id given ID proposal that has been approved by Senate\r\n   *  @dev Senate should not be able to approve expired proposals\r\n   *  @dev Senate should not be able to approve SENATE proposals :)\r\n   */\r\n  function approveProposal(\r\n    Universe storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 id\r\n  ) external onlySenate(self) {\r\n    require(\r\n      self._proposalForId[id].deadline > block.timestamp,\r\n      \"GeodeUtils: proposal expired\"\r\n    );\r\n    require(\r\n      self._proposalForId[id].TYPE != 1,\r\n      \"GeodeUtils: Senate can not approve Senate Proposal\"\r\n    );\r\n    _DATASTORE.writeBytesForId(id, \"name\", self._proposalForId[id].name);\r\n    _DATASTORE.writeAddressForId(\r\n      id,\r\n      \"CONTROLLER\",\r\n      self._proposalForId[id].CONTROLLER\r\n    );\r\n    _DATASTORE.writeUintForId(id, \"TYPE\", self._proposalForId[id].TYPE);\r\n    _DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\r\n\r\n    if (self._proposalForId[id].TYPE == 2) {\r\n      self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\r\n    }\r\n    self._proposalForId[id].deadline = block.timestamp;\r\n    if (self._electorTypes[_DATASTORE.readUintForId(id, \"TYPE\")])\r\n      self._electorCount += 1;\r\n    emit ProposalApproved(id);\r\n  }\r\n\r\n  /**\r\n   * SENATE Proposals\r\n   */\r\n\r\n  /**\r\n   * @notice only selected types can vote for senate\r\n   * @param _type selected type\r\n   * @param _isElector true if selected _type can vote for senate from now on\r\n   * @dev can not set with the same value again, preventing double increment/decrements\r\n   */\r\n  function setElectorType(\r\n    Universe storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _type,\r\n    bool _isElector\r\n  ) external {\r\n    require(\r\n      self._electorTypes[_type] != _isElector,\r\n      \"GeodeUtils: type already _isElector\"\r\n    );\r\n    require(\r\n      _type != 0 && _type != 1 && _type != 2 && _type != 3,\r\n      \"GeodeUtils: 0, Senate, Upgrade, ProxyAdmin cannot be elector!\"\r\n    );\r\n    self._electorTypes[_type] = _isElector;\r\n    if (_isElector) {\r\n      self._electorCount += _DATASTORE.allIdsByType[_type].length;\r\n    } else {\r\n      self._electorCount -= _DATASTORE.allIdsByType[_type].length;\r\n    }\r\n    emit NewElectorType(_type);\r\n  }\r\n\r\n  /**\r\n   * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors are approved\r\n   * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\r\n   * @notice id can not vote if:\r\n   *- approved already\r\n   *- not its type is not elector\r\n   *- not proposal is expired\r\n   *- not senate proposal\r\n   * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\r\n   * @dev pins id as \"voted\" when approved\r\n   * @dev increases \"approvalCount\" of proposalId by 1 when approved\r\n   */\r\n  function approveSenate(\r\n    Universe storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 proposalId,\r\n    uint256 electorId\r\n  ) external {\r\n    require(\r\n      self._proposalForId[proposalId].TYPE == 1,\r\n      \"GeodeUtils: NOT Senate Proposal\"\r\n    );\r\n    require(\r\n      self._proposalForId[proposalId].deadline >= block.timestamp,\r\n      \"GeodeUtils: proposal expired\"\r\n    );\r\n    require(\r\n      _DATASTORE.readAddressForId(electorId, \"CONTROLLER\") == msg.sender,\r\n      \"GeodeUtils: msg.sender should be CONTROLLER of given electorId!\"\r\n    );\r\n    require(\r\n      self._electorTypes[_DATASTORE.readUintForId(electorId, \"TYPE\")],\r\n      \"GeodeUtils: NOT an elector\"\r\n    );\r\n    require(\r\n      _DATASTORE.readUintForId(\r\n        proposalId,\r\n        bytes32(keccak256(abi.encodePacked(electorId, \"voted\")))\r\n      ) == 0,\r\n      \" GeodeUtils: already approved\"\r\n    );\r\n    _DATASTORE.writeUintForId(\r\n      proposalId,\r\n      bytes32(keccak256(abi.encodePacked(electorId, \"voted\"))),\r\n      1\r\n    );\r\n    emit Vote(proposalId, electorId);\r\n    _DATASTORE.writeUintForId(\r\n      proposalId,\r\n      \"approvalCount\",\r\n      _DATASTORE.readUintForId(proposalId, \"approvalCount\") + 1\r\n    );\r\n    if (\r\n      _DATASTORE.readUintForId(proposalId, \"approvalCount\") >=\r\n      ((self._electorCount + 1) * 2) / 3\r\n    ) {\r\n      self.SENATE = self._proposalForId[proposalId].CONTROLLER;\r\n      self._proposalForId[proposalId].deadline = block.timestamp;\r\n      self.SENATE_EXPIRE_TIMESTAMP = block.timestamp + MAX_SENATE_PERIOD; // 2 years\r\n      emit NewSenate(self.SENATE, self.SENATE_EXPIRE_TIMESTAMP);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get if it is allowed to change a specific contract with the current version.\r\n   * @return True if it is allowed by senate and false if not.\r\n   * @dev address(0) should return false\r\n   **/\r\n  function isUpgradeAllowed(\r\n    Universe storage self,\r\n    address proposed_implementation\r\n  ) external view returns (bool) {\r\n    return\r\n      self.approvedUpgrade != address(0) &&\r\n      self.approvedUpgrade == proposed_implementation;\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/utils/StakeUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"../../interfaces/ISwap.sol\";\r\nimport \"../../interfaces/IgAVAX.sol\";\r\nimport \"../../WithdrawalPool/LPToken.sol\";\r\nimport \"./DataStoreLib.sol\";\r\n\r\n/**\r\n * @title StakeUtils library\r\n * @notice Exclusively contains functions related to Avax Liquid Staking designed by Geode Finance\r\n * @notice biggest part of the functionality is related to Withdrawal Pools\r\n * which relies on continuous buybacks for price peg with DEBT/SURPLUS calculations\r\n * @dev Contracts relying on this library must initialize StakeUtils.StakePool\r\n * @dev ALL \"fee\" variables are limited by FEE_DENOMINATOR = 100%\r\n * Note *suggested* refer to GeodeUtils before reviewing\r\n * Note refer to DataStoreUtils before reviewing\r\n * Note beware of the staking pool and operator implementations:\r\n * Operatores have properties like accumulatedFee, fee(as a percentage), maintainer.\r\n * Every staking pool(aka planet) is also an operator by design.\r\n * Planets(type 5) inherit operators (type 4), with additional properties like staking pools -relates to\r\n * params: pBalance, surplus, unclaimedFees-, withdrawal pool - relates to debt - and liquid asset(gAvax).\r\n */\r\nlibrary StakeUtils {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n\r\n  event MaintainerFeeUpdated(uint256 id, uint256 fee);\r\n  event MaxMaintainerFeeUpdated(uint256 newMaxFee);\r\n  event PriceChanged(uint256 id, uint256 pricePerShare);\r\n  event OracleUpdate(\r\n    uint256 id,\r\n    uint256 price,\r\n    uint256 newPBalance,\r\n    uint256 distributedFeeTotal,\r\n    uint256 updateTimeStamp\r\n  );\r\n  event OperatorActivated(uint256 id, uint256 activeOperator);\r\n  event OperatorDeactivated(uint256 id, uint256 deactiveOperator);\r\n  event debtPaid(uint256 id, uint256 operatorId, uint256 paidDebt);\r\n  event SurplusClaimed(uint256 id, uint256 newSurplus);\r\n  event FeeClaimed(uint256 id, uint256 claimerId, uint256 newSurplus);\r\n  event PausedPool(uint256 id);\r\n  event UnpausedPool(uint256 id);\r\n\r\n  /**\r\n   * @notice StakePool includes the parameters related to Staking Pool Contracts.\r\n   * @notice A staking pool works with a *bound* Withdrawal Pool to create best pricing\r\n   * for the staking derivative. Withdrawal Pools uses StableSwap algorithm.\r\n   * @param gAVAX ERC1155 contract that keeps the totalSupply, pricepershare and balances of all StakingPools by ID\r\n   * @dev  gAVAX should not be changed ever!\r\n   * @param DEFAULT_SWAP_POOL STABLESWAP pool that will be cloned to be used as Withdrawal Pool of given ID\r\n   * @param DEFAULT_LP_TOKEN LP token implementation that will be cloned to be used for Withdrawal Pool of given ID\r\n   * @param ORACLE https://github.com/Geodefi/Telescope\r\n   * @param DEFAULT_A Withdrawal Pool parameter\r\n   * @param DEFAULT_FEE Withdrawal Pool parameter\r\n   * @param DEFAULT_ADMIN_FEE Withdrawal Pool parameter\r\n   * @param FEE_DENOMINATOR represents 100% ALSO Withdrawal Pool parameter\r\n   * @param MAX_MAINTAINER_FEE : limits operator.fee and planet.fee, set by GOVERNANCE\r\n   * @dev changing any of address parameters (gAVAX, ORACLE, DEFAULT_SWAP_POOL, DEFAULT_LP_TOKEN) MUST require a contract upgrade to ensure security\r\n   **/\r\n  struct StakePool {\r\n    address gAVAX;\r\n    address DEFAULT_SWAP_POOL;\r\n    address DEFAULT_LP_TOKEN;\r\n    address ORACLE;\r\n    uint256 DEFAULT_A;\r\n    uint256 DEFAULT_FEE;\r\n    uint256 DEFAULT_ADMIN_FEE;\r\n    uint256 FEE_DENOMINATOR;\r\n    uint256 PERIOD_PRICE_INCREASE_LIMIT;\r\n    uint256 MAX_MAINTAINER_FEE;\r\n  }\r\n\r\n  /**\r\n   * @notice gAVAX lacks *decimals*,\r\n   * @dev gAVAX_DENOMINATOR makes sure that we are taking care of decimals on calculations related to gAVAX\r\n   */\r\n  uint256 public constant gAVAX_DENOMINATOR = 1e18;\r\n\r\n  /// @notice Oracle is active for the first 30 min for a day\r\n  uint256 public constant ORACLE_PERIOD = 1 days;\r\n  uint256 public constant ORACLE_ACTIVE_PERIOD = 30 minutes;\r\n  uint256 public constant DEACTIVATION_PERIOD = 15 days;\r\n  uint256 public constant IGNORABLE_DEBT = 1 ether;\r\n\r\n  /**\r\n   * @notice whenever an operator is activated for a staking pool, it sets an activationExpiration date, which\r\n   * means the op pay debt by burning gAvax tokens and collect fee from their validators.\r\n   * While this implementation allows any two different ids to cooperate, with multiple interactions at any given time,\r\n   * there can only be \"1\" activeOperator who can also claimSurplus to create new validators.\r\n   */\r\n  modifier beforeActivationExpiration(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _poolId,\r\n    uint256 _claimerId\r\n  ) {\r\n    require(\r\n      _DATASTORE.readUintForId(\r\n        _poolId,\r\n        bytes32(keccak256(abi.encodePacked(_claimerId, \"activationExpiration\")))\r\n      ) > block.timestamp,\r\n      \"StakeUtils: operatorId activationExpiration has past\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyMaintainer(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) {\r\n    require(\r\n      _DATASTORE.readAddressForId(_id, \"maintainer\") == msg.sender,\r\n      \"StakeUtils: sender not maintainer\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function _clone(address target) public returns (address) {\r\n    return Clones.clone(target);\r\n  }\r\n\r\n  function getgAVAX(StakePool storage self) public view returns (IgAVAX) {\r\n    return IgAVAX(self.gAVAX);\r\n  }\r\n\r\n  /**\r\n   * @notice                      ** Maintainer specific functions **\r\n   *\r\n   * @note \"Maintainer\" is a shared logic like \"fee\" by both operator and pools.\r\n   * Maintainers have permissiones to maintain the given id like setting a new fee or interface as\r\n   * well as paying debt etc. for operators.\r\n   * @dev maintainer is set by CONTROLLER of given id\r\n   */\r\n\r\n  /// @notice even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\r\n  function getMaintainerFee(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) public view returns (uint256) {\r\n    return\r\n      _DATASTORE.readUintForId(_id, \"fee\") > self.MAX_MAINTAINER_FEE\r\n        ? self.MAX_MAINTAINER_FEE\r\n        : _DATASTORE.readUintForId(_id, \"fee\");\r\n  }\r\n\r\n  function setMaintainerFee(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id,\r\n    uint256 _newFee\r\n  ) external onlyMaintainer(_DATASTORE, _id) {\r\n    require(\r\n      _newFee <= self.MAX_MAINTAINER_FEE,\r\n      \"StakeUtils: MAX_MAINTAINER_FEE ERROR\"\r\n    );\r\n    _DATASTORE.writeUintForId(_id, \"fee\", _newFee);\r\n    emit MaintainerFeeUpdated(_id, _newFee);\r\n  }\r\n\r\n  function setMaxMaintainerFee(StakePool storage self, uint256 _newMaxFee)\r\n    external\r\n  {\r\n    require(\r\n      _newMaxFee <= self.FEE_DENOMINATOR,\r\n      \"StakeUtils: fee more than 100%\"\r\n    );\r\n    self.MAX_MAINTAINER_FEE = _newMaxFee;\r\n    emit MaxMaintainerFeeUpdated(_newMaxFee);\r\n  }\r\n\r\n  function changeMaintainer(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id,\r\n    address _newMaintainer\r\n  ) external {\r\n    require(\r\n      _DATASTORE.readAddressForId(_id, \"CONTROLLER\") == msg.sender,\r\n      \"StakeUtils: not CONTROLLER of given id\"\r\n    );\r\n    require(\r\n      _newMaintainer != address(0),\r\n      \"StakeUtils: maintainer can not be zero\"\r\n    );\r\n\r\n    _DATASTORE.writeAddressForId(_id, \"maintainer\", _newMaintainer);\r\n  }\r\n\r\n  /**\r\n   * @notice                      ** Staking Pool specific functions **\r\n   */\r\n\r\n  /// @notice mints gAVAX tokens with given ID and amount.\r\n  /// @dev shouldn't be accesible publicly\r\n  function _mint(\r\n    address _gAVAX,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) internal {\r\n    require(_id > 0, \"StakeUtils: _mint id should be > 0\");\r\n    IgAVAX(_gAVAX).mint(_to, _id, _amount, \"\");\r\n  }\r\n\r\n  /**\r\n   * @notice conducts a buyback using the given withdrawal pool,\r\n   * @param to address to send bought gAVAX(id). burns the tokens if to=address(0), transfers if not\r\n   * @param poolId id of the gAVAX that will be bought\r\n   * @param sellAvax AVAX amount to sell\r\n   * @param minToBuy TX is expected to revert by Swap.sol if not meet\r\n   * @param deadline TX is expected to revert by Swap.sol if deadline has past\r\n   * @dev this function assumes that pool is deployed by deployWithdrawalPool\r\n   * as index 0 is avax and index 1 is Gavax\r\n   */\r\n  function _buyback(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    address to,\r\n    uint256 poolId,\r\n    uint256 sellAvax,\r\n    uint256 minToBuy,\r\n    uint256 deadline\r\n  ) internal returns (uint256 outAmount) {\r\n    // SWAP in WP\r\n    outAmount = withdrawalPoolById(_DATASTORE, poolId).swap{ value: sellAvax }(\r\n      0,\r\n      1,\r\n      sellAvax,\r\n      minToBuy,\r\n      deadline\r\n    );\r\n    if (to == address(0)) {\r\n      // burn\r\n      getgAVAX(self).burn(address(this), poolId, outAmount);\r\n    } else {\r\n      // send back to user\r\n      getgAVAX(self).safeTransferFrom(address(this), to, poolId, outAmount, \"\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice                      ** ORACLE specific functions **\r\n   */\r\n\r\n  /**\r\n   * @notice sets pricePerShare parameter of gAVAX(id)\r\n   * @dev only ORACLE should be able to reach this after sanity checks on new price\r\n   */\r\n  function _setPricePerShare(\r\n    StakePool storage self,\r\n    uint256 pricePerShare_,\r\n    uint256 _id\r\n  ) internal {\r\n    require(_id > 0, \"StakeUtils: id should be > 0\");\r\n    getgAVAX(self).setPricePerShare(pricePerShare_, _id);\r\n    emit PriceChanged(_id, pricePerShare_);\r\n  }\r\n\r\n  /**\r\n   * @notice Oracle is only allowed for a period every day & pool operations are stopped then\r\n   * @return false if the last oracle update happened already (within the current daily period)\r\n   */\r\n  function _isOracleActive(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _poolId\r\n  ) internal view returns (bool) {\r\n    return\r\n      (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\r\n      (_DATASTORE.readUintForId(_poolId, \"oracleUpdateTimeStamp\") <\r\n        block.timestamp - ORACLE_ACTIVE_PERIOD);\r\n  }\r\n\r\n  /**\r\n   * @notice oraclePrice is a reliable source for any contract operation\r\n   * @dev also the *mint price* when there is a no debt\r\n   */\r\n  function oraclePrice(StakePool storage self, uint256 _id)\r\n    public\r\n    view\r\n    returns (uint256 _oraclePrice)\r\n  {\r\n    _oraclePrice = getgAVAX(self).pricePerShare(_id);\r\n  }\r\n\r\n  /**\r\n   * @notice in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\r\n   * @dev checks:\r\n   * 1. Price should be increased & it should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\r\n   *  with the factor of how many days since oracleUpdateTimeStamp has past.\r\n   *  To encourage report oracle each day, price increase limit is not calculated by considering compound effect\r\n   *  for multiple days.\r\n   */\r\n  function _sanityCheck(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id,\r\n    uint256 _newPrice\r\n  ) internal view {\r\n    // need to put the lastPriceUpdate to DATASTORE to check if price is updated already for that day\r\n    uint256 periodsSinceUpdate = (block.timestamp +\r\n      ORACLE_ACTIVE_PERIOD -\r\n      _DATASTORE.readUintForId(_id, \"oracleUpdateTimeStamp\")) / ORACLE_PERIOD;\r\n    uint256 curPrice = oraclePrice(self, _id);\r\n    uint256 maxPrice = curPrice +\r\n      ((curPrice * self.PERIOD_PRICE_INCREASE_LIMIT * periodsSinceUpdate) /\r\n        self.FEE_DENOMINATOR);\r\n\r\n    require(\r\n      _newPrice <= maxPrice && _newPrice >= curPrice,\r\n      \"StakeUtils: price did NOT met\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice distribute fees to given operator Ids, by related to their fees.\r\n   * Finally, distribute the fee of maintainer of the pool from total amounts.\r\n   *\r\n   * @dev fees can be higher than current MAX, if MAX is changed afterwards, we check that condition.\r\n   */\r\n  function _distributeFees(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _poolId,\r\n    uint256[] calldata _opIds,\r\n    uint256[] calldata _pBalanceIncreases\r\n  ) internal returns (uint256 totalPBalanceIncrease, uint256 totalFees) {\r\n    require(\r\n      _opIds.length == _pBalanceIncreases.length,\r\n      \"StakeUtils: Array lengths doesn't match\"\r\n    );\r\n\r\n    for (uint256 i = 0; i < _opIds.length; i++) {\r\n      // do not double spend if pool maintainer is also maintaining the validators\r\n      if (_opIds[i] != _poolId) {\r\n        // below require checks activationExpiration[keccak256(abi.encodePacked(_id, operator))] logic\r\n        require(\r\n          _DATASTORE.readUintForId(\r\n            _poolId,\r\n            bytes32(\r\n              keccak256(abi.encodePacked(_opIds[i], \"activationExpiration\"))\r\n            )\r\n          ) > block.timestamp - ORACLE_PERIOD,\r\n          \"StakeUtils: _opId activationExpiration has past\"\r\n        );\r\n        uint256 opFee = getMaintainerFee(self, _DATASTORE, _opIds[i]);\r\n        (uint256 _fee, bytes32 _key) = accumulatedFee(\r\n          _DATASTORE,\r\n          _poolId,\r\n          _opIds[i]\r\n        );\r\n        uint256 gainedOpFee = (opFee * _pBalanceIncreases[i]) /\r\n          self.FEE_DENOMINATOR;\r\n        _DATASTORE.writeUintForId(_poolId, _key, _fee + gainedOpFee);\r\n        totalFees += gainedOpFee;\r\n      }\r\n      totalPBalanceIncrease += _pBalanceIncreases[i];\r\n    }\r\n\r\n    // op_fee * _pBalanceIncrease[i] to calculate respective fee from the gained increase\r\n    uint256 poolFee = getMaintainerFee(self, _DATASTORE, _poolId);\r\n    uint256 gainedPoolFee = (poolFee * totalPBalanceIncrease) /\r\n      self.FEE_DENOMINATOR;\r\n\r\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, _poolId, _poolId);\r\n    totalFees += gainedPoolFee;\r\n    _DATASTORE.writeUintForId(_poolId, key, fee + gainedPoolFee);\r\n  }\r\n\r\n  /**\r\n   * @notice only Oracle can report a new price. However price is not purely calculated by it.\r\n   * the balance on P subchain is estimated by it, including the unrealized staking rewards.\r\n   * Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\r\n\r\n   * @param _reportedTimeStamp ensures prepeared report is prepeared within last activation period, prevent previous reports to be accepted. \r\n   * @param _opIds all ids of all operators who still collect fees.\r\n   * @param _pBalanceIncreases the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\r\n   * @dev simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\r\n   * @return price : new price after sanitychecks, might be useful if onchain oracle in the future\r\n   */\r\n  function reportOracle(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _reportedTimeStamp,\r\n    uint256 _poolId,\r\n    uint256[] calldata _opIds,\r\n    uint256[] calldata _pBalanceIncreases\r\n  ) external returns (uint256 price) {\r\n    require(msg.sender == self.ORACLE, \"StakeUtils: msg.sender NOT oracle\");\r\n    require(\r\n      _isOracleActive(_DATASTORE, _poolId),\r\n      \"StakeUtils: Oracle is NOT active\"\r\n    );\r\n    require(\r\n      _reportedTimeStamp >= block.timestamp - ORACLE_ACTIVE_PERIOD,\r\n      \"StakeUtils: Reported timestamp is NOT valid\"\r\n    );\r\n\r\n    // distribute fees\r\n    (uint256 totalPBalanceIncrease, uint256 totalFees) = _distributeFees(\r\n      self,\r\n      _DATASTORE,\r\n      _poolId,\r\n      _opIds,\r\n      _pBalanceIncreases\r\n    );\r\n\r\n    uint256 newPBalance = _DATASTORE.readUintForId(_poolId, \"pBalance\") +\r\n      totalPBalanceIncrease;\r\n    _DATASTORE.writeUintForId(_poolId, \"pBalance\", newPBalance);\r\n\r\n    uint256 unclaimed = _DATASTORE.readUintForId(_poolId, \"unclaimedFees\") +\r\n      totalFees;\r\n    _DATASTORE.writeUintForId(_poolId, \"unclaimedFees\", unclaimed);\r\n\r\n    // deduct unclaimed fees from surplus\r\n    price =\r\n      ((newPBalance +\r\n        _DATASTORE.readUintForId(_poolId, \"surplus\") -\r\n        unclaimed) * gAVAX_DENOMINATOR) /\r\n      (getgAVAX(self).totalSupply(_poolId));\r\n    _sanityCheck(self, _DATASTORE, _poolId, price);\r\n    _setPricePerShare(self, price, _poolId);\r\n\r\n    _DATASTORE.writeUintForId(\r\n      _poolId,\r\n      \"oracleUpdateTimeStamp\",\r\n      block.timestamp\r\n    );\r\n    emit OracleUpdate(\r\n      _poolId,\r\n      price,\r\n      newPBalance,\r\n      totalFees,\r\n      _reportedTimeStamp\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice                      ** DEBT/SURPLUS/FEE specific functions **\r\n   */\r\n\r\n  /**\r\n   * @notice When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and\r\n   * creating validators, it activates the validator.\r\n   * @notice Changes activeOperator of the given ID; old activeOperator can NOT claim surplus anymore\r\n   * @dev However it can still continue holding its old balance until activationExpiration, and gain fees\r\n   * @dev activationExpiration timestamp until new activeoperator continues getting fees from id's staking pool\r\n   */\r\n  function activateOperator(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id,\r\n    uint256 _activeId\r\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\r\n    _DATASTORE.writeUintForId(_id, \"activeOperator\", _activeId);\r\n    _DATASTORE.writeUintForId(\r\n      _id,\r\n      bytes32(keccak256(abi.encodePacked(_activeId, \"activationExpiration\"))),\r\n      type(uint256).max\r\n    );\r\n    emit OperatorActivated(_id, _activeId);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice deactivates an old operator for the given staking pool\r\n   * @dev when activationExpiration is up, operator will NOT be able generate fees from pool,\r\n   * it is expected for them to return the assets as surplus with payDebt function\r\n   * @dev _deactivateAfter seconds until activation expires,\r\n   */\r\n  function deactivateOperator(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id,\r\n    uint256 _deactivedId\r\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\r\n    if (_DATASTORE.readUintForId(_id, \"activeOperator\") == _deactivedId)\r\n      _DATASTORE.writeUintForId(_id, \"activeOperator\", 0);\r\n\r\n    _DATASTORE.writeUintForId(\r\n      _id,\r\n      bytes32(\r\n        keccak256(abi.encodePacked(_deactivedId, \"activationExpiration\"))\r\n      ),\r\n      block.timestamp + DEACTIVATION_PERIOD //15 days\r\n    );\r\n    emit OperatorDeactivated(_id, _deactivedId);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Only an Operator is expected to pay for the DEBT of a staking pool.\r\n   * When it is paid, p subChain balance decreases, effectively changing the price calculations!\r\n   */\r\n  function payDebt(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _poolId,\r\n    uint256 _operatorId\r\n  )\r\n    external\r\n    onlyMaintainer(_DATASTORE, _operatorId)\r\n    beforeActivationExpiration(_DATASTORE, _poolId, _operatorId)\r\n  {\r\n    require(\r\n      !_isOracleActive(_DATASTORE, _poolId),\r\n      \"StakeUtils: Oracle is active\"\r\n    );\r\n\r\n    //mgs.value should be bigger than 0 for everything to make sense\r\n    require(msg.value > 0, \"StakeUtils: no avax is sent\");\r\n\r\n    // msg.value is assined to value, value is the variable to keep how much left in my hand to continue\r\n    // paying the rest of the debts and or how much left after paying the debts to put the rest in to surplus\r\n    uint256 value = msg.value;\r\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \"surplus\");\r\n    uint256 unclaimedFees = _DATASTORE.readUintForId(_poolId, \"unclaimedFees\");\r\n\r\n    // this if statement checks if there is a operation fee that needs to be paid.\r\n    // If distributed fee exceeds the surplus, there is a gap between fees and surplus\r\n    // so we check if the unclaimedFees are bigger than surplus.\r\n    if (unclaimedFees > surplus) {\r\n      // the difference between unclaimedFees and the surplus is the debt for the fees.\r\n      uint256 debtInFees = unclaimedFees - surplus;\r\n\r\n      // need to check if the debtInFees is bigger than the value, if not, can only pay value amount of debtInFees\r\n      // if not, we are paying all debtInFees by adding it to the surplus so that the difference might be 0(zero) after this action.\r\n      if (debtInFees > value) {\r\n        debtInFees = value;\r\n      }\r\n\r\n      // we pay for the debtInFees as we can\r\n      surplus += debtInFees;\r\n\r\n      // we substract the debtInFees from value since we cannot use that amount to pay the rest, it is already gone.\r\n      value -= debtInFees;\r\n    }\r\n\r\n    // we check if remaining value is bigger than 0 to save gas, because it may be already used\r\n    if (value > 0) {\r\n      // we get the debt from the withdrawal pool\r\n      uint256 debtToBurn = withdrawalPoolById(_DATASTORE, _poolId).getDebt();\r\n      // to save the gas we make sure that it is bigger then an ignorably low amount while we are doing a buyback\r\n      if (debtToBurn > IGNORABLE_DEBT) {\r\n        // same idea with the fee debt and values\r\n        if (debtToBurn > value) {\r\n          debtToBurn = value;\r\n        }\r\n\r\n        // burns\r\n        _buyback(\r\n          self,\r\n          _DATASTORE,\r\n          address(0),\r\n          _poolId,\r\n          debtToBurn,\r\n          0,\r\n          type(uint256).max\r\n        );\r\n\r\n        // we substract the debt from value to see how much left if there is any left to put it on surplus\r\n        value -= debtToBurn;\r\n      }\r\n\r\n      // to save gas we are making sure that value is bigger than zero and if so, we add it to the surplus.\r\n      if (value > 0) {\r\n        surplus += value;\r\n      }\r\n    }\r\n\r\n    _DATASTORE.writeUintForId(_poolId, \"surplus\", surplus + value);\r\n\r\n    // in all cases, if we pass the require msg.value > 0, that money is coming from the p chain\r\n    // and we need to decrease the pBalance for msg.value amount\r\n    uint256 pBalance = _DATASTORE.readUintForId(_poolId, \"pBalance\");\r\n    if (pBalance > msg.value) {\r\n      _DATASTORE.writeUintForId(_poolId, \"pBalance\", pBalance - msg.value);\r\n    } else {\r\n      _DATASTORE.writeUintForId(_poolId, \"pBalance\", 0);\r\n    }\r\n\r\n    emit debtPaid(_poolId, _operatorId, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice only authorized Operator is expected to claim the surplus of a staking pool\r\n   * @notice current fees are not allowed to be claimed from surplus,\r\n   * however oracle update can also make it hard since it increases unclaimedFees without touching the surplus\r\n   */\r\n  function claimSurplus(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _poolId,\r\n    uint256 _claimerId\r\n  )\r\n    external\r\n    onlyMaintainer(_DATASTORE, _claimerId)\r\n    beforeActivationExpiration(_DATASTORE, _poolId, _claimerId)\r\n    returns (bool)\r\n  {\r\n    require(\r\n      !_isOracleActive(_DATASTORE, _poolId),\r\n      \"StakeUtils: Oracle is active\"\r\n    );\r\n    uint256 fees = _DATASTORE.readUintForId(_poolId, \"unclaimedFees\");\r\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \"surplus\");\r\n    require(surplus > fees, \"StakeUtils: pool fees exceed surplus\");\r\n    _DATASTORE.writeUintForId(_poolId, \"surplus\", fees);\r\n\r\n    uint256 currentPBal = _DATASTORE.readUintForId(_poolId, \"pBalance\");\r\n    _DATASTORE.writeUintForId(\r\n      _poolId,\r\n      \"pBalance\",\r\n      currentPBal + surplus - fees\r\n    );\r\n\r\n    (bool sent, ) = payable(\r\n      _DATASTORE.readAddressForId(_claimerId, \"maintainer\")\r\n    ).call{ value: surplus - fees }(\"\");\r\n    require(sent, \"StakeUtils: Failed to send Avax\");\r\n    emit SurplusClaimed(_poolId, surplus - fees);\r\n    return sent;\r\n  }\r\n\r\n  /**\r\n   * @notice accumulatedFee is stored with a key combines the poolId, claimerId & \"accumulatedFee\"\r\n   * @dev function also returns the key for ease of use, please use.\r\n   */\r\n  function accumulatedFee(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 poolId,\r\n    uint256 claimerId\r\n  ) public view returns (uint256 fee, bytes32 key) {\r\n    key = bytes32(keccak256(abi.encodePacked(claimerId, \"accumulatedFee\")));\r\n    fee = _DATASTORE.readUintForId(poolId, key);\r\n  }\r\n\r\n  /**\r\n   * @notice anyone can call this function, but it sends AVAX to maintainer.\r\n   * @notice reverts if there are not enough surplus.\r\n   */\r\n  function claimFee(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 poolId,\r\n    uint256 claimerId\r\n  )\r\n    external\r\n    beforeActivationExpiration(_DATASTORE, poolId, claimerId)\r\n    returns (uint256 feeToSend)\r\n  {\r\n    require(\r\n      !_isOracleActive(_DATASTORE, poolId),\r\n      \"StakeUtils: Oracle is active\"\r\n    );\r\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, poolId, claimerId);\r\n\r\n    uint256 surplus = _DATASTORE.readUintForId(poolId, \"surplus\");\r\n    require(\r\n      fee > 0 && surplus > 0,\r\n      \"StakeUtils: fee and surplus should be bigger than zero\"\r\n    );\r\n\r\n    feeToSend = fee > surplus ? surplus : fee;\r\n    _DATASTORE.writeUintForId(poolId, \"surplus\", surplus - feeToSend);\r\n    uint256 _unclaimedFees = _DATASTORE.readUintForId(poolId, \"unclaimedFees\");\r\n\r\n    _DATASTORE.writeUintForId(\r\n      poolId,\r\n      \"unclaimedFees\",\r\n      _unclaimedFees - feeToSend\r\n    );\r\n\r\n    address receiver = payable(\r\n      _DATASTORE.readAddressForId(claimerId, \"maintainer\")\r\n    );\r\n\r\n    // set the accumulatedFee to zero\r\n    _DATASTORE.writeUintForId(poolId, key, fee - feeToSend);\r\n\r\n    (bool sent, ) = receiver.call{ value: feeToSend }(\"\");\r\n    require(sent, \"StakeUtils: Failed to send Avax\");\r\n    emit FeeClaimed(poolId, claimerId, feeToSend);\r\n  }\r\n\r\n  /**\r\n   * @notice                      ** WITHDRAWAL POOL specific functions **\r\n   */\r\n\r\n  function isStakingPausedForPool(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) public view returns (bool) {\r\n    // minting is paused when length != 0\r\n    return _DATASTORE.readBytesForId(_id, \"stakePaused\").length != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice pausing only prevents new staking operations.\r\n   * when a pool is paused for staking there are NO new funds to be minted, NO surplus.\r\n   */\r\n  function pauseStakingForPool(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) external onlyMaintainer(_DATASTORE, _id) {\r\n    _DATASTORE.writeBytesForId(_id, \"stakePaused\", bytes(\"1\")); // meaning true, importantly length > 0\r\n    emit PausedPool(_id);\r\n  }\r\n\r\n  function unpauseStakingForPool(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) external onlyMaintainer(_DATASTORE, _id) {\r\n    _DATASTORE.writeBytesForId(_id, \"stakePaused\", bytes(\"\")); // meaning false, importantly length = 0\r\n    emit UnpausedPool(_id);\r\n  }\r\n\r\n  function withdrawalPoolById(\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) public view returns (ISwap) {\r\n    return ISwap(_DATASTORE.readAddressForId(_id, \"withdrawalPool\"));\r\n  }\r\n\r\n  function LPTokenById(DataStoreUtils.DataStore storage _DATASTORE, uint256 _id)\r\n    public\r\n    view\r\n    returns (LPToken)\r\n  {\r\n    return LPToken(_DATASTORE.readAddressForId(_id, \"LPToken\"));\r\n  }\r\n\r\n  /**\r\n   * @notice deploys a new withdrawal pool using DEFAULT_SWAP_POOL\r\n   * @dev sets the withdrawal pool with respective\r\n   */\r\n  function deployWithdrawalPool(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 _id\r\n  ) external returns (address WithdrawalPool) {\r\n    require(_id > 0, \"StakeUtils: id should be > 0\");\r\n    require(\r\n      _DATASTORE.readAddressForId(_id, \"withdrawalPool\") == address(0),\r\n      \"StakeUtils: withdrawalPool already exists\"\r\n    );\r\n\r\n    WithdrawalPool = _clone(self.DEFAULT_SWAP_POOL);\r\n\r\n    address _LPToken = ISwap(WithdrawalPool).initialize(\r\n      address(getgAVAX(self)),\r\n      _id,\r\n      string(\r\n        abi.encodePacked(\r\n          _DATASTORE.readBytesForId(_id, \"name\"),\r\n          \"-Geode WP Token\"\r\n        )\r\n      ),\r\n      string(abi.encodePacked(_DATASTORE.readBytesForId(_id, \"name\"), \"-WP\")),\r\n      self.DEFAULT_A,\r\n      self.DEFAULT_FEE,\r\n      self.DEFAULT_ADMIN_FEE,\r\n      self.DEFAULT_LP_TOKEN\r\n    );\r\n\r\n    // initially 1 AVAX = 1 gAVAX\r\n    _setPricePerShare(self, 1 ether, _id);\r\n    _DATASTORE.writeAddressForId(_id, \"withdrawalPool\", WithdrawalPool);\r\n    _DATASTORE.writeAddressForId(_id, \"LPToken\", _LPToken);\r\n\r\n    // approve token so we can use it in buybacks\r\n    getgAVAX(self).setApprovalForAll(WithdrawalPool, true);\r\n    LPTokenById(_DATASTORE, _id).approve(WithdrawalPool, type(uint256).max);\r\n  }\r\n\r\n  /**\r\n   * @notice staking function. buys if price is low, mints new tokens if a surplus is sent (extra avax through msg.value)\r\n   * @param poolId id of the staking pool, withdrawal pool and gAVAX to be used.\r\n   * @param minGavax swap op param\r\n   * @param deadline swap op param\r\n    // d  m.v\r\n    // 100 10 => buyback\r\n    // 100 100  => buyback\r\n    // 10 100  =>  buyback + mint\r\n    // 0 x => mint\r\n   */\r\n  function stake(\r\n    StakePool storage self,\r\n    DataStoreUtils.DataStore storage _DATASTORE,\r\n    uint256 poolId,\r\n    uint256 minGavax,\r\n    uint256 deadline\r\n  ) external returns (uint256 totalgAvax) {\r\n    require(msg.value > 0, \"GeodePortal: no avax given\");\r\n    require(\r\n      !isStakingPausedForPool(_DATASTORE, poolId),\r\n      \"StakeUtils: minting is paused\"\r\n    );\r\n    uint256 debt = withdrawalPoolById(_DATASTORE, poolId).getDebt();\r\n    if (debt >= msg.value) {\r\n      return\r\n        _buyback(\r\n          self,\r\n          _DATASTORE,\r\n          msg.sender,\r\n          poolId,\r\n          msg.value,\r\n          minGavax,\r\n          deadline\r\n        );\r\n    } else {\r\n      uint256 boughtGavax = 0;\r\n      uint256 remAvax = msg.value;\r\n      if (debt > IGNORABLE_DEBT) {\r\n        boughtGavax = _buyback(\r\n          self,\r\n          _DATASTORE,\r\n          msg.sender,\r\n          poolId,\r\n          debt,\r\n          0,\r\n          deadline\r\n        );\r\n        remAvax -= debt;\r\n      }\r\n      uint256 mintGavax = (\r\n        ((remAvax * gAVAX_DENOMINATOR) / oraclePrice(self, poolId))\r\n      );\r\n      _mint(self.gAVAX, msg.sender, poolId, mintGavax);\r\n      _DATASTORE.writeUintForId(\r\n        poolId,\r\n        \"surplus\",\r\n        _DATASTORE.readUintForId(poolId, \"surplus\") + remAvax\r\n      );\r\n      require(\r\n        boughtGavax + mintGavax >= minGavax,\r\n        \"StakeUtils: less than minGavax\"\r\n      );\r\n      return boughtGavax + mintGavax;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/IPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"../Portal/utils/DataStoreLib.sol\";\r\nimport \"../Portal/utils/GeodeUtilsLib.sol\";\r\nimport \"../Portal/utils/StakeUtilsLib.sol\";\r\nimport \"../interfaces/IgAVAX.sol\";\r\n\r\ninterface IPortal {\r\n  function initialize(\r\n    address _GOVERNANCE,\r\n    address _ORACLE,\r\n    address _gAVAX,\r\n    address _DEFAULT_SWAP_POOL,\r\n    address _DEFAULT_INTERFACE,\r\n    address _DEFAULT_LP_TOKEN\r\n  ) external;\r\n\r\n  function pause() external;\r\n\r\n  function unpause() external;\r\n\r\n  function getVersion() external view returns (uint256);\r\n\r\n  function gAVAX() external view returns (address);\r\n\r\n  function getSenate() external view returns (address);\r\n\r\n  function getGovernance() external view returns (address);\r\n\r\n  function getOperationFee() external view returns (uint256);\r\n\r\n  function getMaxOperationFee() external view returns (uint256);\r\n\r\n  function getSenateExpireTimestamp() external view returns (uint256);\r\n\r\n  function getFeeDenominator() external view returns (uint256);\r\n\r\n  function getStakePoolParams()\r\n    external\r\n    view\r\n    returns (StakeUtils.StakePool memory);\r\n\r\n  function getIdsByType(uint256 _type) external view returns (uint256[] memory);\r\n\r\n  function getIdFromName(string calldata _name)\r\n    external\r\n    pure\r\n    returns (uint256 _id);\r\n\r\n  function getNameFromId(uint256 _id) external view returns (bytes memory);\r\n\r\n  function getCONTROLLERFromId(uint256 _id) external view returns (address);\r\n\r\n  function getMaintainerFromId(uint256 _id) external view returns (address);\r\n\r\n  function getMaintainerFeeFromId(uint256 _id) external view returns (uint256);\r\n\r\n  function planetCurrentInterface(uint256 _id) external view returns (address);\r\n\r\n  function planetWithdrawalPool(uint256 _id) external view returns (address);\r\n\r\n  function planetLPToken(uint256 _id) external view returns (address);\r\n\r\n  function planetActiveOperator(uint256 _id) external view returns (uint256);\r\n\r\n  function changeIdCONTROLLER(uint256 _id, address _newCONTROLLER) external;\r\n\r\n  function changeIdMaintainer(uint256 _id, address _newMaintainer) external;\r\n\r\n  function setMaintainerFee(uint256 _id, uint256 _newFee) external;\r\n\r\n  function setOperationFee(uint256 _newFee) external returns (bool success);\r\n\r\n  function setMaxOperationFee(uint256 _newFee) external returns (bool success);\r\n\r\n  function setMaxMaintainerFee(uint256 _newFee) external;\r\n\r\n  function setDefaultInterface(address _newDefault) external;\r\n\r\n  function activateOperator(uint256 _id, uint256 _activeId)\r\n    external\r\n    returns (bool);\r\n\r\n  function deactivateOperator(uint256 _id, uint256 _deactivedId)\r\n    external\r\n    returns (bool);\r\n\r\n  function setPlanetInterface(\r\n    uint256 _id,\r\n    address _Interface,\r\n    bool isSet\r\n  ) external;\r\n\r\n  function setPBank(\r\n    uint256 operatorId,\r\n    uint256 planetId,\r\n    bytes memory pBank\r\n  ) external;\r\n\r\n  function getPBank(uint256 operatorId, uint256 planetId)\r\n    external\r\n    view\r\n    returns (bytes memory);\r\n\r\n  function getProposal(uint256 id)\r\n    external\r\n    view\r\n    returns (GeodeUtils.Proposal memory);\r\n\r\n  function newProposal(\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _proposalDuration,\r\n    bytes calldata _name\r\n  ) external;\r\n\r\n  function approveProposal(uint256 _id) external;\r\n\r\n  function approveSenate(uint256 proposalId, uint256 electorId) external;\r\n\r\n  function planetOraclePrice(uint256 _id)\r\n    external\r\n    view\r\n    returns (uint256 _pricePershare);\r\n\r\n  function isOracleActive(uint256 _planetId) external view returns (bool);\r\n\r\n  function reportOracle(\r\n    uint256 _reportedTimeStamp,\r\n    uint256 _planetId,\r\n    uint256[] memory _opIds,\r\n    uint256[] memory _pBalanceIncreases\r\n  ) external returns (uint256 price);\r\n\r\n  function planetSurplus(uint256 planetId) external view returns (uint256);\r\n\r\n  function planetClaimableSurplus(uint256 planetId) external returns (uint256);\r\n\r\n  function unclaimedFees(uint256 planetId) external view returns (uint256 fee);\r\n\r\n  function accumulatedFee(uint256 planetId, uint256 claimerId)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function planetDebt(uint256 planetId)\r\n    external\r\n    view\r\n    returns (uint256 debtInAvax);\r\n\r\n  function planetPBalance(uint256 planetId) external view returns (uint256);\r\n\r\n  function payDebt(uint256 planetId, uint256 operatorId) external payable;\r\n\r\n  function claimSurplus(uint256 planetId) external returns (bool success);\r\n\r\n  function claimFee(uint256 planetId, uint256 claimerId)\r\n    external\r\n    returns (uint256 feeToSend);\r\n\r\n  function isStakingPausedForPool(uint256 _id) external view returns (bool);\r\n\r\n  function pauseStakingForPool(uint256 id) external;\r\n\r\n  function unpauseStakingForPool(uint256 id) external;\r\n\r\n  function stake(\r\n    uint256 planetId,\r\n    uint256 minGavax,\r\n    uint256 deadline\r\n  ) external payable returns (uint256 totalgAvax);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"./IgAVAX.sol\";\r\n\r\ninterface ISwap {\r\n  // pool data view functions\r\n  function getERC1155() external view returns (address);\r\n\r\n  function getA() external view returns (uint256);\r\n\r\n  function getAPrecise() external view returns (uint256);\r\n\r\n  function getToken() external view returns (uint256);\r\n\r\n  function getTokenBalance(uint8 index) external view returns (uint256);\r\n\r\n  function getVirtualPrice() external view returns (uint256);\r\n\r\n  function getDebt() external view returns (uint256);\r\n\r\n  function getAdminBalance(uint256 index) external view returns (uint256);\r\n\r\n  // min return calculation functions\r\n  function calculateSwap(\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx\r\n  ) external view returns (uint256);\r\n\r\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function calculateRemoveLiquidity(uint256 amount)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n  function calculateRemoveLiquidityOneToken(\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex\r\n  ) external view returns (uint256 availableTokenAmount);\r\n\r\n  // state modifying functions\r\n  function initialize(\r\n    address _gAvax,\r\n    uint256 _pooledTokenId,\r\n    string memory lpTokenName,\r\n    string memory lpTokenSymbol,\r\n    uint256 _a,\r\n    uint256 _fee,\r\n    uint256 _adminFee,\r\n    address lpTokenTargetAddress\r\n  ) external returns (address lpToken);\r\n\r\n  function swap(\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx,\r\n    uint256 minDy,\r\n    uint256 deadline\r\n  ) external payable returns (uint256);\r\n\r\n  function addLiquidity(\r\n    uint256[] calldata amounts,\r\n    uint256 minToMint,\r\n    uint256 deadline\r\n  ) external payable returns (uint256);\r\n\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    uint256[] calldata minAmounts,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory);\r\n\r\n  function removeLiquidityOneToken(\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex,\r\n    uint256 minAmount,\r\n    uint256 deadline\r\n  ) external returns (uint256);\r\n\r\n  function removeLiquidityImbalance(\r\n    uint256[] calldata amounts,\r\n    uint256 maxBurnAmount,\r\n    uint256 deadline\r\n  ) external returns (uint256);\r\n\r\n  function withdrawAdminFees() external;\r\n\r\n  function setAdminFee(uint256 newAdminFee) external;\r\n\r\n  function setSwapFee(uint256 newSwapFee) external;\r\n\r\n  function rampA(uint256 futureA, uint256 futureTime) external;\r\n\r\n  function stopRampA() external;\r\n}\r\n"
    },
    "contracts/interfaces/IgAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\n\r\ninterface IgAVAX {\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n  function uri(uint256) external view returns (string memory);\r\n\r\n  function balanceOf(address account, uint256 id)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n  function setApprovalForAll(address operator, bool approved) external;\r\n\r\n  function isApprovedForAll(address account, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) external;\r\n\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) external;\r\n\r\n  function burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 value\r\n  ) external;\r\n\r\n  function burnBatch(\r\n    address account,\r\n    uint256[] memory ids,\r\n    uint256[] memory values\r\n  ) external;\r\n\r\n  function totalSupply(uint256 id) external view returns (uint256);\r\n\r\n  function exists(uint256 id) external view returns (bool);\r\n\r\n  function mint(\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) external;\r\n\r\n  function mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) external;\r\n\r\n  function pause() external;\r\n\r\n  function unpause() external;\r\n\r\n  function pricePerShare(uint256 _id) external view returns (uint256);\r\n\r\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id) external;\r\n\r\n  function isInterface(address operator, uint256 id)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  function setInterface(\r\n    address _Interface,\r\n    uint256 _id,\r\n    bool isSet\r\n  ) external;\r\n}\r\n"
    },
    "contracts/WithdrawalPool/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @title Liquidity Provider Token\r\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\r\n * It is used to represent user's shares when providing liquidity to swap contracts.\r\n * @dev Only Swap contracts should initialize and own LPToken contracts.\r\n */\r\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\r\n  /**\r\n   * @notice Initializes this LPToken contract with the given name and symbol\r\n   * @dev The caller of this function will become the owner. A Swap contract should call this\r\n   * in its initializer function.\r\n   * @param name name of this token\r\n   * @param symbol symbol of this token\r\n   */\r\n  function initialize(string memory name, string memory symbol)\r\n    external\r\n    initializer\r\n    returns (bool)\r\n  {\r\n    __Context_init_unchained();\r\n    __ERC20_init_unchained(name, symbol);\r\n    __Ownable_init_unchained();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Mints the given amount of LPToken to the recipient.\r\n   * @dev only owner can call this mint function\r\n   * @param recipient address of account to receive the tokens\r\n   * @param amount amount of tokens to mint\r\n   */\r\n  function mint(address recipient, uint256 amount) external onlyOwner {\r\n    require(amount != 0, \"LPToken: cannot mint 0\");\r\n    _mint(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\r\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\r\n   * This assumes the owner is set to a Swap contract's address.\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual override(ERC20Upgradeable) {\r\n    super._beforeTokenTransfer(from, to, amount);\r\n    require(to != address(this), \"LPToken: cannot send to itself\");\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/WithdrawalPool/utils/SwapUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"../../interfaces/IgAVAX.sol\";\r\nimport \"./AmplificationUtils.sol\";\r\nimport \"../LPToken.sol\";\r\nimport \"./MathUtils.sol\";\r\n\r\n/**\r\n * @title SwapUtils library\r\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\r\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\r\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\r\n * Admin functions should be protected within contracts using this library.\r\n */\r\nlibrary SwapUtils {\r\n  using MathUtils for uint256;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  event TokenSwap(\r\n    address indexed buyer,\r\n    uint256 tokensSold,\r\n    uint256 tokensBought,\r\n    uint128 soldId,\r\n    uint128 boughtId\r\n  );\r\n  event AddLiquidity(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256[] fees,\r\n    uint256 invariant,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event RemoveLiquidity(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event RemoveLiquidityOne(\r\n    address indexed provider,\r\n    uint256 lpTokenAmount,\r\n    uint256 lpTokenSupply,\r\n    uint256 boughtId,\r\n    uint256 tokensBought\r\n  );\r\n  event RemoveLiquidityImbalance(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256[] fees,\r\n    uint256 invariant,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event NewAdminFee(uint256 newAdminFee);\r\n  event NewSwapFee(uint256 newSwapFee);\r\n\r\n  struct Swap {\r\n    // variables around the ramp management of A,\r\n    // the amplification coefficient * n * (n - 1)\r\n    // see https://curve.fi/stableswap-paper.pdf for details\r\n    uint256 initialA;\r\n    uint256 futureA;\r\n    uint256 initialATime;\r\n    uint256 futureATime;\r\n    // fee calculation\r\n    uint256 swapFee;\r\n    uint256 adminFee;\r\n    LPToken lpToken;\r\n    uint256 pooledTokenId;\r\n    // wETH2 contract reference\r\n    IgAVAX referenceForPooledTokens;\r\n    // the pool balance of each token\r\n    // the contract's actual token balance might differ\r\n    uint256[] balances;\r\n  }\r\n\r\n  // Struct storing variables used in calculations in the\r\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\r\n  struct CalculateWithdrawOneTokenDYInfo {\r\n    uint256 d0;\r\n    uint256 d1;\r\n    uint256 newY;\r\n    uint256 feePerToken;\r\n    uint256 preciseA;\r\n  }\r\n\r\n  // Struct storing variables used in calculations in the\r\n  // {add,remove}Liquidity functions to avoid stack too deep errors\r\n  struct ManageLiquidityInfo {\r\n    uint256 d0;\r\n    uint256 d1;\r\n    uint256 d2;\r\n    uint256 preciseA;\r\n    LPToken lpToken;\r\n    uint256 totalSupply;\r\n    uint256[] balances;\r\n  }\r\n\r\n  // the precision all pools tokens will be converted to\r\n  uint8 public constant POOL_PRECISION_DECIMALS = 18;\r\n\r\n  // the denominator used to calculate admin and LP fees. For example, an\r\n  // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\r\n  uint256 private constant FEE_DENOMINATOR = 10**10;\r\n\r\n  // Max swap fee is 1% or 100bps of each swap\r\n  uint256 public constant MAX_SWAP_FEE = 10**8;\r\n\r\n  // Max adminFee is 100% of the swapFee\r\n  // adminFee does not add additional fee on top of swapFee\r\n  // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\r\n  // users but only on the earnings of LPs\r\n  uint256 public constant MAX_ADMIN_FEE = 10**10;\r\n\r\n  // Constant value used as max loop limit\r\n  uint256 private constant MAX_LOOP_LIMIT = 256;\r\n\r\n  /*** VIEW & PURE FUNCTIONS ***/\r\n\r\n  function _getAPrecise(Swap storage self) internal view returns (uint256) {\r\n    return AmplificationUtils._getAPrecise(self);\r\n  }\r\n\r\n  /// @dev this function assumes prices are sent with the indexes that [avax,Gavax]\r\n  function _pricedInBatch(Swap storage self, uint256[] memory balances)\r\n    internal\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256[] memory _p = new uint256[](balances.length);\r\n    _p[0] = balances[0];\r\n    _p[1] =\r\n      (balances[1] *\r\n        IgAVAX(self.referenceForPooledTokens).pricePerShare(\r\n          self.pooledTokenId\r\n        )) /\r\n      1e18;\r\n    return _p;\r\n  }\r\n\r\n  function _pricedOut(\r\n    Swap storage self,\r\n    uint256 balance,\r\n    uint256 i\r\n  ) internal view returns (uint256) {\r\n    return\r\n      i == 1\r\n        ? (balance * 1e18) /\r\n          IgAVAX(self.referenceForPooledTokens).pricePerShare(\r\n            self.pooledTokenId\r\n          )\r\n        : balance;\r\n  }\r\n\r\n  function _pricedIn(\r\n    Swap storage self,\r\n    uint256 balance,\r\n    uint256 i\r\n  ) internal view returns (uint256) {\r\n    return\r\n      i == 1\r\n        ? (balance *\r\n          IgAVAX(self.referenceForPooledTokens).pricePerShare(\r\n            self.pooledTokenId\r\n          )) / 1e18\r\n        : balance;\r\n  }\r\n\r\n  /// @dev this function assumes prices are sent with the indexes that [avax,Gavax]\r\n  function _pricedOutBatch(Swap storage self, uint256[] memory balances)\r\n    internal\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256[] memory _p = new uint256[](balances.length);\r\n    _p[0] = balances[0];\r\n    _p[1] =\r\n      (balances[1] * 1e18) /\r\n      IgAVAX(self.referenceForPooledTokens).pricePerShare(self.pooledTokenId);\r\n    return _p;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate the dy, the amount of selected token that user receives and\r\n   * the fee of withdrawing in one token\r\n   * @param tokenAmount the amount to withdraw in the pool's precision\r\n   * @param tokenIndex which token will be withdrawn\r\n   * @param self Swap struct to read from\r\n   * @return the amount of token user will receive\r\n   */\r\n  function calculateWithdrawOneToken(\r\n    Swap storage self,\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex\r\n  ) external view returns (uint256) {\r\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\r\n      self,\r\n      tokenAmount,\r\n      tokenIndex,\r\n      self.lpToken.totalSupply()\r\n    );\r\n    return availableTokenAmount;\r\n  }\r\n\r\n  function _calculateWithdrawOneToken(\r\n    Swap storage self,\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex,\r\n    uint256 totalSupply\r\n  ) internal view returns (uint256, uint256) {\r\n    uint256 dy;\r\n    uint256 newY;\r\n    uint256 currentY;\r\n\r\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(\r\n      self,\r\n      tokenIndex,\r\n      tokenAmount,\r\n      totalSupply\r\n    );\r\n\r\n    // dy_0 (without fees)\r\n    // dy, dy_0 - dy\r\n\r\n    uint256 dySwapFee = currentY - newY - dy;\r\n\r\n    return (dy, dySwapFee);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate the dy of withdrawing in one token\r\n   * @param self Swap struct to read from\r\n   * @param tokenIndex which token will be withdrawn\r\n   * @param tokenAmount the amount to withdraw in the pools precision\r\n   * @return the d and the new y after withdrawing one token\r\n   */\r\n  function calculateWithdrawOneTokenDY(\r\n    Swap storage self,\r\n    uint8 tokenIndex,\r\n    uint256 tokenAmount,\r\n    uint256 totalSupply\r\n  )\r\n    internal\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    // Get the current D, then solve the stableswap invariant\r\n    // y_i for D - tokenAmount\r\n\r\n    require(tokenIndex < 2, \"Token index out of range\");\r\n\r\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    v.preciseA = _getAPrecise(self);\r\n    v.d0 = getD(_pricedInBatch(self, self.balances), v.preciseA);\r\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\r\n\r\n    require(\r\n      tokenAmount <= self.balances[tokenIndex],\r\n      \"Withdraw exceeds available\"\r\n    );\r\n\r\n    v.newY = _pricedOut(\r\n      self,\r\n      getYD(v.preciseA, tokenIndex, _pricedInBatch(self, self.balances), v.d1),\r\n      tokenIndex\r\n    );\r\n\r\n    uint256[] memory xpReduced = new uint256[](2);\r\n\r\n    v.feePerToken = self.swapFee / 2;\r\n    for (uint256 i = 0; i < 2; i++) {\r\n      uint256 xpi = self.balances[i];\r\n      // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\r\n      // else dxExpected = xp[i] - (xp[i] * d1 / d0)\r\n      // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\r\n      xpReduced[i] =\r\n        xpi -\r\n        (((\r\n          (i == tokenIndex)\r\n            ? (xpi * v.d1) / v.d0 - v.newY\r\n            : xpi - ((xpi * v.d1) / (v.d0))\r\n        ) * (v.feePerToken)) / (FEE_DENOMINATOR));\r\n    }\r\n\r\n    uint256 dy = xpReduced[tokenIndex] -\r\n      _pricedOut(\r\n        self,\r\n        (getYD(v.preciseA, tokenIndex, _pricedInBatch(self, xpReduced), v.d1)),\r\n        tokenIndex\r\n      );\r\n    dy = dy - 1;\r\n\r\n    return (dy, v.newY, self.balances[tokenIndex]);\r\n  }\r\n\r\n  /**\r\n   * @notice Get Debt, The amount of buyback for stable pricing.\r\n   * @param xp a  set of pool balances. Array should be the same cardinality\r\n   * as the pool.\r\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\r\n   * See the StableSwap paper for details\r\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\r\n   */\r\n  function _getDebt(\r\n    Swap storage self,\r\n    uint256[] memory xp,\r\n    uint256 a\r\n  ) internal view returns (uint256) {\r\n    uint256 halfD = getD(xp, a) / 2;\r\n    if (xp[0] >= halfD) {\r\n      return 0;\r\n    } else {\r\n      uint256 dy = xp[1] - halfD;\r\n      uint256 feeHalf = (dy * self.swapFee) / FEE_DENOMINATOR / 2;\r\n      uint256 debt = halfD - xp[0] + feeHalf;\r\n      return debt;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\r\n   */\r\n  function getDebt(Swap storage self) external view returns (uint256) {\r\n    // might change when price is in.\r\n    return\r\n      _getDebt(self, _pricedInBatch(self, self.balances), _getAPrecise(self));\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate the price of a token in the pool with given\r\n   *  balances and a particular D.\r\n   *\r\n   * @dev This is accomplished via solving the invariant iteratively.\r\n   * See the StableSwap paper and Curve.fi implementation for further details.\r\n   *\r\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n   * x_1**2 + b*x_1 = c\r\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n   *\r\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\r\n   * @param tokenIndex Index of token we are calculating for.\r\n   * @param xp a  set of pool balances. Array should be\r\n   * the same cardinality as the pool.\r\n   * @param d the stableswap invariant\r\n   * @return the price of the token, in the same precision as in xp\r\n   */\r\n  function getYD(\r\n    uint256 a,\r\n    uint8 tokenIndex,\r\n    uint256[] memory xp,\r\n    uint256 d\r\n  ) internal pure returns (uint256) {\r\n    uint256 numTokens = 2;\r\n    require(tokenIndex < numTokens, \"Token not found\");\r\n\r\n    uint256 c = d;\r\n    uint256 s;\r\n    uint256 nA = a * numTokens;\r\n\r\n    for (uint256 i = 0; i < numTokens; i++) {\r\n      if (i != tokenIndex) {\r\n        s = s + xp[i];\r\n        c = (c * d) / (xp[i] * (numTokens));\r\n        // If we were to protect the division loss we would have to keep the denominator separate\r\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n        // c = c * D * D * D * ... overflow!\r\n      }\r\n    }\r\n    c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\r\n\r\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\r\n    uint256 yPrev;\r\n    uint256 y = d;\r\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n      yPrev = y;\r\n      y = ((y * y) + c) / (2 * y + b - d);\r\n      if (y.within1(yPrev)) {\r\n        return y;\r\n      }\r\n    }\r\n    revert(\"Approximation did not converge\");\r\n  }\r\n\r\n  /**\r\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\r\n   * @param xp a  set of pool balances. Array should be the same cardinality\r\n   * as the pool.\r\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\r\n   * See the StableSwap paper for details\r\n   * @return the invariant, at the precision of the pool\r\n   */\r\n  function getD(uint256[] memory xp, uint256 a)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 numTokens = 2;\r\n    uint256 s = xp[0] + xp[1];\r\n    if (s == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 prevD;\r\n    uint256 d = s;\r\n    uint256 nA = a * numTokens;\r\n\r\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n      uint256 dP = (d**(numTokens + 1)) /\r\n        (numTokens**numTokens * xp[0] * xp[1]);\r\n      prevD = d;\r\n      d =\r\n        ((((nA * s) / AmplificationUtils.A_PRECISION) + dP * numTokens) * (d)) /\r\n        (((nA - AmplificationUtils.A_PRECISION) * (d)) /\r\n          (AmplificationUtils.A_PRECISION) +\r\n          ((numTokens + 1) * dP));\r\n\r\n      if (d.within1(prevD)) {\r\n        return d;\r\n      }\r\n    }\r\n\r\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\r\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\r\n    // function which does not rely on D.\r\n    revert(\"D does not converge\");\r\n  }\r\n\r\n  /**\r\n   * @notice Get the virtual price, to help calculate profit\r\n   * @param self Swap struct to read from\r\n   * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\r\n   */\r\n  function getVirtualPrice(Swap storage self) external view returns (uint256) {\r\n    uint256 d = getD(_pricedInBatch(self, self.balances), _getAPrecise(self));\r\n    LPToken lpToken = self.lpToken;\r\n    uint256 supply = lpToken.totalSupply();\r\n    if (supply > 0) {\r\n      return (d * 10**uint256(POOL_PRECISION_DECIMALS)) / supply;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate the new balances of the tokens given the indexes of the token\r\n   * that is swapped from (FROM) and the token that is swapped to (TO).\r\n   * This function is used as a helper function to calculate how much TO token\r\n   * the user should receive on swap.\r\n   *\r\n   * @param preciseA precise form of amplification coefficient\r\n   * @param tokenIndexFrom index of FROM token\r\n   * @param tokenIndexTo index of TO token\r\n   * @param x the new total amount of FROM token\r\n   * @param xp balances of the tokens in the pool\r\n   * @return the amount of TO token that should remain in the pool\r\n   */\r\n  function getY(\r\n    uint256 preciseA,\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 x,\r\n    uint256[] memory xp\r\n  ) internal pure returns (uint256) {\r\n    uint256 numTokens = 2;\r\n    require(tokenIndexFrom != tokenIndexTo, \"Can't compare token to itself\");\r\n    require(\r\n      tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\r\n      \"Tokens must be in pool\"\r\n    );\r\n\r\n    uint256 d = getD(xp, preciseA);\r\n    uint256 c = d;\r\n    uint256 s = x;\r\n    uint256 nA = numTokens * (preciseA);\r\n\r\n    c = (c * d) / (x * numTokens);\r\n    c = (c * d * (AmplificationUtils.A_PRECISION)) / (nA * numTokens);\r\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\r\n\r\n    uint256 yPrev;\r\n    uint256 y = d;\r\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n      yPrev = y;\r\n      y = ((y * y) + c) / (2 * y + b - d);\r\n      if (y.within1(yPrev)) {\r\n        return y;\r\n      }\r\n    }\r\n    revert(\"Approximation did not converge\");\r\n  }\r\n\r\n  /**\r\n   * @notice Externally calculates a swap between two tokens.\r\n   * @param self Swap struct to read from\r\n   * @param tokenIndexFrom the token to sell\r\n   * @param tokenIndexTo the token to buy\r\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n   * use the amount that gets transferred after the fee.\r\n   * @return dy the number of tokens the user will get\r\n   */\r\n  function calculateSwap(\r\n    Swap storage self,\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx\r\n  ) external view returns (uint256 dy) {\r\n    (dy, ) = _calculateSwap(\r\n      self,\r\n      tokenIndexFrom,\r\n      tokenIndexTo,\r\n      dx,\r\n      self.balances\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internally calculates a swap between two tokens.\r\n   *\r\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\r\n   * using the token contracts.\r\n   *\r\n   * @param self Swap struct to read from\r\n   * @param tokenIndexFrom the token to sell\r\n   * @param tokenIndexTo the token to buy\r\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n   * use the amount that gets transferred after the fee.\r\n   * @return dy the number of tokens the user will get\r\n   * @return dyFee the associated fee\r\n   */\r\n  function _calculateSwap(\r\n    Swap storage self,\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx,\r\n    uint256[] memory balances\r\n  ) internal view returns (uint256 dy, uint256 dyFee) {\r\n    require(\r\n      tokenIndexFrom < balances.length && tokenIndexTo < balances.length,\r\n      \"Token index out of range\"\r\n    );\r\n    uint256 x = _pricedIn(self, dx + balances[tokenIndexFrom], tokenIndexFrom);\r\n\r\n    uint256[] memory pricedBalances = _pricedInBatch(self, balances);\r\n\r\n    uint256 y = _pricedOut(\r\n      self,\r\n      getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, pricedBalances),\r\n      tokenIndexTo // => not id, index !!!\r\n    );\r\n    dy = balances[tokenIndexTo] - y - 1;\r\n    dyFee = (dy * self.swapFee) / (FEE_DENOMINATOR);\r\n    dy = dy - dyFee;\r\n  }\r\n\r\n  /**\r\n   * @notice A simple method to calculate amount of each underlying\r\n   * tokens that is returned upon burning given amount of\r\n   * LP tokens\r\n   *\r\n   * @param amount the amount of LP tokens that would to be burned on\r\n   * withdrawal\r\n   * @return array of amounts of tokens user will receive\r\n   */\r\n  function calculateRemoveLiquidity(Swap storage self, uint256 amount)\r\n    external\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    return\r\n      _pricedOutBatch(\r\n        self,\r\n        _calculateRemoveLiquidity(\r\n          _pricedInBatch(self, self.balances),\r\n          amount,\r\n          self.lpToken.totalSupply()\r\n        )\r\n      );\r\n  }\r\n\r\n  function _calculateRemoveLiquidity(\r\n    uint256[] memory balances,\r\n    uint256 amount,\r\n    uint256 totalSupply\r\n  ) internal pure returns (uint256[] memory) {\r\n    require(amount <= totalSupply, \"Cannot exceed total supply\");\r\n\r\n    uint256[] memory amounts = new uint256[](2);\r\n\r\n    amounts[0] = (balances[0] * amount) / totalSupply;\r\n    amounts[1] = (balances[1] * amount) / totalSupply;\r\n\r\n    return amounts;\r\n  }\r\n\r\n  /**\r\n   * @notice A simple method to calculate prices from deposits or\r\n   * withdrawals, excluding fees but including slippage. This is\r\n   * helpful as an input into the various \"min\" parameters on calls\r\n   * to fight front-running\r\n   *\r\n   * @dev This shouldn't be used outside frontends for user estimates.\r\n   *\r\n   * @param self Swap struct to read from\r\n   * @param amounts an array of token amounts to deposit or withdrawal,\r\n   * corresponding to pooledTokens. The amount should be in each\r\n   * pooled token's native precision. If a token charges a fee on transfers,\r\n   * use the amount that gets transferred after the fee.\r\n   * @param deposit whether this is a deposit or a withdrawal\r\n   * @return if deposit was true, total amount of lp token that will be minted and if\r\n   * deposit was false, total amount of lp token that will be burned\r\n   */\r\n  function calculateTokenAmount(\r\n    Swap storage self,\r\n    uint256[] calldata amounts,\r\n    bool deposit\r\n  ) external view returns (uint256) {\r\n    uint256 a = _getAPrecise(self);\r\n    uint256[] memory balances = self.balances;\r\n\r\n    uint256 d0 = getD(_pricedInBatch(self, balances), a);\r\n    for (uint256 i = 0; i < balances.length; i++) {\r\n      if (deposit) {\r\n        balances[i] = balances[i] + amounts[i];\r\n      } else {\r\n        require(\r\n          amounts[i] <= balances[i],\r\n          \"Cannot withdraw more than available\"\r\n        );\r\n        balances[i] = balances[i] - amounts[i];\r\n      }\r\n    }\r\n    uint256 d1 = getD(_pricedInBatch(self, balances), a);\r\n    uint256 totalSupply = self.lpToken.totalSupply();\r\n\r\n    if (deposit) {\r\n      return ((d1 - d0) * totalSupply) / d0;\r\n    } else {\r\n      return ((d0 - d1) * totalSupply) / d0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice return accumulated amount of admin fees of the token with given index\r\n   * @param self Swap struct to read from\r\n   * @param index Index of the pooled token\r\n   * @return admin balance in the token's precision\r\n   */\r\n  function getAdminBalance(Swap storage self, uint256 index)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < 2, \"Token index out of range\");\r\n    if (index == 0) return address(this).balance - (self.balances[index]);\r\n\r\n    if (index == 1)\r\n      return\r\n        self.referenceForPooledTokens.balanceOf(\r\n          address(this),\r\n          self.pooledTokenId\r\n        ) - (self.balances[index]);\r\n    return 0;\r\n  }\r\n\r\n  /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n  /**\r\n   * @notice swap two tokens in the pool\r\n   * @param self Swap struct to read from and write to\r\n   * @param tokenIndexFrom the token the user wants to sell\r\n   * @param tokenIndexTo the token the user wants to buy\r\n   * @param dx the amount of tokens the user wants to sell\r\n   * @param minDy the min amount the user would like to receive, or revert.\r\n   * @return amount of token user received on swap\r\n   */\r\n  function swap(\r\n    Swap storage self,\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx,\r\n    uint256 minDy\r\n  ) external returns (uint256) {\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n    if (tokenIndexFrom == 0) {\r\n      require(dx == msg.value, \"Cannot swap more/less than you sent\");\r\n    }\r\n    if (tokenIndexFrom == 1) {\r\n      uint256 tokenId = self.pooledTokenId;\r\n      require(\r\n        dx <= wETH2Reference.balanceOf(msg.sender, tokenId),\r\n        \"Cannot swap more than you own\"\r\n      );\r\n\r\n      // Transfer tokens first\r\n      uint256 beforeBalance = wETH2Reference.balanceOf(address(this), tokenId);\r\n      wETH2Reference.safeTransferFrom(\r\n        msg.sender,\r\n        address(this),\r\n        tokenId,\r\n        dx,\r\n        \"\"\r\n      );\r\n\r\n      // Use the actual transferred amount for AMM math\r\n      dx = wETH2Reference.balanceOf(address(this), tokenId) - beforeBalance;\r\n    }\r\n\r\n    uint256 dy;\r\n    uint256 dyFee;\r\n    uint256[] memory balances = self.balances;\r\n    (dy, dyFee) = _calculateSwap(\r\n      self,\r\n      tokenIndexFrom,\r\n      tokenIndexTo,\r\n      dx,\r\n      balances\r\n    );\r\n\r\n    require(dy >= minDy, \"Swap didn't result in min tokens\");\r\n\r\n    uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR;\r\n\r\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\r\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\r\n\r\n    if (tokenIndexTo == 0) {\r\n      (bool sent, ) = payable(msg.sender).call{ value: dy }(\"\");\r\n      require(sent, \"SwapUtils: Failed to send Avax\");\r\n    }\r\n    if (tokenIndexTo == 1) {\r\n      wETH2Reference.safeTransferFrom(\r\n        address(this),\r\n        msg.sender,\r\n        self.pooledTokenId,\r\n        dy,\r\n        \"\"\r\n      );\r\n    }\r\n    emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\r\n\r\n    return dy;\r\n  }\r\n\r\n  /**\r\n   * @notice Add liquidity to the pool\r\n   * @param self Swap struct to read from and write to\r\n   * @param amounts the amounts of each token to add, in their native precision\r\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n   * should mint, otherwise revert. Handy for front-running mitigation\r\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\r\n   * @return amount of LP token user received\r\n   */\r\n  function addLiquidity(\r\n    Swap storage self,\r\n    uint256[] memory amounts,\r\n    uint256 minToMint\r\n  ) external returns (uint256) {\r\n    require(amounts.length == 2, \"Amounts must match pooled tokens\");\r\n    require(\r\n      amounts[0] == msg.value,\r\n      \"SwapUtils: received less or more AVAX than expected\"\r\n    );\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n    // current state\r\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\r\n      0,\r\n      0,\r\n      0,\r\n      _getAPrecise(self),\r\n      self.lpToken,\r\n      0,\r\n      self.balances\r\n    );\r\n    v.totalSupply = v.lpToken.totalSupply();\r\n    if (v.totalSupply != 0) {\r\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\r\n    }\r\n\r\n    uint256[] memory newBalances = new uint256[](2);\r\n    newBalances[0] = v.balances[0] + msg.value;\r\n\r\n    for (uint256 i = 0; i < 2; i++) {\r\n      require(\r\n        v.totalSupply != 0 || amounts[i] > 0,\r\n        \"Must supply all tokens in pool\"\r\n      );\r\n    }\r\n\r\n    {\r\n      // Transfer tokens first\r\n      uint256 beforeBalance = wETH2Reference.balanceOf(\r\n        address(this),\r\n        self.pooledTokenId\r\n      );\r\n      wETH2Reference.safeTransferFrom(\r\n        msg.sender,\r\n        address(this),\r\n        self.pooledTokenId,\r\n        amounts[1],\r\n        \"\"\r\n      );\r\n\r\n      // Update the amounts[] with actual transfer amount\r\n      amounts[1] =\r\n        wETH2Reference.balanceOf(address(this), self.pooledTokenId) -\r\n        beforeBalance;\r\n\r\n      newBalances[1] = v.balances[1] + amounts[1];\r\n    }\r\n\r\n    // invariant after change\r\n    v.d1 = getD(_pricedInBatch(self, newBalances), v.preciseA);\r\n    require(v.d1 > v.d0, \"D should increase\");\r\n\r\n    // updated to reflect fees and calculate the user's LP tokens\r\n    v.d2 = v.d1;\r\n    uint256[] memory fees = new uint256[](2);\r\n\r\n    if (v.totalSupply != 0) {\r\n      uint256 feePerToken = self.swapFee / 2;\r\n      for (uint256 i = 0; i < 2; i++) {\r\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\r\n        fees[i] =\r\n          (feePerToken * (idealBalance.difference(newBalances[i]))) /\r\n          (FEE_DENOMINATOR);\r\n        self.balances[i] =\r\n          newBalances[i] -\r\n          ((fees[i] * (self.adminFee)) / (FEE_DENOMINATOR));\r\n        newBalances[i] = newBalances[i] - (fees[i]);\r\n      }\r\n      v.d2 = getD(_pricedInBatch(self, newBalances), v.preciseA);\r\n    } else {\r\n      // the initial depositor doesn't pay fees\r\n      self.balances = newBalances;\r\n    }\r\n\r\n    uint256 toMint;\r\n    if (v.totalSupply == 0) {\r\n      toMint = v.d1;\r\n    } else {\r\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\r\n    }\r\n\r\n    require(toMint >= minToMint, \"Couldn't mint min requested\");\r\n\r\n    // mint the user's LP tokens\r\n    v.lpToken.mint(msg.sender, toMint);\r\n\r\n    emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\r\n    return toMint;\r\n  }\r\n\r\n  /**\r\n   * @notice Burn LP tokens to remove liquidity from the pool.\r\n   * @dev Liquidity can always be removed, even when the pool is paused.\r\n   * @param self Swap struct to read from and write to\r\n   * @param amount the amount of LP tokens to burn\r\n   * @param minAmounts the minimum amounts of each token in the pool\r\n   * acceptable for this burn. Useful as a front-running mitigation\r\n   * @return amounts of tokens the user received\r\n   */\r\n  function removeLiquidity(\r\n    Swap storage self,\r\n    uint256 amount,\r\n    uint256[] calldata minAmounts\r\n  ) external returns (uint256[] memory) {\r\n    LPToken lpToken = self.lpToken;\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n    require(amount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\r\n    require(minAmounts.length == 2, \"minAmounts must match poolTokens\");\r\n\r\n    uint256[] memory balances = self.balances;\r\n    uint256 totalSupply = lpToken.totalSupply();\r\n\r\n    uint256[] memory amounts = _pricedOutBatch(\r\n      self,\r\n      _calculateRemoveLiquidity(\r\n        _pricedInBatch(self, balances),\r\n        amount,\r\n        totalSupply\r\n      )\r\n    );\r\n\r\n    for (uint256 i = 0; i < amounts.length; i++) {\r\n      require(amounts[i] >= minAmounts[i], \"amounts[i] < minAmounts[i]\");\r\n      self.balances[i] = balances[i] - amounts[i];\r\n    }\r\n\r\n    lpToken.burnFrom(msg.sender, amount);\r\n    (bool sent, ) = payable(msg.sender).call{ value: amounts[0] }(\"\");\r\n    require(sent, \"SwapUtils: Failed to send Avax\");\r\n    wETH2Reference.safeTransferFrom(\r\n      address(this),\r\n      msg.sender,\r\n      self.pooledTokenId,\r\n      amounts[1],\r\n      \"\"\r\n    );\r\n\r\n    emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\r\n    return amounts;\r\n  }\r\n\r\n  /**\r\n   * @notice Remove liquidity from the pool all in one token.\r\n   * @param self Swap struct to read from and write to\r\n   * @param tokenAmount the amount of the lp tokens to burn\r\n   * @param tokenIndex the index of the token you want to receive\r\n   * @param minAmount the minimum amount to withdraw, otherwise revert\r\n   * @return amount chosen token that user received\r\n   */\r\n  function removeLiquidityOneToken(\r\n    Swap storage self,\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex,\r\n    uint256 minAmount\r\n  ) external returns (uint256) {\r\n    LPToken lpToken = self.lpToken;\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n\r\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\r\n    require(tokenIndex < 2, \"Token not found\");\r\n\r\n    uint256 totalSupply = lpToken.totalSupply();\r\n\r\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\r\n      self,\r\n      tokenAmount,\r\n      tokenIndex,\r\n      totalSupply\r\n    );\r\n\r\n    require(dy >= minAmount, \"dy < minAmount\");\r\n\r\n    self.balances[tokenIndex] =\r\n      self.balances[tokenIndex] -\r\n      (dy + ((dyFee * (self.adminFee)) / (FEE_DENOMINATOR)));\r\n    lpToken.burnFrom(msg.sender, tokenAmount);\r\n\r\n    if (tokenIndex == 0) {\r\n      (bool sent, ) = payable(msg.sender).call{ value: dy }(\"\");\r\n      require(sent, \"SwapUtils: Failed to send Avax\");\r\n    }\r\n    if (tokenIndex == 1) {\r\n      wETH2Reference.safeTransferFrom(\r\n        address(this),\r\n        msg.sender,\r\n        self.pooledTokenId,\r\n        dy,\r\n        \"\"\r\n      );\r\n    }\r\n\r\n    emit RemoveLiquidityOne(\r\n      msg.sender,\r\n      tokenAmount,\r\n      totalSupply,\r\n      tokenIndex,\r\n      dy\r\n    );\r\n\r\n    return dy;\r\n  }\r\n\r\n  /**\r\n   * @notice Remove liquidity from the pool, weighted differently than the\r\n   * pool's current balances.\r\n   *\r\n   * @param self Swap struct to read from and write to\r\n   * @param amounts how much of each token to withdraw\r\n   * @param maxBurnAmount the max LP token provider is willing to pay to\r\n   * remove liquidity. Useful as a front-running mitigation.\r\n   * @return actual amount of LP tokens burned in the withdrawal\r\n   */\r\n  function removeLiquidityImbalance(\r\n    Swap storage self,\r\n    uint256[] memory amounts,\r\n    uint256 maxBurnAmount\r\n  ) public returns (uint256) {\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n\r\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\r\n      0,\r\n      0,\r\n      0,\r\n      _getAPrecise(self),\r\n      self.lpToken,\r\n      0,\r\n      self.balances\r\n    );\r\n    v.totalSupply = v.lpToken.totalSupply();\r\n\r\n    require(amounts.length == 2, \"Amounts should match pool tokens\");\r\n\r\n    require(\r\n      maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0,\r\n      \">LP.balanceOf\"\r\n    );\r\n\r\n    uint256 feePerToken = self.swapFee / 2;\r\n    uint256[] memory fees = new uint256[](2);\r\n\r\n    {\r\n      uint256[] memory balances1 = new uint256[](2);\r\n\r\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\r\n      for (uint256 i = 0; i < 2; i++) {\r\n        require(\r\n          amounts[i] <= v.balances[i],\r\n          \"Cannot withdraw more than available\"\r\n        );\r\n        balances1[i] = v.balances[i] - amounts[i];\r\n      }\r\n      v.d1 = getD(_pricedInBatch(self, balances1), v.preciseA);\r\n\r\n      for (uint256 i = 0; i < 2; i++) {\r\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\r\n        uint256 difference = idealBalance.difference(balances1[i]);\r\n        fees[i] = (feePerToken * difference) / FEE_DENOMINATOR;\r\n        uint256 adminFee = self.adminFee;\r\n        {\r\n          self.balances[i] =\r\n            balances1[i] -\r\n            ((fees[i] * adminFee) / FEE_DENOMINATOR);\r\n        }\r\n        balances1[i] = balances1[i] - fees[i];\r\n      }\r\n\r\n      v.d2 = getD(_pricedInBatch(self, balances1), v.preciseA);\r\n    }\r\n\r\n    uint256 tokenAmount = ((v.d0 - v.d2) * (v.totalSupply)) / v.d0;\r\n    require(tokenAmount != 0, \"Burnt amount cannot be zero\");\r\n    tokenAmount = tokenAmount + 1;\r\n\r\n    require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\r\n\r\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\r\n\r\n    (bool sent, ) = payable(msg.sender).call{ value: amounts[0] }(\"\");\r\n    require(sent, \"SwapUtils: Failed to send Avax\");\r\n    wETH2Reference.safeTransferFrom(\r\n      address(this),\r\n      msg.sender,\r\n      self.pooledTokenId,\r\n      amounts[1],\r\n      \"\"\r\n    );\r\n\r\n    emit RemoveLiquidityImbalance(\r\n      msg.sender,\r\n      amounts,\r\n      fees,\r\n      v.d1,\r\n      v.totalSupply - tokenAmount\r\n    );\r\n\r\n    return tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice withdraw all admin fees to a given address\r\n   * @param self Swap struct to withdraw fees from\r\n   * @param to Address to send the fees to\r\n   */\r\n  function withdrawAdminFees(Swap storage self, address to) external {\r\n    IgAVAX wETH2Reference = self.referenceForPooledTokens;\r\n    uint256 tokenBalance = wETH2Reference.balanceOf(\r\n      address(this),\r\n      self.pooledTokenId\r\n    ) - self.balances[1];\r\n    if (tokenBalance != 0) {\r\n      wETH2Reference.safeTransferFrom(\r\n        address(this),\r\n        to,\r\n        self.pooledTokenId,\r\n        tokenBalance,\r\n        \"\"\r\n      );\r\n    }\r\n\r\n    uint256 avaxBalance = address(this).balance - self.balances[0];\r\n    if (avaxBalance != 0) {\r\n      (bool sent, ) = payable(msg.sender).call{ value: avaxBalance }(\"\");\r\n      require(sent, \"SwapUtils: Failed to send Avax\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the admin fee\r\n   * @dev adminFee cannot be higher than 100% of the swap fee\r\n   * @param self Swap struct to update\r\n   * @param newAdminFee new admin fee to be applied on future transactions\r\n   */\r\n  function setAdminFee(Swap storage self, uint256 newAdminFee) external {\r\n    require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\r\n    self.adminFee = newAdminFee;\r\n\r\n    emit NewAdminFee(newAdminFee);\r\n  }\r\n\r\n  /**\r\n   * @notice update the swap fee\r\n   * @dev fee cannot be higher than 1% of each swap\r\n   * @param self Swap struct to update\r\n   * @param newSwapFee new swap fee to be applied on future transactions\r\n   */\r\n  function setSwapFee(Swap storage self, uint256 newSwapFee) external {\r\n    require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\r\n    self.swapFee = newSwapFee;\r\n\r\n    emit NewSwapFee(newSwapFee);\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/utils/AmplificationUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"./SwapUtils.sol\";\r\n\r\n/**\r\n * @title AmplificationUtils library\r\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\r\n * This library assumes the struct is fully validated.\r\n */\r\nlibrary AmplificationUtils {\r\n  event RampA(\r\n    uint256 oldA,\r\n    uint256 newA,\r\n    uint256 initialTime,\r\n    uint256 futureTime\r\n  );\r\n  event StopRampA(uint256 currentA, uint256 time);\r\n\r\n  // Constant values used in ramping A calculations\r\n  uint256 public constant A_PRECISION = 100;\r\n  uint256 public constant MAX_A = 10**6;\r\n  uint256 private constant MAX_A_CHANGE = 2;\r\n  uint256 private constant MIN_RAMP_TIME = 14 days;\r\n\r\n  /**\r\n   * @notice Return A, the amplification coefficient * n * (n - 1)\r\n   * @dev See the StableSwap paper for details\r\n   * @param self Swap struct to read from\r\n   * @return A parameter\r\n   */\r\n  function getA(SwapUtils.Swap storage self) external view returns (uint256) {\r\n    return _getAPrecise(self) / (A_PRECISION);\r\n  }\r\n\r\n  /**\r\n   * @notice Return A in its raw precision\r\n   * @dev See the StableSwap paper for details\r\n   * @param self Swap struct to read from\r\n   * @return A parameter in its raw precision form\r\n   */\r\n  function getAPrecise(SwapUtils.Swap storage self)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _getAPrecise(self);\r\n  }\r\n\r\n  /**\r\n   * @notice Return A in its raw precision\r\n   * @dev See the StableSwap paper for details\r\n   * @param self Swap struct to read from\r\n   * @return A parameter in its raw precision form\r\n   */\r\n  function _getAPrecise(SwapUtils.Swap storage self)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 t1 = self.futureATime; // time when ramp is finished\r\n    uint256 a1 = self.futureA; // final A value when ramp is finished\r\n\r\n    if (block.timestamp < t1) {\r\n      uint256 t0 = self.initialATime; // time when ramp is started\r\n      uint256 a0 = self.initialA; // initial A value when ramp is started\r\n      if (a1 > a0) {\r\n        // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\r\n        return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\r\n      } else {\r\n        // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\r\n        return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\r\n      }\r\n    } else {\r\n      return a1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\r\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n   * the limit range.\r\n   * @param self Swap struct to update\r\n   * @param futureA_ the new A to ramp towards\r\n   * @param futureTime_ timestamp when the new A should be reached\r\n   */\r\n  function rampA(\r\n    SwapUtils.Swap storage self,\r\n    uint256 futureA_,\r\n    uint256 futureTime_\r\n  ) external {\r\n    require(\r\n      block.timestamp >= self.initialATime + 1 days,\r\n      \"Wait 1 day before starting ramp\"\r\n    );\r\n    require(\r\n      futureTime_ >= block.timestamp + MIN_RAMP_TIME,\r\n      \"Insufficient ramp time\"\r\n    );\r\n    require(\r\n      futureA_ > 0 && futureA_ < MAX_A,\r\n      \"futureA_ must be > 0 and < MAX_A\"\r\n    );\r\n\r\n    uint256 initialAPrecise = _getAPrecise(self);\r\n    uint256 futureAPrecise = futureA_ * A_PRECISION;\r\n\r\n    if (futureAPrecise < initialAPrecise) {\r\n      require(\r\n        futureAPrecise * MAX_A_CHANGE >= initialAPrecise,\r\n        \"futureA_ is too small\"\r\n      );\r\n    } else {\r\n      require(\r\n        futureAPrecise <= initialAPrecise * MAX_A_CHANGE,\r\n        \"futureA_ is too large\"\r\n      );\r\n    }\r\n\r\n    self.initialA = initialAPrecise;\r\n    self.futureA = futureAPrecise;\r\n    self.initialATime = block.timestamp;\r\n    self.futureATime = futureTime_;\r\n\r\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\r\n  }\r\n\r\n  /**\r\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\r\n   * cannot be called for another 24 hours\r\n   * @param self Swap struct to update\r\n   */\r\n  function stopRampA(SwapUtils.Swap storage self) external {\r\n    require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\r\n\r\n    uint256 currentA = _getAPrecise(self);\r\n    self.initialA = currentA;\r\n    self.futureA = currentA;\r\n    self.initialATime = block.timestamp;\r\n    self.futureATime = block.timestamp;\r\n\r\n    emit StopRampA(currentA, block.timestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/utils/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\n/**\r\n * @title MathUtils library\r\n * @notice  Contains functions for calculating differences between two uint256.\r\n */\r\nlibrary MathUtils {\r\n  /**\r\n   * @notice Compares a and b and returns true if the difference between a and b\r\n   *         is less than 1 or equal to each other.\r\n   * @param a uint256 to compare with\r\n   * @param b uint256 to compare with\r\n   * @return True if the difference between a and b is less than 1 or equal,\r\n   *         otherwise return false\r\n   */\r\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\r\n    return (difference(a, b) <= 1);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates absolute difference between a and b\r\n   * @param a uint256 to compare with\r\n   * @param b uint256 to compare with\r\n   * @return Difference between a and b\r\n   */\r\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a > b) {\r\n      return a - b;\r\n    }\r\n    return b - a;\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/helpers/test/TestMathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"../../utils/MathUtils.sol\";\r\n\r\ncontract TestMathUtils {\r\n  using MathUtils for uint256;\r\n\r\n  function difference(uint256 a, uint256 b) public pure returns (uint256) {\r\n    return a.difference(b);\r\n  }\r\n\r\n  function within1(uint256 a, uint256 b) public pure returns (bool) {\r\n    return a.within1(b);\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/helpers/OwnerPausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\n\r\n/**\r\n * @title OwnerPausable\r\n * @notice An ownable contract allows the owner to pause and unpause the\r\n * contract without a delay.\r\n * @dev Only methods using the provided modifiers will be paused.\r\n */\r\nabstract contract OwnerPausableUpgradeable is\r\n  OwnableUpgradeable,\r\n  PausableUpgradeable\r\n{\r\n  function __OwnerPausable_init() internal onlyInitializing {\r\n    __Context_init_unchained();\r\n    __Ownable_init_unchained();\r\n    __Pausable_init_unchained();\r\n  }\r\n\r\n  /**\r\n   * @notice Pause the contract. Revert if already paused.\r\n   */\r\n  function pause() external onlyOwner {\r\n    PausableUpgradeable._pause();\r\n  }\r\n\r\n  /**\r\n   * @notice Unpause the contract. Revert if already unpaused.\r\n   */\r\n  function unpause() external onlyOwner {\r\n    PausableUpgradeable._unpause();\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"../interfaces/IgAVAX.sol\";\r\nimport \"./helpers/OwnerPausableUpgradeable.sol\";\r\nimport \"./utils/SwapUtils.sol\";\r\nimport \"./utils/AmplificationUtils.sol\";\r\nimport \"../interfaces/ISwap.sol\";\r\n\r\n/**\r\n * @title Swap - A StableSwap implementation in solidity.\r\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\r\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\r\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\r\n * Users can burn pool tokens and withdraw their share of token(s).\r\n *\r\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\r\n * distributed to the LPs.\r\n *\r\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\r\n * stops the ratio of the tokens in the pool from changing.\r\n * Users can always withdraw their tokens via multi-asset withdraws.\r\n *\r\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\r\n * deployment size.\r\n */\r\ncontract Swap is\r\n  ISwap,\r\n  OwnerPausableUpgradeable,\r\n  ReentrancyGuardUpgradeable,\r\n  ERC1155HolderUpgradeable\r\n{\r\n  using SwapUtils for SwapUtils.Swap;\r\n  using AmplificationUtils for SwapUtils.Swap;\r\n\r\n  // Struct storing data responsible for automatic market maker functionalities. In order to\r\n  // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol\r\n  SwapUtils.Swap public swapStorage;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  // events replicated from SwapUtils to make the ABI easier for dumb\r\n  // clients\r\n  event TokenSwap(\r\n    address indexed buyer,\r\n    uint256 tokensSold,\r\n    uint256 tokensBought,\r\n    uint128 soldId,\r\n    uint128 boughtId\r\n  );\r\n  event AddLiquidity(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256[] fees,\r\n    uint256 invariant,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event RemoveLiquidity(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event RemoveLiquidityOne(\r\n    address indexed provider,\r\n    uint256 lpTokenAmount,\r\n    uint256 lpTokenSupply,\r\n    uint256 boughtId,\r\n    uint256 tokensBought\r\n  );\r\n  event RemoveLiquidityImbalance(\r\n    address indexed provider,\r\n    uint256[] tokenAmounts,\r\n    uint256[] fees,\r\n    uint256 invariant,\r\n    uint256 lpTokenSupply\r\n  );\r\n  event NewAdminFee(uint256 newAdminFee);\r\n  event NewSwapFee(uint256 newSwapFee);\r\n  event NewWithdrawFee(uint256 newWithdrawFee);\r\n  event RampA(\r\n    uint256 oldA,\r\n    uint256 newA,\r\n    uint256 initialTime,\r\n    uint256 futureTime\r\n  );\r\n  event StopRampA(uint256 currentA, uint256 time);\r\n\r\n  /**\r\n   * @notice Initializes this Swap contract with the given parameters.\r\n   * This will also clone a LPToken contract that represents users'\r\n   * LP positions. The owner of LPToken will be this contract - which means\r\n   * only this contract is allowed to mint/burn tokens.\r\n   *\r\n   * @param _gAvax reference of the wETH2 ERC1155 contract\r\n   * @param _pooledTokenId gAvax ID that the Pool is operating with\r\n   * @param lpTokenName the long-form name of the token to be deployed\r\n   * @param lpTokenSymbol the short symbol for the token to be deployed\r\n   * @param _a the amplification coefficient * n * (n - 1). See the\r\n   * StableSwap paper for details\r\n   * @param _fee default swap fee to be initialized with\r\n   * @param _adminFee default adminFee to be initialized with\r\n   * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target\r\n   */\r\n  function initialize(\r\n    address _gAvax,\r\n    uint256 _pooledTokenId,\r\n    string memory lpTokenName,\r\n    string memory lpTokenSymbol,\r\n    uint256 _a,\r\n    uint256 _fee,\r\n    uint256 _adminFee,\r\n    address lpTokenTargetAddress\r\n  ) public virtual override initializer returns (address) {\r\n    __OwnerPausable_init();\r\n    __ReentrancyGuard_init();\r\n    __ERC1155Holder_init();\r\n\r\n    require(\r\n      lpTokenTargetAddress != address(0),\r\n      \"Swap: lpTokenTargetAddress can not be zero\"\r\n    );\r\n    require(_gAvax != address(0), \"Swap: _gAvax can not be zero\");\r\n\r\n    // Check _a, _fee, _adminFee, _withdrawFee parameters\r\n    require(_a < AmplificationUtils.MAX_A, \"Swap: _a exceeds maximum\");\r\n    require(_fee < SwapUtils.MAX_SWAP_FEE, \"Swap: _fee exceeds maximum\");\r\n    require(\r\n      _adminFee < SwapUtils.MAX_ADMIN_FEE,\r\n      \"Swap: _adminFee exceeds maximum\"\r\n    );\r\n\r\n    // Clone and initialize a LPToken contract\r\n    LPToken lpToken = LPToken(Clones.clone(lpTokenTargetAddress));\r\n    require(\r\n      lpToken.initialize(lpTokenName, lpTokenSymbol),\r\n      \"Swap: could not init lpToken clone\"\r\n    );\r\n\r\n    // Initialize swapStorage struct\r\n    swapStorage.lpToken = lpToken;\r\n    swapStorage.referenceForPooledTokens = IgAVAX(_gAvax);\r\n    swapStorage.pooledTokenId = _pooledTokenId;\r\n    swapStorage.balances = new uint256[](2);\r\n    swapStorage.initialA = _a * AmplificationUtils.A_PRECISION;\r\n    swapStorage.futureA = _a * AmplificationUtils.A_PRECISION;\r\n    swapStorage.swapFee = _fee;\r\n    swapStorage.adminFee = _adminFee;\r\n    return address(lpToken);\r\n  }\r\n\r\n  /*** MODIFIERS ***/\r\n\r\n  /**\r\n   * @notice Modifier to check deadline against current timestamp\r\n   * @param deadline latest timestamp to accept this transaction\r\n   */\r\n  modifier deadlineCheck(uint256 deadline) {\r\n    require(block.timestamp <= deadline, \"Swap: Deadline not met\");\r\n    _;\r\n  }\r\n\r\n  /*** VIEW FUNCTIONS ***/\r\n  function getERC1155() external view virtual override returns (address) {\r\n    return address(swapStorage.referenceForPooledTokens);\r\n  }\r\n\r\n  /**\r\n   * @notice Return A, the amplification coefficient * n * (n - 1)\r\n   * @dev See the StableSwap paper for details\r\n   * @return A parameter\r\n   */\r\n  function getA() external view virtual override returns (uint256) {\r\n    return swapStorage.getA();\r\n  }\r\n\r\n  /**\r\n   * @notice Return A in its raw precision form\r\n   * @dev See the StableSwap paper for details\r\n   * @return A parameter in its raw precision form\r\n   */\r\n  function getAPrecise() external view virtual override returns (uint256) {\r\n    return swapStorage.getAPrecise();\r\n  }\r\n\r\n  /**\r\n   * @notice Return id of the pooled token\r\n   * @return id of the pooled gAvax token\r\n   */\r\n  function getToken() external view virtual override returns (uint256) {\r\n    return swapStorage.pooledTokenId;\r\n  }\r\n\r\n  /**\r\n   * @notice Return current balance of the pooled token at given index\r\n   * @param index the index of the token\r\n   * @return current balance of the pooled token at given index with token's native precision\r\n   */\r\n  function getTokenBalance(uint8 index)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(index < 2, \"Swap: Index out of range\");\r\n    return swapStorage.balances[index];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the virtual price, to help calculate profit\r\n   * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\r\n   */\r\n  function getVirtualPrice() external view virtual override returns (uint256) {\r\n    return swapStorage.getVirtualPrice();\r\n  }\r\n\r\n  /**\r\n   * @notice Get Debt, The amount of buyback for stable pricing (1=1).\r\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\r\n   */\r\n  function getDebt() external view virtual override returns (uint256) {\r\n    // might change when price is in.\r\n    return swapStorage.getDebt();\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate amount of tokens you receive on swap\r\n   * @param tokenIndexFrom the token the user wants to sell\r\n   * @param tokenIndexTo the token the user wants to buy\r\n   * @param dx the amount of tokens the user wants to sell. If the token charges\r\n   * a fee on transfers, use the amount that gets transferred after the fee.\r\n   * @return amount of tokens the user will receive\r\n   */\r\n  function calculateSwap(\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx\r\n  ) external view virtual override returns (uint256) {\r\n    return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\r\n  }\r\n\r\n  /**\r\n   * @notice A simple method to calculate prices from deposits or\r\n   * withdrawals, excluding fees but including slippage. This is\r\n   * helpful as an input into the various \"min\" parameters on calls\r\n   * to fight front-running\r\n   *\r\n   * @dev This shouldn't be used outside frontends for user estimates.\r\n   *\r\n   * @param amounts an array of token amounts to deposit or withdrawal,\r\n   * corresponding to pooledTokens. The amount should be in each\r\n   * pooled token's native precision. If a token charges a fee on transfers,\r\n   * use the amount that gets transferred after the fee.\r\n   * @param deposit whether this is a deposit or a withdrawal\r\n   * @return token amount the user will receive\r\n   */\r\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return swapStorage.calculateTokenAmount(amounts, deposit);\r\n  }\r\n\r\n  /**\r\n   * @notice A simple method to calculate amount of each underlying\r\n   * tokens that is returned upon burning given amount of LP tokens\r\n   * @param amount the amount of LP tokens that would be burned on withdrawal\r\n   * @return array of token balances that the user will receive\r\n   */\r\n  function calculateRemoveLiquidity(uint256 amount)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256[] memory)\r\n  {\r\n    return swapStorage.calculateRemoveLiquidity(amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate the amount of underlying token available to withdraw\r\n   * when withdrawing via only single token\r\n   * @param tokenAmount the amount of LP token to burn\r\n   * @param tokenIndex index of which token will be withdrawn\r\n   * @return availableTokenAmount calculated amount of underlying token\r\n   * available to withdraw\r\n   */\r\n  function calculateRemoveLiquidityOneToken(\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex\r\n  ) external view virtual override returns (uint256 availableTokenAmount) {\r\n    return swapStorage.calculateWithdrawOneToken(tokenAmount, tokenIndex);\r\n  }\r\n\r\n  /**\r\n   * @notice This function reads the accumulated amount of admin fees of the token with given index\r\n   * @param index Index of the pooled token\r\n   * @return admin's token balance in the token's precision\r\n   */\r\n  function getAdminBalance(uint256 index)\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return swapStorage.getAdminBalance(index);\r\n  }\r\n\r\n  /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n  /**\r\n   * @notice Swap two tokens using this pool\r\n   * @param tokenIndexFrom the token the user wants to swap from\r\n   * @param tokenIndexTo the token the user wants to swap to\r\n   * @param dx the amount of tokens the user wants to swap from\r\n   * @param minDy the min amount the user would like to receive, or revert.\r\n   * @param deadline latest timestamp to accept this transaction\r\n   */\r\n  function swap(\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx,\r\n    uint256 minDy,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    deadlineCheck(deadline)\r\n    returns (uint256)\r\n  {\r\n    return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\r\n  }\r\n\r\n  /**\r\n   * @notice Add liquidity to the pool with the given amounts of tokens\r\n   * @param amounts the amounts of each token to add, in their native precision\r\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n   * should mint, otherwise revert. Handy for front-running mitigation\r\n   * @param deadline latest timestamp to accept this transaction\r\n   * @return amount of LP token user minted and received\r\n   */\r\n  function addLiquidity(\r\n    uint256[] calldata amounts,\r\n    uint256 minToMint,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    deadlineCheck(deadline)\r\n    returns (uint256)\r\n  {\r\n    return swapStorage.addLiquidity(amounts, minToMint);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn LP tokens to remove liquidity from the pool.\r\n   * @dev Liquidity can always be removed, even when the pool is paused.\r\n   * @param amount the amount of LP tokens to burn\r\n   * @param minAmounts the minimum amounts of each token in the pool\r\n   *        acceptable for this burn. Useful as a front-running mitigation\r\n   * @param deadline latest timestamp to accept this transaction\r\n   * @return amounts of tokens user received\r\n   */\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    uint256[] calldata minAmounts,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    deadlineCheck(deadline)\r\n    returns (uint256[] memory)\r\n  {\r\n    return swapStorage.removeLiquidity(amount, minAmounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove liquidity from the pool all in one token.\r\n   * @param tokenAmount the amount of the token you want to receive\r\n   * @param tokenIndex the index of the token you want to receive\r\n   * @param minAmount the minimum amount to withdraw, otherwise revert\r\n   * @param deadline latest timestamp to accept this transaction\r\n   * @return amount of chosen token user received\r\n   */\r\n  function removeLiquidityOneToken(\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex,\r\n    uint256 minAmount,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    deadlineCheck(deadline)\r\n    returns (uint256)\r\n  {\r\n    return\r\n      swapStorage.removeLiquidityOneToken(tokenAmount, tokenIndex, minAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove liquidity from the pool, weighted differently than the\r\n   * pool's current balances.\r\n   * @param amounts how much of each token to withdraw\r\n   * @param maxBurnAmount the max LP token provider is willing to pay to\r\n   * remove liquidity. Useful as a front-running mitigation.\r\n   * @param deadline latest timestamp to accept this transaction\r\n   * @return amount of LP tokens burned\r\n   */\r\n  function removeLiquidityImbalance(\r\n    uint256[] calldata amounts,\r\n    uint256 maxBurnAmount,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    virtual\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    deadlineCheck(deadline)\r\n    returns (uint256)\r\n  {\r\n    return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\r\n  }\r\n\r\n  /*** ADMIN FUNCTIONS ***/\r\n\r\n  /**\r\n   * @notice Withdraw all admin fees to the contract owner\r\n   */\r\n  function withdrawAdminFees()\r\n    external\r\n    virtual\r\n    override\r\n    onlyOwner\r\n    nonReentrant\r\n  {\r\n    swapStorage.withdrawAdminFees(owner());\r\n  }\r\n\r\n  /**\r\n   * @notice Update the admin fee. Admin fee takes portion of the swap fee.\r\n   * @param newAdminFee new admin fee to be applied on future transactions\r\n   */\r\n  function setAdminFee(uint256 newAdminFee)\r\n    external\r\n    virtual\r\n    override\r\n    onlyOwner\r\n  {\r\n    swapStorage.setAdminFee(newAdminFee);\r\n  }\r\n\r\n  /**\r\n   * @notice Update the swap fee to be applied on swaps\r\n   * @param newSwapFee new swap fee to be applied on future transactions\r\n   */\r\n  function setSwapFee(uint256 newSwapFee) external virtual override onlyOwner {\r\n    swapStorage.setSwapFee(newSwapFee);\r\n  }\r\n\r\n  /**\r\n   * @notice Start ramping up or down A parameter towards given futureA and futureTime\r\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n   * the limit range.\r\n   * @param futureA the new A to ramp towards\r\n   * @param futureTime timestamp when the new A should be reached\r\n   */\r\n  function rampA(uint256 futureA, uint256 futureTime)\r\n    external\r\n    virtual\r\n    override\r\n    onlyOwner\r\n  {\r\n    swapStorage.rampA(futureA, futureTime);\r\n  }\r\n\r\n  /**\r\n   * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\r\n   */\r\n  function stopRampA() external virtual override onlyOwner {\r\n    swapStorage.stopRampA();\r\n  }\r\n}\r\n"
    },
    "contracts/WithdrawalPool/helpers/test/TestSwapReturnValues.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"../../../interfaces/ISwap.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract TestSwapReturnValues is ERC1155Holder {\r\n  using SafeMath for uint256;\r\n\r\n  ISwap public swap;\r\n  IERC1155 public wETH2;\r\n  IERC20 public lpToken;\r\n  uint8 public n;\r\n\r\n  uint256 public constant MAX_INT = 2**256 - 1;\r\n\r\n  constructor(\r\n    ISwap swapContract,\r\n    IERC1155 wETH2Reference,\r\n    IERC20 lpTokenContract,\r\n    uint8 numOfTokens\r\n  ) {\r\n    swap = swapContract;\r\n    wETH2 = wETH2Reference;\r\n    lpToken = lpTokenContract;\r\n    n = numOfTokens;\r\n\r\n    // Pre-approve tokens\r\n    wETH2.setApprovalForAll(address(swap), true);\r\n    lpToken.approve(address(swap), MAX_INT);\r\n  }\r\n\r\n  function test_swap(\r\n    uint8 tokenIndexFrom,\r\n    uint8 tokenIndexTo,\r\n    uint256 dx,\r\n    uint256 minDy\r\n  ) public payable {\r\n    uint256 avaxbalanceBefore = address(this).balance;\r\n    uint256 gavaxbalanceBefore = wETH2.balanceOf(\r\n      address(this),\r\n      swap.getToken()\r\n    );\r\n\r\n    if (tokenIndexFrom == 0) {\r\n      // If avax to gavax\r\n      uint256 returnValue = swap.swap{ value: msg.value }(\r\n        tokenIndexFrom,\r\n        tokenIndexTo,\r\n        dx,\r\n        minDy,\r\n        block.timestamp\r\n      );\r\n\r\n      uint256 gavaxbalanceAfter = wETH2.balanceOf(\r\n        address(this),\r\n        swap.getToken()\r\n      );\r\n\r\n      require(\r\n        returnValue == gavaxbalanceAfter.sub(gavaxbalanceBefore),\r\n        \"swap()'s return value does not match received gavax amount\"\r\n      );\r\n    } else {\r\n      uint256 returnValue = swap.swap(\r\n        tokenIndexFrom,\r\n        tokenIndexTo,\r\n        dx,\r\n        minDy,\r\n        block.timestamp\r\n      );\r\n\r\n      uint256 avaxbalanceAfter = address(this).balance;\r\n\r\n      require(\r\n        returnValue == avaxbalanceAfter.sub(avaxbalanceBefore),\r\n        \"swap()'s return value does not match received avax amount\"\r\n      );\r\n    }\r\n  }\r\n\r\n  function test_addLiquidity(uint256[] calldata amounts, uint256 minToMint)\r\n    public\r\n    payable\r\n  {\r\n    require(\r\n      msg.value == amounts[0],\r\n      \"The update of about AVAX amount -0xCypher\"\r\n    );\r\n    uint256 balanceBefore = lpToken.balanceOf(address(this));\r\n    uint256 returnValue = swap.addLiquidity{ value: msg.value }(\r\n      amounts,\r\n      minToMint,\r\n      MAX_INT\r\n    );\r\n    uint256 balanceAfter = lpToken.balanceOf(address(this));\r\n\r\n    console.log(\r\n      \"addLiquidity: Expected %s, got %s\",\r\n      balanceAfter.sub(balanceBefore),\r\n      returnValue\r\n    );\r\n\r\n    require(\r\n      returnValue == balanceAfter.sub(balanceBefore),\r\n      \"addLiquidity()'s return value does not match minted amount\"\r\n    );\r\n  }\r\n\r\n  function test_removeLiquidity(uint256 amount, uint256[] memory minAmounts)\r\n    public\r\n  {\r\n    uint256[] memory balanceBefore = new uint256[](n);\r\n    uint256[] memory balanceAfter = new uint256[](n);\r\n\r\n    balanceBefore[0] = address(this).balance;\r\n    balanceBefore[1] = wETH2.balanceOf(address(this), swap.getToken());\r\n\r\n    uint256[] memory returnValue = swap.removeLiquidity(\r\n      amount,\r\n      minAmounts,\r\n      MAX_INT\r\n    );\r\n    balanceAfter[0] = address(this).balance;\r\n    balanceAfter[1] = wETH2.balanceOf(address(this), swap.getToken());\r\n\r\n    for (uint8 i = 0; i < n; i++) {\r\n      console.log(\r\n        \"removeLiquidity: Expected %s, got %s\",\r\n        balanceAfter[i].sub(balanceBefore[i]),\r\n        returnValue[i]\r\n      );\r\n      require(\r\n        balanceAfter[i].sub(balanceBefore[i]) == returnValue[i],\r\n        \"removeLiquidity()'s return value does not match received amounts of tokens\"\r\n      );\r\n    }\r\n  }\r\n\r\n  function test_removeLiquidityImbalance(\r\n    uint256[] calldata amounts,\r\n    uint256 maxBurnAmount\r\n  ) public {\r\n    uint256 balanceBefore = lpToken.balanceOf(address(this));\r\n    uint256 returnValue = swap.removeLiquidityImbalance(\r\n      amounts,\r\n      maxBurnAmount,\r\n      MAX_INT\r\n    );\r\n    uint256 balanceAfter = lpToken.balanceOf(address(this));\r\n\r\n    console.log(\r\n      \"removeLiquidityImbalance: Expected %s, got %s\",\r\n      balanceBefore.sub(balanceAfter),\r\n      returnValue\r\n    );\r\n\r\n    require(\r\n      returnValue == balanceBefore.sub(balanceAfter),\r\n      \"removeLiquidityImbalance()'s return value does not match burned lpToken amount\"\r\n    );\r\n  }\r\n\r\n  function test_removeLiquidityOneToken(\r\n    uint256 tokenAmount,\r\n    uint8 tokenIndex,\r\n    uint256 minAmount\r\n  ) public {\r\n    uint256 balanceBefore;\r\n    if (tokenIndex == 0) {\r\n      balanceBefore = address(this).balance;\r\n    } else {\r\n      balanceBefore = wETH2.balanceOf(address(this), swap.getToken());\r\n    }\r\n    uint256 returnValue = swap.removeLiquidityOneToken(\r\n      tokenAmount,\r\n      tokenIndex,\r\n      minAmount,\r\n      MAX_INT\r\n    );\r\n\r\n    uint256 balanceAfter;\r\n    if (tokenIndex == 0) {\r\n      balanceAfter = address(this).balance;\r\n    } else {\r\n      balanceAfter = wETH2.balanceOf(address(this), swap.getToken());\r\n    }\r\n    console.log(\r\n      \"removeLiquidityOneToken: Expected %s, got %s\",\r\n      balanceAfter.sub(balanceBefore),\r\n      returnValue\r\n    );\r\n\r\n    require(\r\n      returnValue == balanceAfter.sub(balanceBefore),\r\n      \"removeLiquidityOneToken()'s return value does not match received token amount\"\r\n    );\r\n  }\r\n\r\n  receive() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/Portal/helpers/ERC1155SupplyMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\r\n\r\n/**\r\n * ERC1155SupplyMinterPauser is an ERC1155 implementation that inherites openzeppelin ERC1155PresetMinterPauser which also inherites ERC1155PresetMinterPauser\r\n *\r\n * @dev only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is\r\n * _doSafeTransferAcceptanceCheck is being virtual.\r\n *\r\n * TO REPRODUCE the ERC1155SupplyMinterPauser on diffchecker link::\r\n * Formatter: Prettier: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\r\n * 0. Open a new file on vscode: ERC1155SupplyMinterPauser.sol (or name it whatever you want with .sol extension)\r\n *\r\n * 1. put ERC1155: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/ERC1155.sol\r\n * 1.2 delete imports and comments on top of the contract.\r\n *\r\n * 2. put this under the file ERC1155Burnable: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\r\n * 2.2 delete imports and comments on top of the contract.\r\n *\r\n * 3. put this under the file ERC1155Pausable: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\r\n * 3.2 delete imports and comments on top of the contract.\r\n *\r\n * 4. put this under the file ERC1155Supply: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol\r\n * 4.2 delete imports and comments on top of the contract.\r\n *\r\n * 5. put this under the file ERC1155PresetMinterPauser: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\r\n * 5.2 delete imports and comments on top of the contract.\r\n *\r\n * 6. refactor the file with prettier\r\n * 7. compare it with our local ERC1155SupplyMinterPauser.sol\r\n * 8. only changes we did are the same with the https://www.diffchecker.com/UOAdD16A\r\n */\r\n\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n  using Address for address;\r\n\r\n  // Mapping from token ID to account balances\r\n  mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n  // Mapping from account to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n  string private _uri;\r\n\r\n  /**\r\n   * @dev See {_setURI}.\r\n   */\r\n  constructor(string memory uri_) {\r\n    _setURI(uri_);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC1155).interfaceId ||\r\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155MetadataURI-uri}.\r\n   *\r\n   * This implementation returns the same URI for *all* token types. It relies\r\n   * on the token type ID substitution mechanism\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n   *\r\n   * Clients calling this function must replace the `\\{id\\}` substring with the\r\n   * actual token type ID.\r\n   */\r\n  function uri(uint256) public view virtual override returns (string memory) {\r\n    return _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function balanceOf(address account, uint256 id)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(\r\n      account != address(0),\r\n      \"ERC1155: address zero is not a valid owner\"\r\n    );\r\n    return _balances[id][account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOfBatch}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256[] memory)\r\n  {\r\n    require(\r\n      accounts.length == ids.length,\r\n      \"ERC1155: accounts and ids length mismatch\"\r\n    );\r\n\r\n    uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n    for (uint256 i = 0; i < accounts.length; ++i) {\r\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    _setApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address account, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[account][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public virtual override {\r\n    require(\r\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n      \"ERC1155: caller is not token owner nor approved\"\r\n    );\r\n    _safeTransferFrom(from, to, id, amount, data);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-safeBatchTransferFrom}.\r\n   */\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) public virtual override {\r\n    require(\r\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n      \"ERC1155: caller is not token owner nor approved\"\r\n    );\r\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n    address operator = _msgSender();\r\n    uint256[] memory ids = _asSingletonArray(id);\r\n    uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    uint256 fromBalance = _balances[id][from];\r\n    require(\r\n      fromBalance >= amount,\r\n      \"ERC1155: insufficient balance for transfer\"\r\n    );\r\n    unchecked {\r\n      _balances[id][from] = fromBalance - amount;\r\n    }\r\n    _balances[id][to] += amount;\r\n\r\n    emit TransferSingle(operator, from, to, id, amount);\r\n\r\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(\r\n      ids.length == amounts.length,\r\n      \"ERC1155: ids and amounts length mismatch\"\r\n    );\r\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n\r\n      uint256 fromBalance = _balances[id][from];\r\n      require(\r\n        fromBalance >= amount,\r\n        \"ERC1155: insufficient balance for transfer\"\r\n      );\r\n      unchecked {\r\n        _balances[id][from] = fromBalance - amount;\r\n      }\r\n      _balances[id][to] += amount;\r\n    }\r\n\r\n    emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets a new URI for all token types, by relying on the token type ID\r\n   * substitution mechanism\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n   *\r\n   * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n   * clients with the token type ID.\r\n   *\r\n   * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n   * interpreted by clients as\r\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n   * for token type ID 0x4cce0.\r\n   *\r\n   * See {uri}.\r\n   *\r\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n   * this function emits no events.\r\n   */\r\n  function _setURI(string memory newuri) internal virtual {\r\n    _uri = newuri;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _mint(\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n    address operator = _msgSender();\r\n    uint256[] memory ids = _asSingletonArray(id);\r\n    uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    _balances[id][to] += amount;\r\n    emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: mint to the zero address\");\r\n    require(\r\n      ids.length == amounts.length,\r\n      \"ERC1155: ids and amounts length mismatch\"\r\n    );\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      _balances[ids[i]][to] += amounts[i];\r\n    }\r\n\r\n    emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    _doSafeBatchTransferAcceptanceCheck(\r\n      operator,\r\n      address(0),\r\n      to,\r\n      ids,\r\n      amounts,\r\n      data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens of token type `id` from `from`\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `from` must have at least `amount` tokens of token type `id`.\r\n   */\r\n  function _burn(\r\n    address from,\r\n    uint256 id,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n    address operator = _msgSender();\r\n    uint256[] memory ids = _asSingletonArray(id);\r\n    uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n    uint256 fromBalance = _balances[id][from];\r\n    require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n    unchecked {\r\n      _balances[id][from] = fromBalance - amount;\r\n    }\r\n\r\n    emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   */\r\n  function _burnBatch(\r\n    address from,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts\r\n  ) internal virtual {\r\n    require(from != address(0), \"ERC1155: burn from the zero address\");\r\n    require(\r\n      ids.length == amounts.length,\r\n      \"ERC1155: ids and amounts length mismatch\"\r\n    );\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n\r\n      uint256 fromBalance = _balances[id][from];\r\n      require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n      unchecked {\r\n        _balances[id][from] = fromBalance - amount;\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `operator` to operate on all of `owner` tokens\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function _setApprovalForAll(\r\n    address owner,\r\n    address operator,\r\n    bool approved\r\n  ) internal virtual {\r\n    require(owner != operator, \"ERC1155: setting approval status for self\");\r\n    _operatorApprovals[owner][operator] = approved;\r\n    emit ApprovalForAll(owner, operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any token transfer. This includes minting\r\n   * and burning, as well as batched variants.\r\n   *\r\n   * The same hook is called on both single and batched variants. For single\r\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n   *\r\n   * Calling conditions (for each `id` and `amount` pair):\r\n   *\r\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * of token type `id` will be  transferred to `to`.\r\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n   * for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n   * will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   * - `ids` and `amounts` have the same, non-zero length.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any token transfer. This includes minting\r\n   * and burning, as well as batched variants.\r\n   *\r\n   * The same hook is called on both single and batched variants. For single\r\n   * transfers, the length of the `id` and `amount` arrays will be 1.\r\n   *\r\n   * Calling conditions (for each `id` and `amount` pair):\r\n   *\r\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * of token type `id` will be  transferred to `to`.\r\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n   * for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n   * will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   * - `ids` and `amounts` have the same, non-zero length.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {}\r\n\r\n  function _doSafeTransferAcceptanceCheck(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)\r\n      returns (bytes4 response) {\r\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n        }\r\n      } catch Error(string memory reason) {\r\n        revert(reason);\r\n      } catch {\r\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function _doSafeBatchTransferAcceptanceCheck(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) private {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC1155Receiver(to).onERC1155BatchReceived(\r\n          operator,\r\n          from,\r\n          ids,\r\n          amounts,\r\n          data\r\n        )\r\n      returns (bytes4 response) {\r\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n        }\r\n      } catch Error(string memory reason) {\r\n        revert(reason);\r\n      } catch {\r\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function _asSingletonArray(uint256 element)\r\n    private\r\n    pure\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256[] memory array = new uint256[](1);\r\n    array[0] = element;\r\n\r\n    return array;\r\n  }\r\n}\r\n\r\nabstract contract ERC1155Burnable is ERC1155 {\r\n  function burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 value\r\n  ) public virtual {\r\n    require(\r\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n      \"ERC1155: caller is not token owner nor approved\"\r\n    );\r\n\r\n    _burn(account, id, value);\r\n  }\r\n\r\n  function burnBatch(\r\n    address account,\r\n    uint256[] memory ids,\r\n    uint256[] memory values\r\n  ) public virtual {\r\n    require(\r\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n      \"ERC1155: caller is not token owner nor approved\"\r\n    );\r\n\r\n    _burnBatch(account, ids, values);\r\n  }\r\n}\r\n\r\nabstract contract ERC1155Pausable is ERC1155, Pausable {\r\n  /**\r\n   * @dev See {ERC1155-_beforeTokenTransfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the contract must not be paused.\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    require(!paused(), \"ERC1155Pausable: token transfer while paused\");\r\n  }\r\n}\r\n\r\nabstract contract ERC1155Supply is ERC1155 {\r\n  mapping(uint256 => uint256) private _totalSupply;\r\n\r\n  /**\r\n   * @dev Total amount of tokens in with a given id.\r\n   */\r\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\r\n    return _totalSupply[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Indicates whether any token exist with a given id, or not.\r\n   */\r\n  function exists(uint256 id) public view virtual returns (bool) {\r\n    return ERC1155Supply.totalSupply(id) > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev See {ERC1155-_beforeTokenTransfer}.\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    if (from == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; ++i) {\r\n        _totalSupply[ids[i]] += amounts[i];\r\n      }\r\n    }\r\n\r\n    if (to == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; ++i) {\r\n        uint256 id = ids[i];\r\n        uint256 amount = amounts[i];\r\n        uint256 supply = _totalSupply[id];\r\n        require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\r\n        unchecked {\r\n          _totalSupply[id] = supply - amount;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC1155SupplyMinterPauser is\r\n  Context,\r\n  AccessControlEnumerable,\r\n  ERC1155Burnable,\r\n  ERC1155Pausable,\r\n  ERC1155Supply\r\n{\r\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n  /**\r\n   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\r\n   * deploys the contract.\r\n   */\r\n  constructor(string memory uri) ERC1155(uri) {\r\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n    _setupRole(MINTER_ROLE, _msgSender());\r\n    _setupRole(PAUSER_ROLE, _msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` new tokens for `to`, of token type `id`.\r\n   *\r\n   * See {ERC1155-_mint}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have the `MINTER_ROLE`.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public virtual {\r\n    require(\r\n      hasRole(MINTER_ROLE, _msgSender()),\r\n      \"ERC1155PresetMinterPauser: must have minter role to mint\"\r\n    );\r\n\r\n    _mint(to, id, amount, data);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\r\n   */\r\n  function mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) public virtual {\r\n    require(\r\n      hasRole(MINTER_ROLE, _msgSender()),\r\n      \"ERC1155PresetMinterPauser: must have minter role to mint\"\r\n    );\r\n\r\n    _mintBatch(to, ids, amounts, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Pauses all token transfers.\r\n   *\r\n   * See {ERC1155Pausable} and {Pausable-_pause}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have the `PAUSER_ROLE`.\r\n   */\r\n  function pause() public virtual {\r\n    require(\r\n      hasRole(PAUSER_ROLE, _msgSender()),\r\n      \"ERC1155PresetMinterPauser: must have pauser role to pause\"\r\n    );\r\n    _pause();\r\n  }\r\n\r\n  /**\r\n   * @dev Unpauses all token transfers.\r\n   *\r\n   * See {ERC1155Pausable} and {Pausable-_unpause}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have the `PAUSER_ROLE`.\r\n   */\r\n  function unpause() public virtual {\r\n    require(\r\n      hasRole(PAUSER_ROLE, _msgSender()),\r\n      \"ERC1155PresetMinterPauser: must have pauser role to unpause\"\r\n    );\r\n    _unpause();\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(AccessControlEnumerable, ERC1155)\r\n    returns (bool)\r\n  {\r\n    return super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual override(ERC1155, ERC1155Pausable, ERC1155Supply) {\r\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/Portal/helpers/test/ERC1155ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\ncontract ERC1155ReceiverMock is ERC165, IERC1155Receiver {\r\n  bytes4 private _recRetval;\r\n  bool private _recReverts;\r\n  bytes4 private _batRetval;\r\n  bool private _batReverts;\r\n\r\n  event Received(\r\n    address operator,\r\n    address from,\r\n    uint256 id,\r\n    uint256 value,\r\n    bytes data,\r\n    uint256 gas\r\n  );\r\n  event BatchReceived(\r\n    address operator,\r\n    address from,\r\n    uint256[] ids,\r\n    uint256[] values,\r\n    bytes data,\r\n    uint256 gas\r\n  );\r\n\r\n  constructor(\r\n    bytes4 recRetval,\r\n    bool recReverts,\r\n    bytes4 batRetval,\r\n    bool batReverts\r\n  ) {\r\n    _recRetval = recRetval;\r\n    _recReverts = recReverts;\r\n    _batRetval = batRetval;\r\n    _batReverts = batReverts;\r\n  }\r\n\r\n  function onERC1155Received(\r\n    address operator,\r\n    address from,\r\n    uint256 id,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external override returns (bytes4) {\r\n    require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\r\n    emit Received(operator, from, id, value, data, gasleft());\r\n    return _recRetval;\r\n  }\r\n\r\n  function onERC1155BatchReceived(\r\n    address operator,\r\n    address from,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata values,\r\n    bytes calldata data\r\n  ) external override returns (bytes4) {\r\n    require(!_batReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\r\n    emit BatchReceived(operator, from, ids, values, data, gasleft());\r\n    return _batRetval;\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/helpers/test/TestStakeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"../../utils/DataStoreLib.sol\";\r\nimport \"../../utils/StakeUtilsLib.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\n\r\ncontract TestStakeUtils is ERC1155Holder {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n  using StakeUtils for StakeUtils.StakePool;\r\n  DataStoreUtils.DataStore private DATASTORE;\r\n  StakeUtils.StakePool private STAKEPOOL;\r\n\r\n  constructor(\r\n    address _gAVAX,\r\n    address _ORACLE,\r\n    address _DEFAULT_SWAP_POOL,\r\n    address _DEFAULT_LP_TOKEN\r\n  ) {\r\n    STAKEPOOL.ORACLE = _ORACLE;\r\n    STAKEPOOL.gAVAX = _gAVAX;\r\n    STAKEPOOL.FEE_DENOMINATOR = 10**10;\r\n    STAKEPOOL.DEFAULT_SWAP_POOL = _DEFAULT_SWAP_POOL;\r\n    STAKEPOOL.DEFAULT_LP_TOKEN = _DEFAULT_LP_TOKEN;\r\n    STAKEPOOL.DEFAULT_A = 60;\r\n    STAKEPOOL.DEFAULT_FEE = 4e6;\r\n    STAKEPOOL.DEFAULT_ADMIN_FEE = 5e9;\r\n    STAKEPOOL.PERIOD_PRICE_INCREASE_LIMIT =\r\n      (5 * STAKEPOOL.FEE_DENOMINATOR) /\r\n      1e3;\r\n    STAKEPOOL.MAX_MAINTAINER_FEE = (10 * STAKEPOOL.FEE_DENOMINATOR) / 1e2; //10%\r\n  }\r\n\r\n  function getStakePoolParams()\r\n    external\r\n    view\r\n    virtual\r\n    returns (StakeUtils.StakePool memory)\r\n  {\r\n    return STAKEPOOL;\r\n  }\r\n\r\n  function getgAVAX() public view virtual returns (IgAVAX) {\r\n    return STAKEPOOL.getgAVAX();\r\n  }\r\n\r\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id)\r\n    public\r\n    virtual\r\n  {\r\n    STAKEPOOL._setPricePerShare(pricePerShare_, _id);\r\n  }\r\n\r\n  function mint(\r\n    address _gAVAX,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) external {\r\n    StakeUtils._mint(_gAVAX, _to, _id, _amount);\r\n  }\r\n\r\n  function findDEBT(uint256 id) external view returns (uint256) {\r\n    return StakeUtils.withdrawalPoolById(DATASTORE, id).getDebt();\r\n  }\r\n\r\n  function buyback(\r\n    address to,\r\n    uint256 planetId,\r\n    uint256 minToBuy,\r\n    uint256 deadline\r\n  ) external payable returns (uint256) {\r\n    return\r\n      STAKEPOOL._buyback(\r\n        DATASTORE,\r\n        to,\r\n        planetId,\r\n        msg.value,\r\n        minToBuy,\r\n        deadline\r\n      );\r\n  }\r\n\r\n  /**\r\n  * Maintainer\r\n\r\n  */\r\n  function getMaintainerFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    returns (address)\r\n  {\r\n    return DATASTORE.readAddressForId(_id, \"maintainer\");\r\n  }\r\n\r\n  function changeIdMaintainer(uint256 _id, address _newMaintainer)\r\n    external\r\n    virtual\r\n  {\r\n    StakeUtils.changeMaintainer(DATASTORE, _id, _newMaintainer);\r\n  }\r\n\r\n  function setMaintainerFee(uint256 _id, uint256 _newFee) external virtual {\r\n    STAKEPOOL.setMaintainerFee(DATASTORE, _id, _newFee);\r\n  }\r\n\r\n  function setMaxMaintainerFee(uint256 _newMaxFee) external virtual {\r\n    STAKEPOOL.setMaxMaintainerFee(_newMaxFee);\r\n  }\r\n\r\n  function getMaintainerFee(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    returns (uint256)\r\n  {\r\n    return STAKEPOOL.getMaintainerFee(DATASTORE, _id);\r\n  }\r\n\r\n  // ORACLE FUNCTIONS\r\n\r\n  function isOracleActive(uint256 _id) external view returns (bool) {\r\n    return StakeUtils._isOracleActive(DATASTORE, _id);\r\n  }\r\n\r\n  function setOracleTime(uint256 _id) external {\r\n    DATASTORE.writeUintForId(_id, \"oracleUpdateTimeStamp\", block.timestamp);\r\n  }\r\n\r\n  function beController(uint256 _id) external {\r\n    DATASTORE.writeAddressForId(_id, \"CONTROLLER\", msg.sender);\r\n  }\r\n\r\n  function oraclePrice(uint256 _id) external view returns (uint256) {\r\n    return STAKEPOOL.oraclePrice(_id);\r\n  }\r\n\r\n  function distributeFees(\r\n    uint256 _planetId,\r\n    uint256[] calldata _opIds,\r\n    uint256[] calldata _pBalanceIncreases\r\n  ) external {\r\n    STAKEPOOL._distributeFees(DATASTORE, _planetId, _opIds, _pBalanceIncreases);\r\n  }\r\n\r\n  function reportOracle(\r\n    uint256 _planetId,\r\n    uint256[] calldata _opIds,\r\n    uint256[] calldata _pBalanceIncreases\r\n  ) external returns (uint256 price) {\r\n    price = STAKEPOOL.reportOracle(\r\n      DATASTORE,\r\n      block.timestamp,\r\n      _planetId,\r\n      _opIds,\r\n      _pBalanceIncreases\r\n    );\r\n  }\r\n\r\n  // DEBT AND SURPLUS RELATED\r\n  function withdrawalPoolById(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    returns (address)\r\n  {\r\n    return address(StakeUtils.withdrawalPoolById(DATASTORE, _id));\r\n  }\r\n\r\n  function LPTokenById(uint256 _id) external view virtual returns (address) {\r\n    return address(StakeUtils.LPTokenById(DATASTORE, _id));\r\n  }\r\n\r\n  function payDebt(uint256 _planetId, uint256 claimerId) external payable {\r\n    STAKEPOOL.payDebt(DATASTORE, _planetId, claimerId);\r\n  }\r\n\r\n  function surplusById(uint256 _planetId) external view returns (uint256) {\r\n    return DATASTORE.readUintForId(_planetId, \"surplus\");\r\n  }\r\n\r\n  function putSurplus(uint256 _planetId, uint256 newsurplus) external {\r\n    DATASTORE.writeUintForId(_planetId, \"surplus\", newsurplus);\r\n  }\r\n\r\n  function pBalanceById(uint256 _planetId) external view returns (uint256) {\r\n    return DATASTORE.readUintForId(_planetId, \"pBalance\");\r\n  }\r\n\r\n  function unclaimedFeesById(uint256 _planetId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return DATASTORE.readUintForId(_planetId, \"unclaimedFees\");\r\n  }\r\n\r\n  function claimSurplus(uint256 _planetId, uint256 claimerId)\r\n    external\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.claimSurplus(DATASTORE, _planetId, claimerId);\r\n  }\r\n\r\n  function accumulatedFee(uint256 planetId, uint256 claimerId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (uint256 fee, ) = StakeUtils.accumulatedFee(DATASTORE, planetId, claimerId);\r\n    return fee;\r\n  }\r\n\r\n  function unclaimedFees(uint256 _poolId) external view returns (uint256) {\r\n    return DATASTORE.readUintForId(_poolId, \"unclaimedFees\");\r\n  }\r\n\r\n  function setMaintainer(uint256 _id, address _maintainer) external {\r\n    DATASTORE.writeAddressForId(_id, \"maintainer\", _maintainer);\r\n  }\r\n\r\n  function claimFee(uint256 planetId, uint256 claimerId) external virtual {\r\n    StakeUtils.claimFee(DATASTORE, planetId, claimerId);\r\n  }\r\n\r\n  /**  FUNCTIONS ABOUT SWAP & ROUTING */\r\n\r\n  function deployWithdrawalPool(uint256 id)\r\n    external\r\n    returns (address WithdrawalPool)\r\n  {\r\n    return STAKEPOOL.deployWithdrawalPool(DATASTORE, id);\r\n  }\r\n\r\n  function activateOperator(uint256 _id, uint256 _activeId)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.activateOperator(DATASTORE, _id, _activeId);\r\n  }\r\n\r\n  function deactivateOperator(uint256 _id, uint256 _deactivedId)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    return StakeUtils.deactivateOperator(DATASTORE, _id, _deactivedId);\r\n  }\r\n\r\n  function pausePool(uint256 id) external {\r\n    StakeUtils.pauseStakingForPool(DATASTORE, id);\r\n  }\r\n\r\n  function unpausePool(uint256 id) external {\r\n    StakeUtils.unpauseStakingForPool(DATASTORE, id);\r\n  }\r\n\r\n  function stake(\r\n    uint256 planetId,\r\n    uint256 minGavax,\r\n    uint256 deadline\r\n  ) external payable returns (uint256 totalgAvax) {\r\n    return STAKEPOOL.stake(DATASTORE, planetId, minGavax, deadline);\r\n  }\r\n\r\n  function Receive() external payable {}\r\n}\r\n"
    },
    "contracts/Portal/helpers/test/TestGeodeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"../../utils/DataStoreLib.sol\";\r\nimport \"../../utils/GeodeUtilsLib.sol\";\r\n\r\ncontract TestGeodeUtils {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n  using GeodeUtils for GeodeUtils.Universe;\r\n  DataStoreUtils.DataStore private DATASTORE;\r\n  GeodeUtils.Universe private GEODE;\r\n\r\n  constructor(\r\n    address _GOVERNANCE,\r\n    address _SENATE,\r\n    uint256 _OPERATION_FEE,\r\n    uint256 _MAX_OPERATION_FEE\r\n  ) {\r\n    GEODE.GOVERNANCE = _GOVERNANCE;\r\n    GEODE.SENATE = _SENATE;\r\n    GEODE.SENATE_EXPIRE_TIMESTAMP = block.timestamp + 1 days;\r\n    GEODE.OPERATION_FEE = _OPERATION_FEE;\r\n    GEODE.MAX_OPERATION_FEE = _MAX_OPERATION_FEE;\r\n    GEODE.FEE_DENOMINATOR = 10**10;\r\n\r\n    GEODE.setElectorType(DATASTORE, 5, true); // allow type4 to vote for Senate\r\n\r\n    GEODE.approvedUpgrade = address(0);\r\n  }\r\n\r\n  function getSenate() external view virtual returns (address) {\r\n    return GEODE.getSenate();\r\n  }\r\n\r\n  function getGovernance() external view virtual returns (address) {\r\n    return GEODE.getGovernance();\r\n  }\r\n\r\n  function getOperationFee() external view virtual returns (uint256) {\r\n    return GEODE.getOperationFee();\r\n  }\r\n\r\n  function getFeeDenominator() external view virtual returns (uint256) {\r\n    return GEODE.FEE_DENOMINATOR;\r\n  }\r\n\r\n  function getMaxOperationFee() external view virtual returns (uint256) {\r\n    return GEODE.getMaxOperationFee();\r\n  }\r\n\r\n  function getSenateExpireTimestamp() external view virtual returns (uint256) {\r\n    return GEODE.getSenateExpireTimestamp();\r\n  }\r\n\r\n  /**\r\n   **  ID GETTERS **\r\n   */\r\n  function getIdsByType(uint256 _type)\r\n    external\r\n    view\r\n    virtual\r\n    returns (uint256[] memory)\r\n  {\r\n    return DATASTORE.allIdsByType[_type];\r\n  }\r\n\r\n  function getIdFromName(string calldata _name)\r\n    external\r\n    pure\r\n    virtual\r\n    returns (uint256 _id)\r\n  {\r\n    _id = uint256(keccak256(abi.encodePacked(_name)));\r\n  }\r\n\r\n  function getCONTROLLERFromId(uint256 _id)\r\n    external\r\n    view\r\n    virtual\r\n    returns (address)\r\n  {\r\n    return DATASTORE.readAddressForId(_id, \"CONTROLLER\");\r\n  }\r\n\r\n  /**\r\n   *                                          ** SETTERS **\r\n   */\r\n  function changeIdCONTROLLER(uint256 _id, address _newCONTROLLER)\r\n    external\r\n    virtual\r\n  {\r\n    GeodeUtils.changeIdCONTROLLER(DATASTORE, _id, _newCONTROLLER);\r\n  }\r\n\r\n  /**\r\n   * ** GOVERNANCE/SENATE SETTERS **\r\n   */\r\n  function setOperationFee(uint256 _newFee)\r\n    external\r\n    virtual\r\n    returns (bool success)\r\n  {\r\n    // onlyGovernance CHECKED inside\r\n    success = GEODE.setOperationFee(_newFee);\r\n  }\r\n\r\n  function setMaxOperationFee(uint256 _newFee)\r\n    external\r\n    virtual\r\n    returns (bool success)\r\n  {\r\n    // onlySenate CHECKED inside\r\n    success = GEODE.setMaxOperationFee(_newFee);\r\n  }\r\n\r\n  /**\r\n   *                                          ** PROPOSALS **\r\n   */\r\n\r\n  function getProposal(uint256 id)\r\n    external\r\n    view\r\n    virtual\r\n    returns (GeodeUtils.Proposal memory)\r\n  {\r\n    return GEODE.getProposal(id);\r\n  }\r\n\r\n  function newProposal(\r\n    address _CONTROLLER,\r\n    uint256 _type,\r\n    uint256 _proposalDuration,\r\n    bytes calldata _name\r\n  ) external virtual {\r\n    require(\r\n      DATASTORE\r\n        .readBytesForId(uint256(keccak256(abi.encodePacked(_name))), \"name\")\r\n        .length == 0,\r\n      \"GeodeUtils: name already claimed\"\r\n    );\r\n    GEODE.newProposal(_CONTROLLER, _type, _proposalDuration, _name);\r\n  }\r\n\r\n  function approveProposal(uint256 _id) external virtual {\r\n    GEODE.approveProposal(DATASTORE, _id);\r\n  }\r\n\r\n  function approveSenate(uint256 proposalId, uint256 electorId)\r\n    external\r\n    virtual\r\n  {\r\n    GEODE.approveSenate(DATASTORE, proposalId, electorId);\r\n  }\r\n\r\n  /// @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022.\r\n  function isUpgradeAllowed(address proposed_implementation)\r\n    external\r\n    view\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    return GEODE.isUpgradeAllowed(proposed_implementation);\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/helpers/test/TestDataStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"../../utils/DataStoreLib.sol\";\r\n\r\ncontract DataStoreUtilsTest {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n  DataStoreUtils.DataStore private DATASTORE;\r\n\r\n  function readUintForId(uint256 _id, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint256 data)\r\n  {\r\n    data = DATASTORE.readUintForId(_id, _key);\r\n  }\r\n\r\n  function readBytesForId(uint256 _id, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bytes memory data)\r\n  {\r\n    data = DATASTORE.readBytesForId(_id, _key);\r\n  }\r\n\r\n  function readAddressForId(uint256 _id, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address data)\r\n  {\r\n    data = DATASTORE.readAddressForId(_id, _key);\r\n  }\r\n\r\n  function writeUintForId(\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    uint256 data\r\n  ) public {\r\n    DATASTORE.writeUintForId(_id, _key, data);\r\n  }\r\n\r\n  function writeBytesForId(\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    bytes memory data\r\n  ) public {\r\n    DATASTORE.writeBytesForId(_id, _key, data);\r\n  }\r\n\r\n  function writeAddressForId(\r\n    uint256 _id,\r\n    bytes32 _key,\r\n    address data\r\n  ) public {\r\n    DATASTORE.writeAddressForId(_id, _key, data);\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/helpers/test/nonERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"../../../interfaces/IgAVAX.sol\";\r\n\r\ncontract nonERC1155Receiver is Context {\r\n  uint256 private immutable _id;\r\n  IgAVAX private immutable _ERC1155;\r\n\r\n  constructor(uint256 id_, address gAVAX_1155) {\r\n    _id = id_;\r\n    _ERC1155 = IgAVAX(gAVAX_1155);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 amount) public virtual {\r\n    _burn(_msgSender(), amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"burn from the zero address\");\r\n\r\n    unchecked {\r\n      _ERC1155.burn(account, _id, amount);\r\n    }\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    unchecked {\r\n      _ERC1155.safeTransferFrom(sender, recipient, _id, amount, \"\");\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/gAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\nimport \"./helpers/ERC1155SupplyMinterPauser.sol\";\r\n\r\n/**\r\n * @title Geode Finance geode-avax: gAVAX\r\n * gAVAX is a special ERC1155 contract with additional functionalities.\r\n * One of the unique functionalities are the included price logic that tracks the underlaying ratio with\r\n * staked asset, AVAX.\r\n * Other and most important change is the implementation of ERC1155Interfaces.\r\n * This addition effectively result in changes in safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck()\r\n * functions, reasoning is in the comments.\r\n * @dev recommended to check helpers/ERC1155SupplyMinterPauser.sol first\r\n */\r\n\r\ncontract gAVAX is ERC1155SupplyMinterPauser {\r\n  using Address for address;\r\n  event InterfaceChanged(address indexed newInterface, uint256 ID);\r\n\r\n  bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\r\n  string public constant name = \"Geode Staked AVAX\";\r\n  string public constant symbol = \"gAVAX\";\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   * @notice Mapping from planet IDs to ERC1155interface implementation addresses\r\n   * There can be multiple Interfaces for 1 planet(staking pool).\r\n   **/\r\n  mapping(uint256 => mapping(address => bool)) private _interfaces;\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   * @notice shows the underlying AVAX for 1 staked gAVAX for a given asset id\r\n   * @dev freshly assigned ids should return 1e18 since initally 1 AVAX = 1 gAVAX\r\n   **/\r\n  mapping(uint256 => uint256) private _pricePerShare;\r\n\r\n  constructor(string memory uri) ERC1155SupplyMinterPauser(uri) {\r\n    _setupRole(ORACLE_ROLE, _msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   * @notice checks if an address is defined as an interface for the given Planet id.\r\n   */\r\n  function isInterface(address _interface, uint256 id)\r\n    public\r\n    view\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    require(\r\n      _interface != address(0),\r\n      \"gAVAX: interface query for the zero address\"\r\n    );\r\n\r\n    return _interfaces[id][_interface];\r\n  }\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   * @dev only authorized parties should set the interface as this is super crucial.\r\n   */\r\n  function _setInterface(\r\n    address _Interface,\r\n    uint256 _id,\r\n    bool isSet\r\n  ) internal virtual {\r\n    require(\r\n      _Interface != address(0),\r\n      \"gAVAX: interface query for the zero address\"\r\n    );\r\n\r\n    _interfaces[_id][_Interface] = isSet;\r\n  }\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   * @notice to be used to set an an address of a contract that will\r\n   * be behaved as an interface by gAVAX contract for a spesific ID\r\n   */\r\n  function setInterface(\r\n    address _Interface,\r\n    uint256 _id,\r\n    bool isSet\r\n  ) external virtual {\r\n    require(\r\n      hasRole(MINTER_ROLE, _msgSender()),\r\n      \"gAVAX: must have MINTER_ROLE to set\"\r\n    );\r\n    require(_Interface.isContract(), \"gAVAX: _Interface must be a contract\");\r\n\r\n    _setInterface(_Interface, _id, isSet);\r\n\r\n    emit InterfaceChanged(_Interface, _id);\r\n  }\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   */\r\n  function pricePerShare(uint256 _id) external view returns (uint256) {\r\n    return _pricePerShare[_id];\r\n  }\r\n\r\n  /**\r\n   * @dev ADDED for gAVAX\r\n   */\r\n  function _setPricePerShare(uint256 pricePerShare_, uint256 _id)\r\n    internal\r\n    virtual\r\n  {\r\n    _pricePerShare[_id] = pricePerShare_;\r\n  }\r\n\r\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id)\r\n    external\r\n    virtual\r\n  {\r\n    require(\r\n      hasRole(ORACLE_ROLE, _msgSender()),\r\n      \"gAVAX: must have ORACLE to set\"\r\n    );\r\n\r\n    _setPricePerShare(pricePerShare_, _id);\r\n  }\r\n\r\n  /**\r\n   * @notice updates the authorized party for all crucial operations related to\r\n   * minting, pricing and interfaces.\r\n   * @dev MinterPauserOracle is basically a superUser, there can be only 1 at a given time,\r\n   * intended as \"Portal\"\r\n   */\r\n  function updateMinterPauserOracle(address Minter) external virtual {\r\n    require(\r\n      hasRole(MINTER_ROLE, _msgSender()),\r\n      \"gAVAX: must have MINTER_ROLE to set\"\r\n    );\r\n\r\n    renounceRole(MINTER_ROLE, _msgSender());\r\n    renounceRole(PAUSER_ROLE, _msgSender());\r\n    renounceRole(ORACLE_ROLE, _msgSender());\r\n\r\n    _setupRole(MINTER_ROLE, Minter);\r\n    _setupRole(PAUSER_ROLE, Minter);\r\n    _setupRole(ORACLE_ROLE, Minter);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-safeTransferFrom}.\r\n   * @dev CHANGED for gAVAX\r\n   * @dev interfaces can move your tokens without asking you.\r\n   * @dev ADDED \"|| isInterface(_msgSender(),id))\"\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public virtual override {\r\n    require(\r\n      from == _msgSender() ||\r\n        (isApprovedForAll(from, _msgSender()) || isInterface(_msgSender(), id)),\r\n      \"ERC1155: caller is not owner nor interface nor approved\"\r\n    );\r\n\r\n    _safeTransferFrom(from, to, id, amount, data);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-safeTransferFrom}.\r\n   * @dev CHANGED for gAVAX\r\n   * @dev ADDED \"|| isInterface(_msgSender(),id))\"\r\n   */\r\n  function burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 value\r\n  ) public virtual override {\r\n    require(\r\n      account == _msgSender() ||\r\n        (isApprovedForAll(account, _msgSender()) ||\r\n          isInterface(_msgSender(), id)),\r\n      \"ERC1155: caller is not owner nor interface nor approved\"\r\n    );\r\n\r\n    _burn(account, id, value);\r\n  }\r\n\r\n  /**\r\n   * @notice interfaces should handle their own Checks in the contract\r\n   * @dev See {IERC1155-safeTransferFrom}.\r\n   * @dev CHANGED for gAVAX\r\n   * @dev ADDED \"&& !isInterface(operator,id))\"\r\n   */\r\n  function _doSafeTransferAcceptanceCheck(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual override {\r\n    if (to.isContract() && !isInterface(operator, id)) {\r\n      try\r\n        IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)\r\n      returns (bytes4 response) {\r\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n          revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n        }\r\n      } catch Error(string memory reason) {\r\n        revert(reason);\r\n      } catch {\r\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/Portal/gAvaxInterfaces/ERC20InterfaceUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"../../interfaces/IgAVAX.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20InterfaceUpgradable is\r\n  Initializable,\r\n  ContextUpgradeable,\r\n  IERC20Upgradeable,\r\n  IERC20MetadataUpgradeable\r\n{\r\n  /**\r\n   * @dev gAVAX ERC20 interface doesn't use balance info, catches it from ERC1155.\r\n   * mapping(address => uint256) private _balances;\r\n   **/\r\n\r\n  /**\r\n   * @dev gAVAX ERC20 interface doesn't use totalSupply info, catches it from ERC1155.\r\n   * uint256 private _totalSupply;\r\n   **/\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  string private _name;\r\n  string private _symbol;\r\n  uint256 private _id;\r\n  IgAVAX private _ERC1155;\r\n\r\n  /**\r\n   * @dev Sets the values for {name} and {symbol}.\r\n   *\r\n   * The default value of {decimals} is 18. To select a different value for\r\n   * {decimals} you should overload it.\r\n   *\r\n   */\r\n  function initialize(\r\n    uint256 id_,\r\n    string memory name_,\r\n    address gAVAX_1155\r\n  ) public virtual initializer {\r\n    _id = id_;\r\n    _name = string(abi.encodePacked(name_, \" gAVAX\"));\r\n    _symbol = string(abi.encodePacked(\"yyAVAX\"));\r\n    _ERC1155 = IgAVAX(gAVAX_1155);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n   * overridden;\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _ERC1155.totalSupply(_id);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _ERC1155.balanceOf(account, _id);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``sender``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(\r\n      currentAllowance >= amount,\r\n      \"ERC20: transfer amount exceeds allowance\"\r\n    );\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender] + addedValue\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(\r\n      currentAllowance >= subtractedValue,\r\n      \"ERC20: decreased allowance below zero\"\r\n    );\r\n    unchecked {\r\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function pricePerShare() public view returns (uint256) {\r\n    // shows the u underlying ETH for 1 staked ether for a given Registerer as 1e18\r\n    return _ERC1155.pricePerShare(_id);\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    uint256 senderBalance = balanceOf(sender);\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n      _ERC1155.safeTransferFrom(sender, recipient, _id, amount, \"\");\r\n    }\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n\r\n    _afterTokenTransfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n}\r\n"
    },
    "contracts/Portal/helpers/test/TestUpgradePortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.7;\r\n\r\nimport \"../../Portal.sol\";\r\n\r\ncontract PortalV2 is Portal {\r\n  using DataStoreUtils for DataStoreUtils.DataStore;\r\n  using GeodeUtils for GeodeUtils.Universe;\r\n  using StakeUtils for StakeUtils.StakePool;\r\n  uint256 private newParam;\r\n  uint256 private constant newConstParam = 42;\r\n\r\n  function initializeV2(uint256 _versionNumber) public virtual {\r\n    require(CONTRACT_VERSION == 1);\r\n    // getVersion\r\n    CONTRACT_VERSION = _versionNumber;\r\n    emit ContractVersionSet(CONTRACT_VERSION);\r\n  }\r\n\r\n  function setNewParam(uint256 value) public {\r\n    newParam = value;\r\n  }\r\n\r\n  function getNewParam() public view returns (uint256) {\r\n    return newParam;\r\n  }\r\n\r\n  function getNewConstParam() public pure returns (uint256) {\r\n    return newConstParam;\r\n  }\r\n\r\n  function setNewParamOnlyGovernance(uint256 value) public onlyGovernance {\r\n    newParam = value;\r\n  }\r\n\r\n  function getNewParamOnlyGovernance()\r\n    public\r\n    view\r\n    onlyGovernance\r\n    returns (uint256)\r\n  {\r\n    return newParam;\r\n  }\r\n\r\n  uint256[43] private __gap;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}