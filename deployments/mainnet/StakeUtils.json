{
  "address": "0x8Ef0bFfD16fF76FF97Fe028817f9B6283835BE8A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSurplus",
          "type": "uint256"
        }
      ],
      "name": "FeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MaintainerFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "MaxMaintainerFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeOperator",
          "type": "uint256"
        }
      ],
      "name": "OperatorActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deactiveOperator",
          "type": "uint256"
        }
      ],
      "name": "OperatorDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedFeeTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "OracleUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSurplus",
          "type": "uint256"
        }
      ],
      "name": "SurplusClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UnpausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidDebt",
          "type": "uint256"
        }
      ],
      "name": "debtPaid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEACTIVATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNORABLE_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ACTIVE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gAVAX_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ed3c98b77108665c4e7ddd1a5b4ae40570474b75c72f1f45058029f9e6b6708",
  "receipt": {
    "to": null,
    "from": "0x1B007c50E78ed35fDFAd395BC41C1DBD8Bb9E385",
    "contractAddress": "0x8Ef0bFfD16fF76FF97Fe028817f9B6283835BE8A",
    "transactionIndex": 0,
    "gasUsed": "4053850",
    "logsBloom": "0x
    "blockHash": "0x05c8b9eea9d8edd10118ff5fcedf3e88582cfee38887f6e2baeea7d7366ffd04",
    "transactionHash": "0x2ed3c98b77108665c4e7ddd1a5b4ae40570474b75c72f1f45058029f9e6b6708",
    "logs": [],
    "blockNumber": 18987313,
    "cumulativeGasUsed": "4053850",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5ff266d54862d91a576754dfca1f1c14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSurplus\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MaintainerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"MaxMaintainerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeOperator\",\"type\":\"uint256\"}],\"name\":\"OperatorActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactiveOperator\",\"type\":\"uint256\"}],\"name\":\"OperatorDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedFeeTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTimeStamp\",\"type\":\"uint256\"}],\"name\":\"OracleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSurplus\",\"type\":\"uint256\"}],\"name\":\"SurplusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnpausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidDebt\",\"type\":\"uint256\"}],\"name\":\"debtPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEACTIVATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNORABLE_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ACTIVE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gAVAX_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contracts relying on this library must initialize StakeUtils.StakePoolALL \\\"fee\\\" variables are limited by FEE_DENOMINATOR = 100% Note *suggested* refer to GeodeUtils before reviewing Note refer to DataStoreUtils before reviewing Note beware of the staking pool and operator implementations: Operatores have properties like accumulatedFee, fee(as a percentage), maintainer. Every staking pool(aka planet) is also an operator by design. Planets(type 5) inherit operators (type 4), with additional properties like staking pools -relates to params: pBalance, surplus, unclaimedFees-, withdrawal pool - relates to debt - and liquid asset(gAvax).\",\"kind\":\"dev\",\"methods\":{\"accumulatedFee(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"function also returns the key for ease of use, please use.\"},\"activateOperator(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"However it can still continue holding its old balance until activationExpiration, and gain feesactivationExpiration timestamp until new activeoperator continues getting fees from id's staking pool\"},\"deactivateOperator(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"when activationExpiration is up, operator will NOT be able generate fees from pool, it is expected for them to return the assets as surplus with payDebt function_deactivateAfter seconds until activation expires,\"},\"deployWithdrawalPool(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"sets the withdrawal pool with respective\"},\"oraclePrice(StakeUtils.StakePool storage,uint256)\":{\"details\":\"also the *mint price* when there is a no debt\"},\"reportOracle(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256[],uint256[])\":{\"details\":\"simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\",\"params\":{\"_opIds\":\"all ids of all operators who still collect fees.\",\"_pBalanceIncreases\":\"the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\",\"_reportedTimeStamp\":\"ensures prepeared report is prepeared within last activation period, prevent previous reports to be accepted. \"},\"returns\":{\"price\":\": new price after sanitychecks, might be useful if onchain oracle in the future\"}},\"stake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"swap op param // d  m.v // 100 10 => buyback // 100 100  => buyback // 10 100  =>  buyback + mint // 0 x => mint\",\"minGavax\":\"swap op param\",\"poolId\":\"id of the staking pool, withdrawal pool and gAVAX to be used.\"}}},\"stateVariables\":{\"gAVAX_DENOMINATOR\":{\"details\":\"gAVAX_DENOMINATOR makes sure that we are taking care of decimals on calculations related to gAVAX\"}},\"title\":\"StakeUtils library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ORACLE_PERIOD()\":{\"notice\":\"Oracle is active for the first 30 min for a day\"},\"accumulatedFee(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"accumulatedFee is stored with a key combines the poolId, claimerId & \\\"accumulatedFee\\\"\"},\"activateOperator(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and creating validators, it activates the validator.Changes activeOperator of the given ID; old activeOperator can NOT claim surplus anymore\"},\"claimFee(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"anyone can call this function, but it sends AVAX to maintainer.reverts if there are not enough surplus.\"},\"claimSurplus(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"only authorized Operator is expected to claim the surplus of a staking poolcurrent fees are not allowed to be claimed from surplus, however oracle update can also make it hard since it increases unclaimedFees without touching the surplus\"},\"deactivateOperator(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"deactivates an old operator for the given staking pool\"},\"deployWithdrawalPool(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"deploys a new withdrawal pool using DEFAULT_SWAP_POOL\"},\"gAVAX_DENOMINATOR()\":{\"notice\":\"gAVAX lacks *decimals*,\"},\"getMaintainerFee(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\"},\"isStakingPausedForPool(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"** WITHDRAWAL POOL specific functions **\"},\"oraclePrice(StakeUtils.StakePool storage,uint256)\":{\"notice\":\"oraclePrice is a reliable source for any contract operation\"},\"pauseStakingForPool(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"pausing only prevents new staking operations. when a pool is paused for staking there are NO new funds to be minted, NO surplus.\"},\"payDebt(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"Only an Operator is expected to pay for the DEBT of a staking pool. When it is paid, p subChain balance decreases, effectively changing the price calculations!\"},\"reportOracle(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256[],uint256[])\":{\"notice\":\"only Oracle can report a new price. However price is not purely calculated by it. the balance on P subchain is estimated by it, including the unrealized staking rewards. Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\"},\"stake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"notice\":\"staking function. buys if price is low, mints new tokens if a surplus is sent (extra avax through msg.value)\"}},\"notice\":\"Exclusively contains functions related to Avax Liquid Staking designed by Geode Financebiggest part of the functionality is related to Withdrawal Pools which relies on continuous buybacks for price peg with DEBT/SURPLUS calculations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/StakeUtilsLib.sol\":\"StakeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"contracts/Portal/utils/DataStoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Storage Management library for dynamic structs based on data types\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n  /**\\r\\n   * @notice Main Struct for reading and writing data to storage for given id+key pairs\\r\\n   * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n   * @param uintData keccak(id, key) =>  returns uint256\\r\\n   * @param bytesData keccak(id, key) => returns bytes\\r\\n   * @param addressData keccak(id, key) =>  returns address\\r\\n   * NOTE any other storage type can be expressed as bytes\\r\\n   */\\r\\n  struct DataStore {\\r\\n    mapping(uint256 => uint256[]) allIdsByType;\\r\\n    mapping(bytes32 => uint256) uintData;\\r\\n    mapping(bytes32 => bytes) bytesData;\\r\\n    mapping(bytes32 => address) addressData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * **DATA GETTERS **\\r\\n   **/\\r\\n  function readUintForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (uint256 data) {\\r\\n    data = self.uintData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  function readBytesForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (bytes memory data) {\\r\\n    data = self.bytesData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  function readAddressForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key\\r\\n  ) public view returns (address data) {\\r\\n    data = self.addressData[keccak256(abi.encodePacked(_id, _key))];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * **DATA SETTERS **\\r\\n   **/\\r\\n  function writeUintForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    uint256 data\\r\\n  ) public {\\r\\n    self.uintData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n\\r\\n  function writeBytesForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    bytes memory data\\r\\n  ) public {\\r\\n    self.bytesData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n\\r\\n  function writeAddressForId(\\r\\n    DataStore storage self,\\r\\n    uint256 _id,\\r\\n    bytes32 _key,\\r\\n    address data\\r\\n  ) public {\\r\\n    self.addressData[keccak256(abi.encodePacked(_id, _key))] = data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x16e2087089643f4eed141f33ed3452872843f1827d8bb43fa64f968939d4e302\",\"license\":\"MIT\"},\"contracts/Portal/utils/StakeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"../../interfaces/ISwap.sol\\\";\\r\\nimport \\\"../../interfaces/IgAVAX.sol\\\";\\r\\nimport \\\"../../WithdrawalPool/LPToken.sol\\\";\\r\\nimport \\\"./DataStoreLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakeUtils library\\r\\n * @notice Exclusively contains functions related to Avax Liquid Staking designed by Geode Finance\\r\\n * @notice biggest part of the functionality is related to Withdrawal Pools\\r\\n * which relies on continuous buybacks for price peg with DEBT/SURPLUS calculations\\r\\n * @dev Contracts relying on this library must initialize StakeUtils.StakePool\\r\\n * @dev ALL \\\"fee\\\" variables are limited by FEE_DENOMINATOR = 100%\\r\\n * Note *suggested* refer to GeodeUtils before reviewing\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n * Note beware of the staking pool and operator implementations:\\r\\n * Operatores have properties like accumulatedFee, fee(as a percentage), maintainer.\\r\\n * Every staking pool(aka planet) is also an operator by design.\\r\\n * Planets(type 5) inherit operators (type 4), with additional properties like staking pools -relates to\\r\\n * params: pBalance, surplus, unclaimedFees-, withdrawal pool - relates to debt - and liquid asset(gAvax).\\r\\n */\\r\\nlibrary StakeUtils {\\r\\n  using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n  event MaintainerFeeUpdated(uint256 id, uint256 fee);\\r\\n  event MaxMaintainerFeeUpdated(uint256 newMaxFee);\\r\\n  event PriceChanged(uint256 id, uint256 pricePerShare);\\r\\n  event OracleUpdate(\\r\\n    uint256 id,\\r\\n    uint256 price,\\r\\n    uint256 newPBalance,\\r\\n    uint256 distributedFeeTotal,\\r\\n    uint256 updateTimeStamp\\r\\n  );\\r\\n  event OperatorActivated(uint256 id, uint256 activeOperator);\\r\\n  event OperatorDeactivated(uint256 id, uint256 deactiveOperator);\\r\\n  event debtPaid(uint256 id, uint256 operatorId, uint256 paidDebt);\\r\\n  event SurplusClaimed(uint256 id, uint256 newSurplus);\\r\\n  event FeeClaimed(uint256 id, uint256 claimerId, uint256 newSurplus);\\r\\n  event PausedPool(uint256 id);\\r\\n  event UnpausedPool(uint256 id);\\r\\n\\r\\n  /**\\r\\n   * @notice StakePool includes the parameters related to Staking Pool Contracts.\\r\\n   * @notice A staking pool works with a *bound* Withdrawal Pool to create best pricing\\r\\n   * for the staking derivative. Withdrawal Pools uses StableSwap algorithm.\\r\\n   * @param gAVAX ERC1155 contract that keeps the totalSupply, pricepershare and balances of all StakingPools by ID\\r\\n   * @dev  gAVAX should not be changed ever!\\r\\n   * @param DEFAULT_SWAP_POOL STABLESWAP pool that will be cloned to be used as Withdrawal Pool of given ID\\r\\n   * @param DEFAULT_LP_TOKEN LP token implementation that will be cloned to be used for Withdrawal Pool of given ID\\r\\n   * @param ORACLE https://github.com/Geodefi/Telescope\\r\\n   * @param DEFAULT_A Withdrawal Pool parameter\\r\\n   * @param DEFAULT_FEE Withdrawal Pool parameter\\r\\n   * @param DEFAULT_ADMIN_FEE Withdrawal Pool parameter\\r\\n   * @param FEE_DENOMINATOR represents 100% ALSO Withdrawal Pool parameter\\r\\n   * @param MAX_MAINTAINER_FEE : limits operator.fee and planet.fee, set by GOVERNANCE\\r\\n   * @dev changing any of address parameters (gAVAX, ORACLE, DEFAULT_SWAP_POOL, DEFAULT_LP_TOKEN) MUST require a contract upgrade to ensure security\\r\\n   **/\\r\\n  struct StakePool {\\r\\n    address gAVAX;\\r\\n    address DEFAULT_SWAP_POOL;\\r\\n    address DEFAULT_LP_TOKEN;\\r\\n    address ORACLE;\\r\\n    uint256 DEFAULT_A;\\r\\n    uint256 DEFAULT_FEE;\\r\\n    uint256 DEFAULT_ADMIN_FEE;\\r\\n    uint256 FEE_DENOMINATOR;\\r\\n    uint256 PERIOD_PRICE_INCREASE_LIMIT;\\r\\n    uint256 MAX_MAINTAINER_FEE;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice gAVAX lacks *decimals*,\\r\\n   * @dev gAVAX_DENOMINATOR makes sure that we are taking care of decimals on calculations related to gAVAX\\r\\n   */\\r\\n  uint256 public constant gAVAX_DENOMINATOR = 1e18;\\r\\n\\r\\n  /// @notice Oracle is active for the first 30 min for a day\\r\\n  uint256 public constant ORACLE_PERIOD = 1 days;\\r\\n  uint256 public constant ORACLE_ACTIVE_PERIOD = 30 minutes;\\r\\n  uint256 public constant DEACTIVATION_PERIOD = 15 days;\\r\\n  uint256 public constant IGNORABLE_DEBT = 1 ether;\\r\\n\\r\\n  /**\\r\\n   * @notice whenever an operator is activated for a staking pool, it sets an activationExpiration date, which\\r\\n   * means the op pay debt by burning gAvax tokens and collect fee from their validators.\\r\\n   * While this implementation allows any two different ids to cooperate, with multiple interactions at any given time,\\r\\n   * there can only be \\\"1\\\" activeOperator who can also claimSurplus to create new validators.\\r\\n   */\\r\\n  modifier beforeActivationExpiration(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _claimerId\\r\\n  ) {\\r\\n    require(\\r\\n      _DATASTORE.readUintForId(\\r\\n        _poolId,\\r\\n        bytes32(keccak256(abi.encodePacked(_claimerId, \\\"activationExpiration\\\")))\\r\\n      ) > block.timestamp,\\r\\n      \\\"StakeUtils: operatorId activationExpiration has past\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyMaintainer(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) {\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"maintainer\\\") == msg.sender,\\r\\n      \\\"StakeUtils: sender not maintainer\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _clone(address target) public returns (address) {\\r\\n    return Clones.clone(target);\\r\\n  }\\r\\n\\r\\n  function getgAVAX(StakePool storage self) public view returns (IgAVAX) {\\r\\n    return IgAVAX(self.gAVAX);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** Maintainer specific functions **\\r\\n   *\\r\\n   * @note \\\"Maintainer\\\" is a shared logic like \\\"fee\\\" by both operator and pools.\\r\\n   * Maintainers have permissiones to maintain the given id like setting a new fee or interface as\\r\\n   * well as paying debt etc. for operators.\\r\\n   * @dev maintainer is set by CONTROLLER of given id\\r\\n   */\\r\\n\\r\\n  /// @notice even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum\\r\\n  function getMaintainerFee(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (uint256) {\\r\\n    return\\r\\n      _DATASTORE.readUintForId(_id, \\\"fee\\\") > self.MAX_MAINTAINER_FEE\\r\\n        ? self.MAX_MAINTAINER_FEE\\r\\n        : _DATASTORE.readUintForId(_id, \\\"fee\\\");\\r\\n  }\\r\\n\\r\\n  function setMaintainerFee(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _newFee\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    require(\\r\\n      _newFee <= self.MAX_MAINTAINER_FEE,\\r\\n      \\\"StakeUtils: MAX_MAINTAINER_FEE ERROR\\\"\\r\\n    );\\r\\n    _DATASTORE.writeUintForId(_id, \\\"fee\\\", _newFee);\\r\\n    emit MaintainerFeeUpdated(_id, _newFee);\\r\\n  }\\r\\n\\r\\n  function setMaxMaintainerFee(StakePool storage self, uint256 _newMaxFee)\\r\\n    external\\r\\n  {\\r\\n    require(\\r\\n      _newMaxFee <= self.FEE_DENOMINATOR,\\r\\n      \\\"StakeUtils: fee more than 100%\\\"\\r\\n    );\\r\\n    self.MAX_MAINTAINER_FEE = _newMaxFee;\\r\\n    emit MaxMaintainerFeeUpdated(_newMaxFee);\\r\\n  }\\r\\n\\r\\n  function changeMaintainer(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    address _newMaintainer\\r\\n  ) external {\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\") == msg.sender,\\r\\n      \\\"StakeUtils: not CONTROLLER of given id\\\"\\r\\n    );\\r\\n    require(\\r\\n      _newMaintainer != address(0),\\r\\n      \\\"StakeUtils: maintainer can not be zero\\\"\\r\\n    );\\r\\n\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"maintainer\\\", _newMaintainer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** Staking Pool specific functions **\\r\\n   */\\r\\n\\r\\n  /// @notice mints gAVAX tokens with given ID and amount.\\r\\n  /// @dev shouldn't be accesible publicly\\r\\n  function _mint(\\r\\n    address _gAVAX,\\r\\n    address _to,\\r\\n    uint256 _id,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    require(_id > 0, \\\"StakeUtils: _mint id should be > 0\\\");\\r\\n    IgAVAX(_gAVAX).mint(_to, _id, _amount, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice conducts a buyback using the given withdrawal pool,\\r\\n   * @param to address to send bought gAVAX(id). burns the tokens if to=address(0), transfers if not\\r\\n   * @param poolId id of the gAVAX that will be bought\\r\\n   * @param sellAvax AVAX amount to sell\\r\\n   * @param minToBuy TX is expected to revert by Swap.sol if not meet\\r\\n   * @param deadline TX is expected to revert by Swap.sol if deadline has past\\r\\n   * @dev this function assumes that pool is deployed by deployWithdrawalPool\\r\\n   * as index 0 is avax and index 1 is Gavax\\r\\n   */\\r\\n  function _buyback(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    address to,\\r\\n    uint256 poolId,\\r\\n    uint256 sellAvax,\\r\\n    uint256 minToBuy,\\r\\n    uint256 deadline\\r\\n  ) internal returns (uint256 outAmount) {\\r\\n    // SWAP in WP\\r\\n    outAmount = withdrawalPoolById(_DATASTORE, poolId).swap{ value: sellAvax }(\\r\\n      0,\\r\\n      1,\\r\\n      sellAvax,\\r\\n      minToBuy,\\r\\n      deadline\\r\\n    );\\r\\n    if (to == address(0)) {\\r\\n      // burn\\r\\n      getgAVAX(self).burn(address(this), poolId, outAmount);\\r\\n    } else {\\r\\n      // send back to user\\r\\n      getgAVAX(self).safeTransferFrom(address(this), to, poolId, outAmount, \\\"\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** ORACLE specific functions **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice sets pricePerShare parameter of gAVAX(id)\\r\\n   * @dev only ORACLE should be able to reach this after sanity checks on new price\\r\\n   */\\r\\n  function _setPricePerShare(\\r\\n    StakePool storage self,\\r\\n    uint256 pricePerShare_,\\r\\n    uint256 _id\\r\\n  ) internal {\\r\\n    require(_id > 0, \\\"StakeUtils: id should be > 0\\\");\\r\\n    getgAVAX(self).setPricePerShare(pricePerShare_, _id);\\r\\n    emit PriceChanged(_id, pricePerShare_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Oracle is only allowed for a period every day & pool operations are stopped then\\r\\n   * @return false if the last oracle update happened already (within the current daily period)\\r\\n   */\\r\\n  function _isOracleActive(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId\\r\\n  ) internal view returns (bool) {\\r\\n    return\\r\\n      (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\\r\\n      (_DATASTORE.readUintForId(_poolId, \\\"oracleUpdateTimeStamp\\\") <\\r\\n        block.timestamp - ORACLE_ACTIVE_PERIOD);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice oraclePrice is a reliable source for any contract operation\\r\\n   * @dev also the *mint price* when there is a no debt\\r\\n   */\\r\\n  function oraclePrice(StakePool storage self, uint256 _id)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256 _oraclePrice)\\r\\n  {\\r\\n    _oraclePrice = getgAVAX(self).pricePerShare(_id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\\r\\n   * @dev checks:\\r\\n   * 1. Price should be increased & it should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\\r\\n   *  with the factor of how many days since oracleUpdateTimeStamp has past.\\r\\n   *  To encourage report oracle each day, price increase limit is not calculated by considering compound effect\\r\\n   *  for multiple days.\\r\\n   */\\r\\n  function _sanityCheck(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _newPrice\\r\\n  ) internal view {\\r\\n    // need to put the lastPriceUpdate to DATASTORE to check if price is updated already for that day\\r\\n    uint256 periodsSinceUpdate = (block.timestamp +\\r\\n      ORACLE_ACTIVE_PERIOD -\\r\\n      _DATASTORE.readUintForId(_id, \\\"oracleUpdateTimeStamp\\\")) / ORACLE_PERIOD;\\r\\n    uint256 curPrice = oraclePrice(self, _id);\\r\\n    uint256 maxPrice = curPrice +\\r\\n      ((curPrice * self.PERIOD_PRICE_INCREASE_LIMIT * periodsSinceUpdate) /\\r\\n        self.FEE_DENOMINATOR);\\r\\n\\r\\n    require(\\r\\n      _newPrice <= maxPrice && _newPrice >= curPrice,\\r\\n      \\\"StakeUtils: price did NOT met\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice distribute fees to given operator Ids, by related to their fees.\\r\\n   * Finally, distribute the fee of maintainer of the pool from total amounts.\\r\\n   *\\r\\n   * @dev fees can be higher than current MAX, if MAX is changed afterwards, we check that condition.\\r\\n   */\\r\\n  function _distributeFees(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256[] calldata _opIds,\\r\\n    uint256[] calldata _pBalanceIncreases\\r\\n  ) internal returns (uint256 totalPBalanceIncrease, uint256 totalFees) {\\r\\n    require(\\r\\n      _opIds.length == _pBalanceIncreases.length,\\r\\n      \\\"StakeUtils: Array lengths doesn't match\\\"\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < _opIds.length; i++) {\\r\\n      // do not double spend if pool maintainer is also maintaining the validators\\r\\n      if (_opIds[i] != _poolId) {\\r\\n        // below require checks activationExpiration[keccak256(abi.encodePacked(_id, operator))] logic\\r\\n        require(\\r\\n          _DATASTORE.readUintForId(\\r\\n            _poolId,\\r\\n            bytes32(\\r\\n              keccak256(abi.encodePacked(_opIds[i], \\\"activationExpiration\\\"))\\r\\n            )\\r\\n          ) > block.timestamp - ORACLE_PERIOD,\\r\\n          \\\"StakeUtils: _opId activationExpiration has past\\\"\\r\\n        );\\r\\n        uint256 opFee = getMaintainerFee(self, _DATASTORE, _opIds[i]);\\r\\n        (uint256 _fee, bytes32 _key) = accumulatedFee(\\r\\n          _DATASTORE,\\r\\n          _poolId,\\r\\n          _opIds[i]\\r\\n        );\\r\\n        uint256 gainedOpFee = (opFee * _pBalanceIncreases[i]) /\\r\\n          self.FEE_DENOMINATOR;\\r\\n        _DATASTORE.writeUintForId(_poolId, _key, _fee + gainedOpFee);\\r\\n        totalFees += gainedOpFee;\\r\\n      }\\r\\n      totalPBalanceIncrease += _pBalanceIncreases[i];\\r\\n    }\\r\\n\\r\\n    // op_fee * _pBalanceIncrease[i] to calculate respective fee from the gained increase\\r\\n    uint256 poolFee = getMaintainerFee(self, _DATASTORE, _poolId);\\r\\n    uint256 gainedPoolFee = (poolFee * totalPBalanceIncrease) /\\r\\n      self.FEE_DENOMINATOR;\\r\\n\\r\\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, _poolId, _poolId);\\r\\n    totalFees += gainedPoolFee;\\r\\n    _DATASTORE.writeUintForId(_poolId, key, fee + gainedPoolFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only Oracle can report a new price. However price is not purely calculated by it.\\r\\n   * the balance on P subchain is estimated by it, including the unrealized staking rewards.\\r\\n   * Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds.\\r\\n\\r\\n   * @param _reportedTimeStamp ensures prepeared report is prepeared within last activation period, prevent previous reports to be accepted. \\r\\n   * @param _opIds all ids of all operators who still collect fees.\\r\\n   * @param _pBalanceIncreases the amount of avax that has been gained by the operator as POS rewards, respective to _opIds\\r\\n   * @dev simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)\\r\\n   * @return price : new price after sanitychecks, might be useful if onchain oracle in the future\\r\\n   */\\r\\n  function reportOracle(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _reportedTimeStamp,\\r\\n    uint256 _poolId,\\r\\n    uint256[] calldata _opIds,\\r\\n    uint256[] calldata _pBalanceIncreases\\r\\n  ) external returns (uint256 price) {\\r\\n    require(msg.sender == self.ORACLE, \\\"StakeUtils: msg.sender NOT oracle\\\");\\r\\n    require(\\r\\n      _isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is NOT active\\\"\\r\\n    );\\r\\n    require(\\r\\n      _reportedTimeStamp >= block.timestamp - ORACLE_ACTIVE_PERIOD,\\r\\n      \\\"StakeUtils: Reported timestamp is NOT valid\\\"\\r\\n    );\\r\\n\\r\\n    // distribute fees\\r\\n    (uint256 totalPBalanceIncrease, uint256 totalFees) = _distributeFees(\\r\\n      self,\\r\\n      _DATASTORE,\\r\\n      _poolId,\\r\\n      _opIds,\\r\\n      _pBalanceIncreases\\r\\n    );\\r\\n\\r\\n    uint256 newPBalance = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\") +\\r\\n      totalPBalanceIncrease;\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", newPBalance);\\r\\n\\r\\n    uint256 unclaimed = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\") +\\r\\n      totalFees;\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"unclaimedFees\\\", unclaimed);\\r\\n\\r\\n    // deduct unclaimed fees from surplus\\r\\n    price =\\r\\n      ((newPBalance +\\r\\n        _DATASTORE.readUintForId(_poolId, \\\"surplus\\\") -\\r\\n        unclaimed) * gAVAX_DENOMINATOR) /\\r\\n      (getgAVAX(self).totalSupply(_poolId));\\r\\n    _sanityCheck(self, _DATASTORE, _poolId, price);\\r\\n    _setPricePerShare(self, price, _poolId);\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _poolId,\\r\\n      \\\"oracleUpdateTimeStamp\\\",\\r\\n      block.timestamp\\r\\n    );\\r\\n    emit OracleUpdate(\\r\\n      _poolId,\\r\\n      price,\\r\\n      newPBalance,\\r\\n      totalFees,\\r\\n      _reportedTimeStamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** DEBT/SURPLUS/FEE specific functions **\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and\\r\\n   * creating validators, it activates the validator.\\r\\n   * @notice Changes activeOperator of the given ID; old activeOperator can NOT claim surplus anymore\\r\\n   * @dev However it can still continue holding its old balance until activationExpiration, and gain fees\\r\\n   * @dev activationExpiration timestamp until new activeoperator continues getting fees from id's staking pool\\r\\n   */\\r\\n  function activateOperator(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _activeId\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\\r\\n    _DATASTORE.writeUintForId(_id, \\\"activeOperator\\\", _activeId);\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _id,\\r\\n      bytes32(keccak256(abi.encodePacked(_activeId, \\\"activationExpiration\\\"))),\\r\\n      type(uint256).max\\r\\n    );\\r\\n    emit OperatorActivated(_id, _activeId);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice deactivates an old operator for the given staking pool\\r\\n   * @dev when activationExpiration is up, operator will NOT be able generate fees from pool,\\r\\n   * it is expected for them to return the assets as surplus with payDebt function\\r\\n   * @dev _deactivateAfter seconds until activation expires,\\r\\n   */\\r\\n  function deactivateOperator(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id,\\r\\n    uint256 _deactivedId\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) returns (bool) {\\r\\n    if (_DATASTORE.readUintForId(_id, \\\"activeOperator\\\") == _deactivedId)\\r\\n      _DATASTORE.writeUintForId(_id, \\\"activeOperator\\\", 0);\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _id,\\r\\n      bytes32(\\r\\n        keccak256(abi.encodePacked(_deactivedId, \\\"activationExpiration\\\"))\\r\\n      ),\\r\\n      block.timestamp + DEACTIVATION_PERIOD //15 days\\r\\n    );\\r\\n    emit OperatorDeactivated(_id, _deactivedId);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Only an Operator is expected to pay for the DEBT of a staking pool.\\r\\n   * When it is paid, p subChain balance decreases, effectively changing the price calculations!\\r\\n   */\\r\\n  function payDebt(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _operatorId\\r\\n  )\\r\\n    external\\r\\n    onlyMaintainer(_DATASTORE, _operatorId)\\r\\n    beforeActivationExpiration(_DATASTORE, _poolId, _operatorId)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n\\r\\n    //mgs.value should be bigger than 0 for everything to make sense\\r\\n    require(msg.value > 0, \\\"StakeUtils: no avax is sent\\\");\\r\\n\\r\\n    // msg.value is assined to value, value is the variable to keep how much left in my hand to continue\\r\\n    // paying the rest of the debts and or how much left after paying the debts to put the rest in to surplus\\r\\n    uint256 value = msg.value;\\r\\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n    uint256 unclaimedFees = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\");\\r\\n\\r\\n    // this if statement checks if there is a operation fee that needs to be paid.\\r\\n    // If distributed fee exceeds the surplus, there is a gap between fees and surplus\\r\\n    // so we check if the unclaimedFees are bigger than surplus.\\r\\n    if (unclaimedFees > surplus) {\\r\\n      // the difference between unclaimedFees and the surplus is the debt for the fees.\\r\\n      uint256 debtInFees = unclaimedFees - surplus;\\r\\n\\r\\n      // need to check if the debtInFees is bigger than the value, if not, can only pay value amount of debtInFees\\r\\n      // if not, we are paying all debtInFees by adding it to the surplus so that the difference might be 0(zero) after this action.\\r\\n      if (debtInFees > value) {\\r\\n        debtInFees = value;\\r\\n      }\\r\\n\\r\\n      // we pay for the debtInFees as we can\\r\\n      surplus += debtInFees;\\r\\n\\r\\n      // we substract the debtInFees from value since we cannot use that amount to pay the rest, it is already gone.\\r\\n      value -= debtInFees;\\r\\n    }\\r\\n\\r\\n    // we check if remaining value is bigger than 0 to save gas, because it may be already used\\r\\n    if (value > 0) {\\r\\n      // we get the debt from the withdrawal pool\\r\\n      uint256 debtToBurn = withdrawalPoolById(_DATASTORE, _poolId).getDebt();\\r\\n      // to save the gas we make sure that it is bigger then an ignorably low amount while we are doing a buyback\\r\\n      if (debtToBurn > IGNORABLE_DEBT) {\\r\\n        // same idea with the fee debt and values\\r\\n        if (debtToBurn > value) {\\r\\n          debtToBurn = value;\\r\\n        }\\r\\n\\r\\n        // burns\\r\\n        _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          address(0),\\r\\n          _poolId,\\r\\n          debtToBurn,\\r\\n          0,\\r\\n          type(uint256).max\\r\\n        );\\r\\n\\r\\n        // we substract the debt from value to see how much left if there is any left to put it on surplus\\r\\n        value -= debtToBurn;\\r\\n      }\\r\\n\\r\\n      // to save gas we are making sure that value is bigger than zero and if so, we add it to the surplus.\\r\\n      if (value > 0) {\\r\\n        surplus += value;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"surplus\\\", surplus + value);\\r\\n\\r\\n    // in all cases, if we pass the require msg.value > 0, that money is coming from the p chain\\r\\n    // and we need to decrease the pBalance for msg.value amount\\r\\n    uint256 pBalance = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\");\\r\\n    if (pBalance > msg.value) {\\r\\n      _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", pBalance - msg.value);\\r\\n    } else {\\r\\n      _DATASTORE.writeUintForId(_poolId, \\\"pBalance\\\", 0);\\r\\n    }\\r\\n\\r\\n    emit debtPaid(_poolId, _operatorId, msg.value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice only authorized Operator is expected to claim the surplus of a staking pool\\r\\n   * @notice current fees are not allowed to be claimed from surplus,\\r\\n   * however oracle update can also make it hard since it increases unclaimedFees without touching the surplus\\r\\n   */\\r\\n  function claimSurplus(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _poolId,\\r\\n    uint256 _claimerId\\r\\n  )\\r\\n    external\\r\\n    onlyMaintainer(_DATASTORE, _claimerId)\\r\\n    beforeActivationExpiration(_DATASTORE, _poolId, _claimerId)\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, _poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n    uint256 fees = _DATASTORE.readUintForId(_poolId, \\\"unclaimedFees\\\");\\r\\n    uint256 surplus = _DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n    require(surplus > fees, \\\"StakeUtils: pool fees exceed surplus\\\");\\r\\n    _DATASTORE.writeUintForId(_poolId, \\\"surplus\\\", fees);\\r\\n\\r\\n    uint256 currentPBal = _DATASTORE.readUintForId(_poolId, \\\"pBalance\\\");\\r\\n    _DATASTORE.writeUintForId(\\r\\n      _poolId,\\r\\n      \\\"pBalance\\\",\\r\\n      currentPBal + surplus - fees\\r\\n    );\\r\\n\\r\\n    (bool sent, ) = payable(\\r\\n      _DATASTORE.readAddressForId(_claimerId, \\\"maintainer\\\")\\r\\n    ).call{ value: surplus - fees }(\\\"\\\");\\r\\n    require(sent, \\\"StakeUtils: Failed to send Avax\\\");\\r\\n    emit SurplusClaimed(_poolId, surplus - fees);\\r\\n    return sent;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice accumulatedFee is stored with a key combines the poolId, claimerId & \\\"accumulatedFee\\\"\\r\\n   * @dev function also returns the key for ease of use, please use.\\r\\n   */\\r\\n  function accumulatedFee(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 claimerId\\r\\n  ) public view returns (uint256 fee, bytes32 key) {\\r\\n    key = bytes32(keccak256(abi.encodePacked(claimerId, \\\"accumulatedFee\\\")));\\r\\n    fee = _DATASTORE.readUintForId(poolId, key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice anyone can call this function, but it sends AVAX to maintainer.\\r\\n   * @notice reverts if there are not enough surplus.\\r\\n   */\\r\\n  function claimFee(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 claimerId\\r\\n  )\\r\\n    external\\r\\n    beforeActivationExpiration(_DATASTORE, poolId, claimerId)\\r\\n    returns (uint256 feeToSend)\\r\\n  {\\r\\n    require(\\r\\n      !_isOracleActive(_DATASTORE, poolId),\\r\\n      \\\"StakeUtils: Oracle is active\\\"\\r\\n    );\\r\\n    (uint256 fee, bytes32 key) = accumulatedFee(_DATASTORE, poolId, claimerId);\\r\\n\\r\\n    uint256 surplus = _DATASTORE.readUintForId(poolId, \\\"surplus\\\");\\r\\n    require(\\r\\n      fee > 0 && surplus > 0,\\r\\n      \\\"StakeUtils: fee and surplus should be bigger than zero\\\"\\r\\n    );\\r\\n\\r\\n    feeToSend = fee > surplus ? surplus : fee;\\r\\n    _DATASTORE.writeUintForId(poolId, \\\"surplus\\\", surplus - feeToSend);\\r\\n    uint256 _unclaimedFees = _DATASTORE.readUintForId(poolId, \\\"unclaimedFees\\\");\\r\\n\\r\\n    _DATASTORE.writeUintForId(\\r\\n      poolId,\\r\\n      \\\"unclaimedFees\\\",\\r\\n      _unclaimedFees - feeToSend\\r\\n    );\\r\\n\\r\\n    address receiver = payable(\\r\\n      _DATASTORE.readAddressForId(claimerId, \\\"maintainer\\\")\\r\\n    );\\r\\n\\r\\n    // set the accumulatedFee to zero\\r\\n    _DATASTORE.writeUintForId(poolId, key, fee - feeToSend);\\r\\n\\r\\n    (bool sent, ) = receiver.call{ value: feeToSend }(\\\"\\\");\\r\\n    require(sent, \\\"StakeUtils: Failed to send Avax\\\");\\r\\n    emit FeeClaimed(poolId, claimerId, feeToSend);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice                      ** WITHDRAWAL POOL specific functions **\\r\\n   */\\r\\n\\r\\n  function isStakingPausedForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (bool) {\\r\\n    // minting is paused when length != 0\\r\\n    return _DATASTORE.readBytesForId(_id, \\\"stakePaused\\\").length != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice pausing only prevents new staking operations.\\r\\n   * when a pool is paused for staking there are NO new funds to be minted, NO surplus.\\r\\n   */\\r\\n  function pauseStakingForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    _DATASTORE.writeBytesForId(_id, \\\"stakePaused\\\", bytes(\\\"1\\\")); // meaning true, importantly length > 0\\r\\n    emit PausedPool(_id);\\r\\n  }\\r\\n\\r\\n  function unpauseStakingForPool(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external onlyMaintainer(_DATASTORE, _id) {\\r\\n    _DATASTORE.writeBytesForId(_id, \\\"stakePaused\\\", bytes(\\\"\\\")); // meaning false, importantly length = 0\\r\\n    emit UnpausedPool(_id);\\r\\n  }\\r\\n\\r\\n  function withdrawalPoolById(\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) public view returns (ISwap) {\\r\\n    return ISwap(_DATASTORE.readAddressForId(_id, \\\"withdrawalPool\\\"));\\r\\n  }\\r\\n\\r\\n  function LPTokenById(DataStoreUtils.DataStore storage _DATASTORE, uint256 _id)\\r\\n    public\\r\\n    view\\r\\n    returns (LPToken)\\r\\n  {\\r\\n    return LPToken(_DATASTORE.readAddressForId(_id, \\\"LPToken\\\"));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice deploys a new withdrawal pool using DEFAULT_SWAP_POOL\\r\\n   * @dev sets the withdrawal pool with respective\\r\\n   */\\r\\n  function deployWithdrawalPool(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 _id\\r\\n  ) external returns (address WithdrawalPool) {\\r\\n    require(_id > 0, \\\"StakeUtils: id should be > 0\\\");\\r\\n    require(\\r\\n      _DATASTORE.readAddressForId(_id, \\\"withdrawalPool\\\") == address(0),\\r\\n      \\\"StakeUtils: withdrawalPool already exists\\\"\\r\\n    );\\r\\n\\r\\n    WithdrawalPool = _clone(self.DEFAULT_SWAP_POOL);\\r\\n\\r\\n    address _LPToken = ISwap(WithdrawalPool).initialize(\\r\\n      address(getgAVAX(self)),\\r\\n      _id,\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          _DATASTORE.readBytesForId(_id, \\\"name\\\"),\\r\\n          \\\"-Geode WP Token\\\"\\r\\n        )\\r\\n      ),\\r\\n      string(abi.encodePacked(_DATASTORE.readBytesForId(_id, \\\"name\\\"), \\\"-WP\\\")),\\r\\n      self.DEFAULT_A,\\r\\n      self.DEFAULT_FEE,\\r\\n      self.DEFAULT_ADMIN_FEE,\\r\\n      self.DEFAULT_LP_TOKEN\\r\\n    );\\r\\n\\r\\n    // initially 1 AVAX = 1 gAVAX\\r\\n    _setPricePerShare(self, 1 ether, _id);\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"withdrawalPool\\\", WithdrawalPool);\\r\\n    _DATASTORE.writeAddressForId(_id, \\\"LPToken\\\", _LPToken);\\r\\n\\r\\n    // approve token so we can use it in buybacks\\r\\n    getgAVAX(self).setApprovalForAll(WithdrawalPool, true);\\r\\n    LPTokenById(_DATASTORE, _id).approve(WithdrawalPool, type(uint256).max);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice staking function. buys if price is low, mints new tokens if a surplus is sent (extra avax through msg.value)\\r\\n   * @param poolId id of the staking pool, withdrawal pool and gAVAX to be used.\\r\\n   * @param minGavax swap op param\\r\\n   * @param deadline swap op param\\r\\n    // d  m.v\\r\\n    // 100 10 => buyback\\r\\n    // 100 100  => buyback\\r\\n    // 10 100  =>  buyback + mint\\r\\n    // 0 x => mint\\r\\n   */\\r\\n  function stake(\\r\\n    StakePool storage self,\\r\\n    DataStoreUtils.DataStore storage _DATASTORE,\\r\\n    uint256 poolId,\\r\\n    uint256 minGavax,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 totalgAvax) {\\r\\n    require(msg.value > 0, \\\"GeodePortal: no avax given\\\");\\r\\n    require(\\r\\n      !isStakingPausedForPool(_DATASTORE, poolId),\\r\\n      \\\"StakeUtils: minting is paused\\\"\\r\\n    );\\r\\n    uint256 debt = withdrawalPoolById(_DATASTORE, poolId).getDebt();\\r\\n    if (debt >= msg.value) {\\r\\n      return\\r\\n        _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          msg.sender,\\r\\n          poolId,\\r\\n          msg.value,\\r\\n          minGavax,\\r\\n          deadline\\r\\n        );\\r\\n    } else {\\r\\n      uint256 boughtGavax = 0;\\r\\n      uint256 remAvax = msg.value;\\r\\n      if (debt > IGNORABLE_DEBT) {\\r\\n        boughtGavax = _buyback(\\r\\n          self,\\r\\n          _DATASTORE,\\r\\n          msg.sender,\\r\\n          poolId,\\r\\n          debt,\\r\\n          0,\\r\\n          deadline\\r\\n        );\\r\\n        remAvax -= debt;\\r\\n      }\\r\\n      uint256 mintGavax = (\\r\\n        ((remAvax * gAVAX_DENOMINATOR) / oraclePrice(self, poolId))\\r\\n      );\\r\\n      _mint(self.gAVAX, msg.sender, poolId, mintGavax);\\r\\n      _DATASTORE.writeUintForId(\\r\\n        poolId,\\r\\n        \\\"surplus\\\",\\r\\n        _DATASTORE.readUintForId(poolId, \\\"surplus\\\") + remAvax\\r\\n      );\\r\\n      require(\\r\\n        boughtGavax + mintGavax >= minGavax,\\r\\n        \\\"StakeUtils: less than minGavax\\\"\\r\\n      );\\r\\n      return boughtGavax + mintGavax;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1d10785a9205e80f780fc854bb53819c334ef1571cd6fcd14c4a6ddb6c90e3df\",\"license\":\"MIT\"},\"contracts/WithdrawalPool/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Liquidity Provider Token\\r\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\r\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\r\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\r\\n */\\r\\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\\r\\n  /**\\r\\n   * @notice Initializes this LPToken contract with the given name and symbol\\r\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\r\\n   * in its initializer function.\\r\\n   * @param name name of this token\\r\\n   * @param symbol symbol of this token\\r\\n   */\\r\\n  function initialize(string memory name, string memory symbol)\\r\\n    external\\r\\n    initializer\\r\\n    returns (bool)\\r\\n  {\\r\\n    __Context_init_unchained();\\r\\n    __ERC20_init_unchained(name, symbol);\\r\\n    __Ownable_init_unchained();\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the given amount of LPToken to the recipient.\\r\\n   * @dev only owner can call this mint function\\r\\n   * @param recipient address of account to receive the tokens\\r\\n   * @param amount amount of tokens to mint\\r\\n   */\\r\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\r\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\r\\n    _mint(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\r\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\r\\n   * This assumes the owner is set to a Swap contract's address.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual override(ERC20Upgradeable) {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x12dbe7f8c21ec1cf4de45a7f2150e01e841f83f42436ab23fa76f35ef51383c8\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./IgAVAX.sol\\\";\\r\\n\\r\\ninterface ISwap {\\r\\n  // pool data view functions\\r\\n  function getERC1155() external view returns (address);\\r\\n\\r\\n  function getA() external view returns (uint256);\\r\\n\\r\\n  function getAPrecise() external view returns (uint256);\\r\\n\\r\\n  function getToken() external view returns (uint256);\\r\\n\\r\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n  function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n  function getDebt() external view returns (uint256);\\r\\n\\r\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\r\\n\\r\\n  // min return calculation functions\\r\\n  function calculateSwap(\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function calculateRemoveLiquidity(uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n  function calculateRemoveLiquidityOneToken(\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex\\r\\n  ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n  // state modifying functions\\r\\n  function initialize(\\r\\n    address _gAvax,\\r\\n    uint256 _pooledTokenId,\\r\\n    string memory lpTokenName,\\r\\n    string memory lpTokenSymbol,\\r\\n    uint256 _a,\\r\\n    uint256 _fee,\\r\\n    uint256 _adminFee,\\r\\n    address lpTokenTargetAddress\\r\\n  ) external returns (address lpToken);\\r\\n\\r\\n  function swap(\\r\\n    uint8 tokenIndexFrom,\\r\\n    uint8 tokenIndexTo,\\r\\n    uint256 dx,\\r\\n    uint256 minDy,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256);\\r\\n\\r\\n  function addLiquidity(\\r\\n    uint256[] calldata amounts,\\r\\n    uint256 minToMint,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    uint256 amount,\\r\\n    uint256[] calldata minAmounts,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory);\\r\\n\\r\\n  function removeLiquidityOneToken(\\r\\n    uint256 tokenAmount,\\r\\n    uint8 tokenIndex,\\r\\n    uint256 minAmount,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function removeLiquidityImbalance(\\r\\n    uint256[] calldata amounts,\\r\\n    uint256 maxBurnAmount,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function withdrawAdminFees() external;\\r\\n\\r\\n  function setAdminFee(uint256 newAdminFee) external;\\r\\n\\r\\n  function setSwapFee(uint256 newSwapFee) external;\\r\\n\\r\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\r\\n\\r\\n  function stopRampA() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb3e04fea3665487ed702679bf9b2934c06283675015eb1e0dd5f1e0ba29579b\",\"license\":\"MIT\"},\"contracts/interfaces/IgAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgAVAX {\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n  function uri(uint256) external view returns (string memory);\\r\\n\\r\\n  function balanceOf(address account, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n  function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n  function isApprovedForAll(address account, address operator)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function safeBatchTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function burn(\\r\\n    address account,\\r\\n    uint256 id,\\r\\n    uint256 value\\r\\n  ) external;\\r\\n\\r\\n  function burnBatch(\\r\\n    address account,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory values\\r\\n  ) external;\\r\\n\\r\\n  function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n  function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n  function mint(\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function mintBatch(\\r\\n    address to,\\r\\n    uint256[] memory ids,\\r\\n    uint256[] memory amounts,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n\\r\\n  function pause() external;\\r\\n\\r\\n  function unpause() external;\\r\\n\\r\\n  function pricePerShare(uint256 _id) external view returns (uint256);\\r\\n\\r\\n  function setPricePerShare(uint256 pricePerShare_, uint256 _id) external;\\r\\n\\r\\n  function isInterface(address operator, uint256 id)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function setInterface(\\r\\n    address _Interface,\\r\\n    uint256 _id,\\r\\n    bool isSet\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe3954d8ed0616f70079a6799a677c988f79dce2412a6be7c5ae8dc0a95e8967b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61486061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101985760003560e01c806376b05054116100e8578063b86aaf82116100a1578063e7345b691161007b578063e7345b691461040b578063fd34c1c01461042b578063fdf454fa1461043e578063fe406a7d1461045e57600080fd5b8063b86aaf82146103b0578063d163f89a146103d0578063d965692d146103e357600080fd5b806376b05054146103445780637c20672e1461035357806385c56cc51461035d57806386a51db514610370578063901b0a43146103445780639e8c22831461039057600080fd5b80633f4cdcda11610155578063569391b61161012f578063569391b6146102db5780635f365cb4146102fb5780636b4a7685146103045780636ecc89651461032457600080fd5b80633f4cdcda1461028d578063538b984f146102a857806355e66bad146102bb57600080fd5b8063053b592e1461019d5780630700d74b146101d057806313fec1c0146101f25780632f11d0021461021257806334e86093146102425780633c9caf1c1461027a575b600080fd5b8180156101a957600080fd5b506101bd6101b83660046143bf565b610468565b6040519081526020015b60405180910390f35b8180156101dc57600080fd5b506101f06101eb366004614257565b610789565b005b8180156101fe57600080fd5b506101bd61020d3660046142b2565b61081b565b81801561021e57600080fd5b5061023261022d3660046142b2565b610dfa565b60405190151581526020016101c7565b81801561024e57600080fd5b5061026261025d366004614159565b611433565b6040516001600160a01b0390911681526020016101c7565b610262610288366004614257565b611444565b61026261029b3660046142de565b546001600160a01b031690565b6101bd6102b6366004614257565b6114e9565b8180156102c757600080fd5b506101f06102d6366004614279565b611579565b8180156102e757600080fd5b506101f06102f6366004614257565b611773565b6101bd61070881565b81801561031057600080fd5b5061026261031f3660046142b2565b6118e7565b81801561033057600080fd5b5061023261033f3660046142b2565b611ecc565b6101bd670de0b6b3a764000081565b6101bd6213c68081565b61023261036b366004614257565b6120ff565b81801561037c57600080fd5b506101f061038b3660046142f7565b6121ae565b81801561039c57600080fd5b506101f06103ab366004614257565b61282b565b8180156103bc57600080fd5b506101bd6103cb366004614329565b612988565b6101bd6103de3660046142b2565b612f44565b6103f66103f13660046142b2565b613091565b604080519283526020830191909152016101c7565b81801561041757600080fd5b506102326104263660046142b2565b613171565b610262610439366004614257565b613446565b81801561044a57600080fd5b506101f06104593660046142f7565b61349f565b6101bd6201518081565b60008034116104be5760405162461bcd60e51b815260206004820152601a60248201527f47656f6465506f7274616c3a206e6f206176617820676976656e00000000000060448201526064015b60405180910390fd5b6104c885856120ff565b156105155760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a206d696e74696e672069732070617573656400000060448201526064016104b5565b60006105218686613446565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906143fa565b90503481106105b1576105a987873388348989613672565b915050610780565b600034670de0b6b3a76400008311156105e3576105d48989338a8760008b613672565b91506105e08382614744565b90505b60006105ef8a896114e9565b610601670de0b6b3a764000084614725565b61060b9190614711565b8a54909150610625906001600160a01b0316338a84613837565b60405163f237bab360e01b815273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea400908b908b908690859063f237bab39061066c90869086906004016146b5565b60206040518083038186803b15801561068457600080fd5b505af4158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906143fa565b6106c691906146f9565b6040518463ffffffff1660e01b81526004016106e4939291906146d3565b60006040518083038186803b1580156106fc57600080fd5b505af4158015610710573d6000803e3d6000fd5b5050505086818461072191906146f9565b101561076f5760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a206c657373207468616e206d696e4761766178000060448201526064016104b5565b61077981846146f9565b9450505050505b95945050505050565b81600701548111156107dd5760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a20666565206d6f7265207468616e2031303025000060448201526064016104b5565b600982018190556040518181527f885da6736df929c01d726b95426cc170346a259f1cfbd6b238f37fc58f420cfa9060200160405180910390a15050565b6000838383428373c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab3909185856040516020016108509190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401610895939291909283526020830191909152604082015260600190565b60206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e591906143fa565b116109025760405162461bcd60e51b81526004016104b59061452b565b61090c878761390f565b156109295760405162461bcd60e51b81526004016104b59061457f565b600080610937898989613091565b60405163f237bab360e01b8152919350915060009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab390610978908d908d906004016146b5565b60206040518083038186803b15801561099057600080fd5b505af41580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906143fa565b90506000831180156109da5750600081115b610a455760405162461bcd60e51b815260206004820152603660248201527f5374616b655574696c733a2066656520616e6420737572706c75732073686f756044820152756c6420626520626967676572207468616e207a65726f60501b60648201526084016104b5565b808311610a525782610a54565b805b965073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008b8b610a7c8b86614744565b6040518463ffffffff1660e01b8152600401610a9a939291906146d3565b60006040518083038186803b158015610ab257600080fd5b505af4158015610ac6573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb915063f237bab390610b06908e908e906004016145f7565b60206040518083038186803b158015610b1e57600080fd5b505af4158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5691906143fa565b905073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008c8c610b7e8c86614744565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526c756e636c61696d65644665657360981b6044830152606482015260840160006040518083038186803b158015610bd857600080fd5b505af4158015610bec573d6000803e3d6000fd5b5050604051630143c90b60e71b81526000925073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb915063a1e4858090610c2c908f908e9060040161464e565b60206040518083038186803b158015610c4457600080fd5b505af4158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190614176565b905073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008d8d87610ca58e8b614744565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015610cee57600080fd5b505af4158015610d02573d6000803e3d6000fd5b505050506000816001600160a01b03168a60405160006040518083038185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610da95760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a204661696c656420746f2073656e6420417661780060448201526064016104b5565b604080518d8152602081018d90529081018b90527f25722fddd3d0eee26ce8297d72e7b76fce040b1b7e9c3243ccfec84b0f3f24509060600160405180910390a15050505050505050509392505050565b604051630143c90b60e71b815260009084908390339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e4858090610e3c908690869060040161464e565b60206040518083038186803b158015610e5457600080fd5b505af4158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190614176565b6001600160a01b031614610eb25760405162461bcd60e51b81526004016104b5906145b6565b858585428373c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab390918585604051602001610ee59190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401610f2a939291909283526020830191909152604082015260600190565b60206040518083038186803b158015610f4257600080fd5b505af4158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a91906143fa565b11610f975760405162461bcd60e51b81526004016104b59061452b565b610fa1898961390f565b15610fbe5760405162461bcd60e51b81526004016104b59061457f565b60405163f237bab360e01b815260009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab390610ffa908d908d906004016145f7565b60206040518083038186803b15801561101257600080fd5b505af4158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a91906143fa565b60405163f237bab360e01b815290915060009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab390611089908e908e906004016146b5565b60206040518083038186803b1580156110a157600080fd5b505af41580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d991906143fa565b90508181116111365760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a20706f6f6c20666565732065786365656420737572604482015263706c757360e01b60648201526084016104b5565b6040516223bfa960ea1b815273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea40090611170908e908e9087906004016146d3565b60006040518083038186803b15801561118857600080fd5b505af415801561119c573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb915063f237bab3906111dc908f908f9060040161466f565b60206040518083038186803b1580156111f457600080fd5b505af4158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c91906143fa565b905073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008d8d8661125587876146f9565b61125f9190614744565b6040518463ffffffff1660e01b815260040161127d9392919061468e565b60006040518083038186803b15801561129557600080fd5b505af41580156112a9573d6000803e3d6000fd5b5050505060008c73c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63a1e4858090918d6040518363ffffffff1660e01b81526004016112ea92919061464e565b60206040518083038186803b15801561130257600080fd5b505af4158015611316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133a9190614176565b6001600160a01b031661134d8585614744565b604051600081818185875af1925050503d8060008114611389576040519150601f19603f3d011682016040523d82523d6000602084013e61138e565b606091505b50509050806113df5760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a204661696c656420746f2073656e6420417661780060448201526064016104b5565b7fe72e921f860b05525da6c01e054f27683e8b04c1c82ef4335cc414a63c3f15198c61140b8686614744565b6040805192835260208301919091520160405180910390a19c9b505050505050505050505050565b600061143e826139e6565b92915050565b604051630143c90b60e71b815260048101839052602481018290526626282a37b5b2b760c91b604482015260009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e48580906064015b60206040518083038186803b1580156114aa57600080fd5b505af41580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190614176565b9392505050565b60006114fc83546001600160a01b031690565b6001600160a01b031663f759cc3b836040518263ffffffff1660e01b815260040161152991815260200190565b60206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e291906143fa565b604051630143c90b60e71b815260048101849052602481018390526921a7a72a2927a62622a960b11b6044820152339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e485809060640160206040518083038186803b1580156115e057600080fd5b505af41580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190614176565b6001600160a01b03161461167d5760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a206e6f7420434f4e54524f4c4c4552206f662067696044820152651d995b881a5960d21b60648201526084016104b5565b6001600160a01b0381166116e25760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a206d61696e7461696e65722063616e206e6f74206260448201526565207a65726f60d01b60648201526084016104b5565b60405163dff34ff160e01b815260048101849052602481018390526936b0b4b73a30b4b732b960b11b60448201526001600160a01b038216606482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063dff34ff19060840160006040518083038186803b15801561175657600080fd5b505af415801561176a573d6000803e3d6000fd5b50505050505050565b604051630143c90b60e71b815282908290339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e48580906117b2908690869060040161464e565b60206040518083038186803b1580156117ca57600080fd5b505af41580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190614176565b6001600160a01b0316146118285760405162461bcd60e51b81526004016104b5906145b6565b60408051808201825260018152603160f81b60208201529051630eee4dd960e41b815273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9163eee4dd909161187891889188919060040161461b565b60006040518083038186803b15801561189057600080fd5b505af41580156118a4573d6000803e3d6000fd5b505050507fcf61a69571fcb149379b9264df303e430a464346ff265a1bf29782c491aba6d5836040516118d991815260200190565b60405180910390a150505050565b60008082116119385760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a2069642073686f756c64206265203e20300000000060448201526064016104b5565b604051630143c90b60e71b815260048101849052602481018390526d1dda5d1a191c985dd85b141bdbdb60921b604482015260009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e485809060640160206040518083038186803b1580156119a457600080fd5b505af41580156119b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dc9190614176565b6001600160a01b031614611a445760405162461bcd60e51b815260206004820152602960248201527f5374616b655574696c733a207769746864726177616c506f6f6c20616c72656160448201526864792065786973747360b81b60648201526084016104b5565b6001840154611a5b906001600160a01b0316611433565b90506000816001600160a01b031663303e9bea611a7f87546001600160a01b031690565b6040516301ae508b60e11b81526004810188905260248101879052636e616d6560e01b6044820152869073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063035ca1169060640160006040518083038186803b158015611ae057600080fd5b505af4158015611af4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b1c91908101906141b5565b604051602001611b2c919061443f565b60408051808303601f19018152908290526301ae508b60e11b8252600482018a905260248201899052636e616d6560e01b60448301529073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063035ca1169060640160006040518083038186803b158015611b9a57600080fd5b505af4158015611bae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bd691908101906141b5565b604051602001611be69190614472565b6040516020818303038152906040528a600401548b600501548c600601548d60020160009054906101000a90046001600160a01b03166040518963ffffffff1660e01b8152600401611c3f9897969594939291906144bf565b602060405180830381600087803b158015611c5957600080fd5b505af1158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190614176565b9050611ca685670de0b6b3a764000085613a83565b60405163dff34ff160e01b815260048101859052602481018490526d1dda5d1a191c985dd85b141bdbdb60921b60448201526001600160a01b038316606482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063dff34ff19060840160006040518083038186803b158015611d1e57600080fd5b505af4158015611d32573d6000803e3d6000fd5b505060405163dff34ff160e01b815260048101879052602481018690526626282a37b5b2b760c91b60448201526001600160a01b038416606482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb925063dff34ff1915060840160006040518083038186803b158015611da757600080fd5b505af4158015611dbb573d6000803e3d6000fd5b50505050611dd085546001600160a01b031690565b60405163a22cb46560e01b81526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b50505050611e3e8484611444565b60405163095ea7b360e01b81526001600160a01b0384811660048301526000196024830152919091169063095ea7b390604401602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec39190614193565b50509392505050565b604051630143c90b60e71b815260009084908490339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e4858090611f0e908690869060040161464e565b60206040518083038186803b158015611f2657600080fd5b505af4158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190614176565b6001600160a01b031614611f845760405162461bcd60e51b81526004016104b5906145b6565b6040516223bfa960ea1b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b60448201526064810185905273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea4009060840160006040518083038186803b158015611ff357600080fd5b505af4158015612007573d6000803e3d6000fd5b505050508573c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4009091878760405160200161203a9190614499565b604051602081830303815290604052805190602001206000196040518563ffffffff1660e01b8152600401612088949392919093845260208401929092526040830152606082015260800190565b60006040518083038186803b1580156120a057600080fd5b505af41580156120b4573d6000803e3d6000fd5b505060408051888152602081018890527f21a1f9712a3958e2b18cbc36d5d46385602f172ccabcb4948e557731a3a7423193500190505b60405180910390a150600195945050505050565b6040516301ae508b60e11b815260048101839052602481018290526a1cdd185ad954185d5cd95960aa1b604482015260009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063035ca1169060640160006040518083038186803b15801561216857600080fd5b505af415801561217c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a491908101906141b5565b5115159392505050565b604051630143c90b60e71b815283908290339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e48580906121ed908690869060040161464e565b60206040518083038186803b15801561220557600080fd5b505af4158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614176565b6001600160a01b0316146122635760405162461bcd60e51b81526004016104b5906145b6565b848484428373c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab3909185856040516020016122969190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b81526004016122db939291909283526020830191909152604082015260600190565b60206040518083038186803b1580156122f357600080fd5b505af4158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b91906143fa565b116123485760405162461bcd60e51b81526004016104b59061452b565b612352888861390f565b1561236f5760405162461bcd60e51b81526004016104b59061457f565b600034116123bf5760405162461bcd60e51b815260206004820152601b60248201527f5374616b655574696c733a206e6f20617661782069732073656e74000000000060448201526064016104b5565b60405163f237bab360e01b8152349060009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab3906123fd908d908d906004016146b5565b60206040518083038186803b15801561241557600080fd5b505af4158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d91906143fa565b60405163f237bab360e01b815290915060009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39061248c908e908e906004016145f7565b60206040518083038186803b1580156124a457600080fd5b505af41580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc91906143fa565b9050818111156125195760006124f28383614744565b9050838111156124ff5750825b61250981846146f9565b92506125158185614744565b9350505b82156125ee57600061252b8c8c613446565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256357600080fd5b505afa158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b91906143fa565b9050670de0b6b3a76400008111156125d957838111156125b85750825b6125cb8d8d60008e856000600019613672565b506125d68185614744565b93505b83156125ec576125e984846146f9565b92505b505b73c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008c8c61261487876146f9565b6040518463ffffffff1660e01b8152600401612632939291906146d3565b60006040518083038186803b15801561264a57600080fd5b505af415801561265e573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb915063f237bab39061269e908f908f9060040161466f565b60206040518083038186803b1580156126b657600080fd5b505af41580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee91906143fa565b9050348111156127715773c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008d8d61271e3486614744565b6040518463ffffffff1660e01b815260040161273c9392919061468e565b60006040518083038186803b15801561275457600080fd5b505af4158015612768573d6000803e3d6000fd5b505050506127dd565b6040516223bfa960ea1b815273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea400906127ac908f908f9060009060040161468e565b60006040518083038186803b1580156127c457600080fd5b505af41580156127d8573d6000803e3d6000fd5b505050505b604080518c8152602081018c9052348183015290517fde3db790d888b38bebb70a5e7060eebb2bc072ab3e5de4c2b3e58bf9d057dc5d9181900360600190a150505050505050505050505050565b604051630143c90b60e71b815282908290339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e485809061286a908690869060040161464e565b60206040518083038186803b15801561288257600080fd5b505af4158015612896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ba9190614176565b6001600160a01b0316146128e05760405162461bcd60e51b81526004016104b5906145b6565b60408051602081018252600081529051630eee4dd960e41b815273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9163eee4dd909161292791889188919060040161461b565b60006040518083038186803b15801561293f57600080fd5b505af4158015612953573d6000803e3d6000fd5b505050507fb65b578bda484b20413a2e121e50adf4c8d77c34c2459a2f658d8a228b8279cb836040516118d991815260200190565b60038801546000906001600160a01b031633146129f15760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a206d73672e73656e646572204e4f54206f7261636c6044820152606560f81b60648201526084016104b5565b6129fb888761390f565b612a475760405162461bcd60e51b815260206004820181905260248201527f5374616b655574696c733a204f7261636c65206973204e4f542061637469766560448201526064016104b5565b612a5361070842614744565b871015612ab65760405162461bcd60e51b815260206004820152602b60248201527f5374616b655574696c733a205265706f727465642074696d657374616d70206960448201526a1cc81393d5081d985b1a5960aa1b60648201526084016104b5565b600080612ac88b8b8a8a8a8a8a613b80565b60405163f237bab360e01b81529193509150600090839073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab390612b0b908f908e9060040161466f565b60206040518083038186803b158015612b2357600080fd5b505af4158015612b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5b91906143fa565b612b6591906146f9565b6040516223bfa960ea1b815290915073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea40090612ba2908e908d90869060040161468e565b60006040518083038186803b158015612bba57600080fd5b505af4158015612bce573d6000803e3d6000fd5b505050506000828c73c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab390918d6040518363ffffffff1660e01b8152600401612c109291906145f7565b60206040518083038186803b158015612c2857600080fd5b505af4158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6091906143fa565b612c6a91906146f9565b6040516223bfa960ea1b8152600481018e9052602481018c90526c756e636c61696d65644665657360981b60448201526064810182905290915073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea4009060840160006040518083038186803b158015612cdb57600080fd5b505af4158015612cef573d6000803e3d6000fd5b50505050612d048d546001600160a01b031690565b6001600160a01b031663bd85b0398b6040518263ffffffff1660e01b8152600401612d3191815260200190565b60206040518083038186803b158015612d4957600080fd5b505afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8191906143fa565b670de0b6b3a7640000828e73c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab390918f6040518363ffffffff1660e01b8152600401612dc69291906146b5565b60206040518083038186803b158015612dde57600080fd5b505af4158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1691906143fa565b612e2090866146f9565b612e2a9190614744565b612e349190614725565b612e3e9190614711565b9450612e4c8d8d8c88613f99565b612e578d868c613a83565b6040516223bfa960ea1b8152600481018d9052602481018b90527406f7261636c6555706461746554696d655374616d7605c1b604482015242606482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea4009060840160006040518083038186803b158015612ecc57600080fd5b505af4158015612ee0573d6000803e3d6000fd5b5050604080518d81526020810189905290810185905260608101869052608081018e90527fd6830e63bb637542d836b7e0c83b3f7f93ec3a7aa07ecbdd5e4be539ca8baded925060a001905060405180910390a15050505098975050505050505050565b600983015460405163f237bab360e01b815260048101849052602481018390526266656560e81b60448201526000919073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b158015612fab57600080fd5b505af4158015612fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe391906143fa565b116130835760405163f237bab360e01b815260048101849052602481018390526266656560e81b604482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b15801561304657600080fd5b505af415801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e91906143fa565b613089565b83600901545b949350505050565b600080826040516020016130be9181526d616363756d756c6174656446656560901b6020820152602e0190565b60408051808303601f1901815290829052805160209091012063f237bab360e01b8252600482018790526024820186905260448201819052915073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b15801561312f57600080fd5b505af4158015613143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316791906143fa565b9150935093915050565b604051630143c90b60e71b815260009084908490339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e48580906131b3908690869060040161464e565b60206040518083038186803b1580156131cb57600080fd5b505af41580156131df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132039190614176565b6001600160a01b0316146132295760405162461bcd60e51b81526004016104b5906145b6565b60405163f237bab360e01b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b6044820152849073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b15801561329457600080fd5b505af41580156132a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cc91906143fa565b141561335a576040516223bfa960ea1b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b60448201526000606482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea4009060840160006040518083038186803b15801561334157600080fd5b505af4158015613355573d6000803e3d6000fd5b505050505b8573c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea400909187876040516020016133899190614499565b604051602081830303815290604052805190602001206213c680426133ae91906146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b1580156133f757600080fd5b505af415801561340b573d6000803e3d6000fd5b505060408051888152602081018890527f01d08061ca1d76ec162ee0ace672e4f6b555823b72979c7881e786cc68ac3f7793500190506120eb565b604051630143c90b60e71b815260048101839052602481018290526d1dda5d1a191c985dd85b141bdbdb60921b604482015260009073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e4858090606401611492565b604051630143c90b60e71b815283908390339073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063a1e48580906134de908690869060040161464e565b60206040518083038186803b1580156134f657600080fd5b505af415801561350a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352e9190614176565b6001600160a01b0316146135545760405162461bcd60e51b81526004016104b5906145b6565b85600901548311156135b45760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a204d41585f4d41494e5441494e45525f4645452045604482015263292927a960e11b60648201526084016104b5565b6040516223bfa960ea1b815260048101869052602481018590526266656560e81b60448201526064810184905273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb90638efea4009060840160006040518083038186803b15801561361857600080fd5b505af415801561362c573d6000803e3d6000fd5b505060408051878152602081018790527f81a262d98ca887595ab153e1384407a02b7a2aaf612822e067f9dd6613a84ce2935001905060405180910390a1505050505050565b600061367e8786613446565b6040516348b4aac360e11b815260006004820152600160248201526044810186905260648101859052608481018490526001600160a01b039190911690639169558690869060a4016020604051808303818588803b1580156136df57600080fd5b505af11580156136f3573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061371891906143fa565b90506001600160a01b0386166137a15787546001600160a01b0316604051637a94c56560e11b815230600482015260248101879052604481018390526001600160a01b03919091169063f5298aca90606401600060405180830381600087803b15801561378457600080fd5b505af1158015613798573d6000803e3d6000fd5b5050505061382c565b87546001600160a01b0316604051637921219560e11b81523060048201526001600160a01b038881166024830152604482018890526064820184905260a06084830152600060a4830152919091169063f242432a9060c401600060405180830381600087803b15801561381357600080fd5b505af1158015613827573d6000803e3d6000fd5b505050505b979650505050505050565b600082116138925760405162461bcd60e51b815260206004820152602260248201527f5374616b655574696c733a205f6d696e742069642073686f756c64206265203e604482015261020360f41b60648201526084016104b5565b60405163731133e960e01b81526001600160a01b0384811660048301526024820184905260448201839052608060648301526000608483015285169063731133e99060a401600060405180830381600087803b1580156138f157600080fd5b505af1158015613905573d6000803e3d6000fd5b5050505050505050565b600061070861392162015180426147a6565b111580156114e2575061393661070842614744565b60405163f237bab360e01b815260048101859052602481018490527406f7261636c6555706461746554696d655374616d7605c1b604482015273c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b1580156139a657600080fd5b505af41580156139ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139de91906143fa565b109392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116613a7e5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016104b5565b919050565b60008111613ad35760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a2069642073686f756c64206265203e20300000000060448201526064016104b5565b82546001600160a01b03166040516322af599760e01b815260048101849052602481018390526001600160a01b0391909116906322af599790604401600060405180830381600087803b158015613b2957600080fd5b505af1158015613b3d573d6000803e3d6000fd5b505060408051848152602081018690527f8aa4fa52648a6d15edce8a179c792c86f3719d0cc3c572cf90f91948f0f2cb68935001905060405180910390a1505050565b600080848314613be25760405162461bcd60e51b815260206004820152602760248201527f5374616b655574696c733a204172726179206c656e6774687320646f65736e276044820152660e840dac2e8c6d60cb1b60648201526084016104b5565b60005b85811015613eb35787878783818110613c0057613c006147e6565b9050602002013514613e7b57613c196201518042614744565b73c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb63f237bab38b8b8b8b87818110613c4757613c476147e6565b90506020020135604051602001613c5e9190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401613ca3939291909283526020830191909152604082015260600190565b60206040518083038186803b158015613cbb57600080fd5b505af4158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf391906143fa565b11613d585760405162461bcd60e51b815260206004820152602f60248201527f5374616b655574696c733a205f6f7049642061637469766174696f6e4578706960448201526e1c985d1a5bdb881a185cc81c185cdd608a1b60648201526084016104b5565b6000613d7d8b8b8a8a86818110613d7157613d716147e6565b90506020020135612f44565b9050600080613da58c8c8c8c88818110613d9957613d996147e6565b90506020020135613091565b9150915060008d60070154898987818110613dc257613dc26147e6565b9050602002013585613dd49190614725565b613dde9190614711565b905073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008e8e85613e0786896146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015613e5057600080fd5b505af4158015613e64573d6000803e3d6000fd5b505050508086613e7491906146f9565b9550505050505b848482818110613e8d57613e8d6147e6565b9050602002013583613e9f91906146f9565b925080613eab8161478b565b915050613be5565b506000613ec18a8a8a612f44565b905060008a600701548483613ed69190614725565b613ee09190614711565b9050600080613ef08c8c8d613091565b9092509050613eff83866146f9565b945073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb638efea4008d8d84613f2888886146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015613f7157600080fd5b505af4158015613f85573d6000803e3d6000fd5b505050505050505097509795505050505050565b60405163f237bab360e01b815260048101849052602481018390527406f7261636c6555706461746554696d655374616d7605c1b6044820152600090620151809073c7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb9063f237bab39060640160206040518083038186803b15801561401157600080fd5b505af4158015614025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404991906143fa565b614055610708426146f9565b61405f9190614744565b6140699190614711565b9050600061407786856114e9565b905060008660070154838860080154846140919190614725565b61409b9190614725565b6140a59190614711565b6140af90836146f9565b90508084111580156140c15750818410155b61176a5760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a20707269636520646964204e4f54206d657400000060448201526064016104b5565b60008083601f84011261411f57600080fd5b50813567ffffffffffffffff81111561413757600080fd5b6020830191508360208260051b850101111561415257600080fd5b9250929050565b60006020828403121561416b57600080fd5b81356114e281614812565b60006020828403121561418857600080fd5b81516114e281614812565b6000602082840312156141a557600080fd5b815180151581146114e257600080fd5b6000602082840312156141c757600080fd5b815167ffffffffffffffff808211156141df57600080fd5b818401915084601f8301126141f357600080fd5b815181811115614205576142056147fc565b604051601f8201601f19908116603f0116810190838211818310171561422d5761422d6147fc565b8160405282815287602084870101111561424657600080fd5b61382c83602083016020880161475b565b6000806040838503121561426a57600080fd5b50508035926020909101359150565b60008060006060848603121561428e57600080fd5b833592506020840135915060408401356142a781614812565b809150509250925092565b6000806000606084860312156142c757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156142f057600080fd5b5035919050565b6000806000806080858703121561430d57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060008060c0898b03121561434557600080fd5b88359750602089013596506040890135955060608901359450608089013567ffffffffffffffff8082111561437957600080fd5b6143858c838d0161410d565b909650945060a08b013591508082111561439e57600080fd5b506143ab8b828c0161410d565b999c989b5096995094979396929594505050565b600080600080600060a086880312156143d757600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561440c57600080fd5b5051919050565b6000815180845261442b81602086016020860161475b565b601f01601f19169290920160200192915050565b6000825161445181846020870161475b565b6e16a3b2b7b232902ba8102a37b5b2b760891b920191825250600f01919050565b6000825161448481846020870161475b565b6202d57560ec1b920191825250600301919050565b9081527330b1ba34bb30ba34b7b722bc3834b930ba34b7b760611b602082015260340190565b6001600160a01b03898116825260208201899052610100604083018190526000916144ec8483018b614413565b91508382036060850152614500828a614413565b92508760808501528660a08501528560c085015280851660e085015250509998505050505050505050565b60208082526034908201527f5374616b655574696c733a206f70657261746f7249642061637469766174696f6040820152731b915e1c1a5c985d1a5bdb881a185cc81c185cdd60621b606082015260800190565b6020808252601c908201527f5374616b655574696c733a204f7261636c652069732061637469766500000000604082015260600190565b60208082526021908201527f5374616b655574696c733a2073656e646572206e6f74206d61696e7461696e656040820152603960f91b606082015260800190565b91825260208201526c756e636c61696d65644665657360981b604082015260600190565b8381528260208201526a1cdd185ad954185d5cd95960aa1b60408201526080606082015260006107806080830184614413565b91825260208201526936b0b4b73a30b4b732b960b11b604082015260600190565b9182526020820152677042616c616e636560c01b604082015260600190565b9283526020830191909152677042616c616e636560c01b6040830152606082015260800190565b918252602082015266737572706c757360c81b604082015260600190565b928352602083019190915266737572706c757360c81b6040830152606082015260800190565b6000821982111561470c5761470c6147ba565b500190565b600082614720576147206147d0565b500490565b600081600019048311821515161561473f5761473f6147ba565b500290565b600082821015614756576147566147ba565b500390565b60005b8381101561477657818101518382015260200161475e565b83811115614785576000848401525b50505050565b600060001982141561479f5761479f6147ba565b5060010190565b6000826147b5576147b56147d0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461482757600080fd5b5056fea2646970667358221220ece89a2b55e74d2dee56d9ca8947a2ab934026b2b5535643dcbdf1ddb60451c764736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101985760003560e01c806376b05054116100e8578063b86aaf82116100a1578063e7345b691161007b578063e7345b691461040b578063fd34c1c01461042b578063fdf454fa1461043e578063fe406a7d1461045e57600080fd5b8063b86aaf82146103b0578063d163f89a146103d0578063d965692d146103e357600080fd5b806376b05054146103445780637c20672e1461035357806385c56cc51461035d57806386a51db514610370578063901b0a43146103445780639e8c22831461039057600080fd5b80633f4cdcda11610155578063569391b61161012f578063569391b6146102db5780635f365cb4146102fb5780636b4a7685146103045780636ecc89651461032457600080fd5b80633f4cdcda1461028d578063538b984f146102a857806355e66bad146102bb57600080fd5b8063053b592e1461019d5780630700d74b146101d057806313fec1c0146101f25780632f11d0021461021257806334e86093146102425780633c9caf1c1461027a575b600080fd5b8180156101a957600080fd5b506101bd6101b83660046143bf565b610468565b6040519081526020015b60405180910390f35b8180156101dc57600080fd5b506101f06101eb366004614257565b610789565b005b8180156101fe57600080fd5b506101bd61020d3660046142b2565b61081b565b81801561021e57600080fd5b5061023261022d3660046142b2565b610dfa565b60405190151581526020016101c7565b81801561024e57600080fd5b5061026261025d366004614159565b611433565b6040516001600160a01b0390911681526020016101c7565b610262610288366004614257565b611444565b61026261029b3660046142de565b546001600160a01b031690565b6101bd6102b6366004614257565b6114e9565b8180156102c757600080fd5b506101f06102d6366004614279565b611579565b8180156102e757600080fd5b506101f06102f6366004614257565b611773565b6101bd61070881565b81801561031057600080fd5b5061026261031f3660046142b2565b6118e7565b81801561033057600080fd5b5061023261033f3660046142b2565b611ecc565b6101bd670de0b6b3a764000081565b6101bd6213c68081565b61023261036b366004614257565b6120ff565b81801561037c57600080fd5b506101f061038b3660046142f7565b6121ae565b81801561039c57600080fd5b506101f06103ab366004614257565b61282b565b8180156103bc57600080fd5b506101bd6103cb366004614329565b612988565b6101bd6103de3660046142b2565b612f44565b6103f66103f13660046142b2565b613091565b604080519283526020830191909152016101c7565b81801561041757600080fd5b506102326104263660046142b2565b613171565b610262610439366004614257565b613446565b81801561044a57600080fd5b506101f06104593660046142f7565b61349f565b6101bd6201518081565b60008034116104be5760405162461bcd60e51b815260206004820152601a60248201527f47656f6465506f7274616c3a206e6f206176617820676976656e00000000000060448201526064015b60405180910390fd5b6104c885856120ff565b156105155760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a206d696e74696e672069732070617573656400000060448201526064016104b5565b60006105218686613446565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906143fa565b90503481106105b1576105a987873388348989613672565b915050610780565b600034670de0b6b3a76400008311156105e3576105d48989338a8760008b613672565b91506105e08382614744565b90505b60006105ef8a896114e9565b610601670de0b6b3a764000084614725565b61060b9190614711565b8a54909150610625906001600160a01b0316338a84613837565b60405163f237bab360e01b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea400908b908b908690859063f237bab39061066c90869086906004016146b5565b60206040518083038186803b15801561068457600080fd5b505af4158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906143fa565b6106c691906146f9565b6040518463ffffffff1660e01b81526004016106e4939291906146d3565b60006040518083038186803b1580156106fc57600080fd5b505af4158015610710573d6000803e3d6000fd5b5050505086818461072191906146f9565b101561076f5760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a206c657373207468616e206d696e4761766178000060448201526064016104b5565b61077981846146f9565b9450505050505b95945050505050565b81600701548111156107dd5760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a20666565206d6f7265207468616e2031303025000060448201526064016104b5565b600982018190556040518181527f885da6736df929c01d726b95426cc170346a259f1cfbd6b238f37fc58f420cfa9060200160405180910390a15050565b6000838383428373__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab3909185856040516020016108509190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401610895939291909283526020830191909152604082015260600190565b60206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e591906143fa565b116109025760405162461bcd60e51b81526004016104b59061452b565b61090c878761390f565b156109295760405162461bcd60e51b81526004016104b59061457f565b600080610937898989613091565b60405163f237bab360e01b8152919350915060009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390610978908d908d906004016146b5565b60206040518083038186803b15801561099057600080fd5b505af41580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906143fa565b90506000831180156109da5750600081115b610a455760405162461bcd60e51b815260206004820152603660248201527f5374616b655574696c733a2066656520616e6420737572706c75732073686f756044820152756c6420626520626967676572207468616e207a65726f60501b60648201526084016104b5565b808311610a525782610a54565b805b965073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008b8b610a7c8b86614744565b6040518463ffffffff1660e01b8152600401610a9a939291906146d3565b60006040518083038186803b158015610ab257600080fd5b505af4158015610ac6573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073__$71e976e6d346a5055cfd7fe2380e485d9d$__915063f237bab390610b06908e908e906004016145f7565b60206040518083038186803b158015610b1e57600080fd5b505af4158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5691906143fa565b905073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008c8c610b7e8c86614744565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526c756e636c61696d65644665657360981b6044830152606482015260840160006040518083038186803b158015610bd857600080fd5b505af4158015610bec573d6000803e3d6000fd5b5050604051630143c90b60e71b81526000925073__$71e976e6d346a5055cfd7fe2380e485d9d$__915063a1e4858090610c2c908f908e9060040161464e565b60206040518083038186803b158015610c4457600080fd5b505af4158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190614176565b905073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008d8d87610ca58e8b614744565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015610cee57600080fd5b505af4158015610d02573d6000803e3d6000fd5b505050506000816001600160a01b03168a60405160006040518083038185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610da95760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a204661696c656420746f2073656e6420417661780060448201526064016104b5565b604080518d8152602081018d90529081018b90527f25722fddd3d0eee26ce8297d72e7b76fce040b1b7e9c3243ccfec84b0f3f24509060600160405180910390a15050505050505050509392505050565b604051630143c90b60e71b815260009084908390339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e4858090610e3c908690869060040161464e565b60206040518083038186803b158015610e5457600080fd5b505af4158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190614176565b6001600160a01b031614610eb25760405162461bcd60e51b81526004016104b5906145b6565b858585428373__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab390918585604051602001610ee59190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401610f2a939291909283526020830191909152604082015260600190565b60206040518083038186803b158015610f4257600080fd5b505af4158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a91906143fa565b11610f975760405162461bcd60e51b81526004016104b59061452b565b610fa1898961390f565b15610fbe5760405162461bcd60e51b81526004016104b59061457f565b60405163f237bab360e01b815260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390610ffa908d908d906004016145f7565b60206040518083038186803b15801561101257600080fd5b505af4158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a91906143fa565b60405163f237bab360e01b815290915060009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390611089908e908e906004016146b5565b60206040518083038186803b1580156110a157600080fd5b505af41580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d991906143fa565b90508181116111365760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a20706f6f6c20666565732065786365656420737572604482015263706c757360e01b60648201526084016104b5565b6040516223bfa960ea1b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea40090611170908e908e9087906004016146d3565b60006040518083038186803b15801561118857600080fd5b505af415801561119c573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073__$71e976e6d346a5055cfd7fe2380e485d9d$__915063f237bab3906111dc908f908f9060040161466f565b60206040518083038186803b1580156111f457600080fd5b505af4158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c91906143fa565b905073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008d8d8661125587876146f9565b61125f9190614744565b6040518463ffffffff1660e01b815260040161127d9392919061468e565b60006040518083038186803b15801561129557600080fd5b505af41580156112a9573d6000803e3d6000fd5b5050505060008c73__$71e976e6d346a5055cfd7fe2380e485d9d$__63a1e4858090918d6040518363ffffffff1660e01b81526004016112ea92919061464e565b60206040518083038186803b15801561130257600080fd5b505af4158015611316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133a9190614176565b6001600160a01b031661134d8585614744565b604051600081818185875af1925050503d8060008114611389576040519150601f19603f3d011682016040523d82523d6000602084013e61138e565b606091505b50509050806113df5760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a204661696c656420746f2073656e6420417661780060448201526064016104b5565b7fe72e921f860b05525da6c01e054f27683e8b04c1c82ef4335cc414a63c3f15198c61140b8686614744565b6040805192835260208301919091520160405180910390a19c9b505050505050505050505050565b600061143e826139e6565b92915050565b604051630143c90b60e71b815260048101839052602481018290526626282a37b5b2b760c91b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e48580906064015b60206040518083038186803b1580156114aa57600080fd5b505af41580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190614176565b9392505050565b60006114fc83546001600160a01b031690565b6001600160a01b031663f759cc3b836040518263ffffffff1660e01b815260040161152991815260200190565b60206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e291906143fa565b604051630143c90b60e71b815260048101849052602481018390526921a7a72a2927a62622a960b11b6044820152339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640160206040518083038186803b1580156115e057600080fd5b505af41580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190614176565b6001600160a01b03161461167d5760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a206e6f7420434f4e54524f4c4c4552206f662067696044820152651d995b881a5960d21b60648201526084016104b5565b6001600160a01b0381166116e25760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a206d61696e7461696e65722063616e206e6f74206260448201526565207a65726f60d01b60648201526084016104b5565b60405163dff34ff160e01b815260048101849052602481018390526936b0b4b73a30b4b732b960b11b60448201526001600160a01b038216606482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff19060840160006040518083038186803b15801561175657600080fd5b505af415801561176a573d6000803e3d6000fd5b50505050505050565b604051630143c90b60e71b815282908290339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e48580906117b2908690869060040161464e565b60206040518083038186803b1580156117ca57600080fd5b505af41580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190614176565b6001600160a01b0316146118285760405162461bcd60e51b81526004016104b5906145b6565b60408051808201825260018152603160f81b60208201529051630eee4dd960e41b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9163eee4dd909161187891889188919060040161461b565b60006040518083038186803b15801561189057600080fd5b505af41580156118a4573d6000803e3d6000fd5b505050507fcf61a69571fcb149379b9264df303e430a464346ff265a1bf29782c491aba6d5836040516118d991815260200190565b60405180910390a150505050565b60008082116119385760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a2069642073686f756c64206265203e20300000000060448201526064016104b5565b604051630143c90b60e71b815260048101849052602481018390526d1dda5d1a191c985dd85b141bdbdb60921b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809060640160206040518083038186803b1580156119a457600080fd5b505af41580156119b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dc9190614176565b6001600160a01b031614611a445760405162461bcd60e51b815260206004820152602960248201527f5374616b655574696c733a207769746864726177616c506f6f6c20616c72656160448201526864792065786973747360b81b60648201526084016104b5565b6001840154611a5b906001600160a01b0316611433565b90506000816001600160a01b031663303e9bea611a7f87546001600160a01b031690565b6040516301ae508b60e11b81526004810188905260248101879052636e616d6560e01b6044820152869073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063035ca1169060640160006040518083038186803b158015611ae057600080fd5b505af4158015611af4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b1c91908101906141b5565b604051602001611b2c919061443f565b60408051808303601f19018152908290526301ae508b60e11b8252600482018a905260248201899052636e616d6560e01b60448301529073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063035ca1169060640160006040518083038186803b158015611b9a57600080fd5b505af4158015611bae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bd691908101906141b5565b604051602001611be69190614472565b6040516020818303038152906040528a600401548b600501548c600601548d60020160009054906101000a90046001600160a01b03166040518963ffffffff1660e01b8152600401611c3f9897969594939291906144bf565b602060405180830381600087803b158015611c5957600080fd5b505af1158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190614176565b9050611ca685670de0b6b3a764000085613a83565b60405163dff34ff160e01b815260048101859052602481018490526d1dda5d1a191c985dd85b141bdbdb60921b60448201526001600160a01b038316606482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063dff34ff19060840160006040518083038186803b158015611d1e57600080fd5b505af4158015611d32573d6000803e3d6000fd5b505060405163dff34ff160e01b815260048101879052602481018690526626282a37b5b2b760c91b60448201526001600160a01b038416606482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__925063dff34ff1915060840160006040518083038186803b158015611da757600080fd5b505af4158015611dbb573d6000803e3d6000fd5b50505050611dd085546001600160a01b031690565b60405163a22cb46560e01b81526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b50505050611e3e8484611444565b60405163095ea7b360e01b81526001600160a01b0384811660048301526000196024830152919091169063095ea7b390604401602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec39190614193565b50509392505050565b604051630143c90b60e71b815260009084908490339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e4858090611f0e908690869060040161464e565b60206040518083038186803b158015611f2657600080fd5b505af4158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190614176565b6001600160a01b031614611f845760405162461bcd60e51b81526004016104b5906145b6565b6040516223bfa960ea1b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b60448201526064810185905273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea4009060840160006040518083038186803b158015611ff357600080fd5b505af4158015612007573d6000803e3d6000fd5b505050508573__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4009091878760405160200161203a9190614499565b604051602081830303815290604052805190602001206000196040518563ffffffff1660e01b8152600401612088949392919093845260208401929092526040830152606082015260800190565b60006040518083038186803b1580156120a057600080fd5b505af41580156120b4573d6000803e3d6000fd5b505060408051888152602081018890527f21a1f9712a3958e2b18cbc36d5d46385602f172ccabcb4948e557731a3a7423193500190505b60405180910390a150600195945050505050565b6040516301ae508b60e11b815260048101839052602481018290526a1cdd185ad954185d5cd95960aa1b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063035ca1169060640160006040518083038186803b15801561216857600080fd5b505af415801561217c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a491908101906141b5565b5115159392505050565b604051630143c90b60e71b815283908290339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e48580906121ed908690869060040161464e565b60206040518083038186803b15801561220557600080fd5b505af4158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614176565b6001600160a01b0316146122635760405162461bcd60e51b81526004016104b5906145b6565b848484428373__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab3909185856040516020016122969190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b81526004016122db939291909283526020830191909152604082015260600190565b60206040518083038186803b1580156122f357600080fd5b505af4158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b91906143fa565b116123485760405162461bcd60e51b81526004016104b59061452b565b612352888861390f565b1561236f5760405162461bcd60e51b81526004016104b59061457f565b600034116123bf5760405162461bcd60e51b815260206004820152601b60248201527f5374616b655574696c733a206e6f20617661782069732073656e74000000000060448201526064016104b5565b60405163f237bab360e01b8152349060009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab3906123fd908d908d906004016146b5565b60206040518083038186803b15801561241557600080fd5b505af4158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d91906143fa565b60405163f237bab360e01b815290915060009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39061248c908e908e906004016145f7565b60206040518083038186803b1580156124a457600080fd5b505af41580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc91906143fa565b9050818111156125195760006124f28383614744565b9050838111156124ff5750825b61250981846146f9565b92506125158185614744565b9350505b82156125ee57600061252b8c8c613446565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256357600080fd5b505afa158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b91906143fa565b9050670de0b6b3a76400008111156125d957838111156125b85750825b6125cb8d8d60008e856000600019613672565b506125d68185614744565b93505b83156125ec576125e984846146f9565b92505b505b73__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008c8c61261487876146f9565b6040518463ffffffff1660e01b8152600401612632939291906146d3565b60006040518083038186803b15801561264a57600080fd5b505af415801561265e573d6000803e3d6000fd5b505060405163f237bab360e01b81526000925073__$71e976e6d346a5055cfd7fe2380e485d9d$__915063f237bab39061269e908f908f9060040161466f565b60206040518083038186803b1580156126b657600080fd5b505af41580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee91906143fa565b9050348111156127715773__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008d8d61271e3486614744565b6040518463ffffffff1660e01b815260040161273c9392919061468e565b60006040518083038186803b15801561275457600080fd5b505af4158015612768573d6000803e3d6000fd5b505050506127dd565b6040516223bfa960ea1b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea400906127ac908f908f9060009060040161468e565b60006040518083038186803b1580156127c457600080fd5b505af41580156127d8573d6000803e3d6000fd5b505050505b604080518c8152602081018c9052348183015290517fde3db790d888b38bebb70a5e7060eebb2bc072ab3e5de4c2b3e58bf9d057dc5d9181900360600190a150505050505050505050505050565b604051630143c90b60e71b815282908290339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e485809061286a908690869060040161464e565b60206040518083038186803b15801561288257600080fd5b505af4158015612896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ba9190614176565b6001600160a01b0316146128e05760405162461bcd60e51b81526004016104b5906145b6565b60408051602081018252600081529051630eee4dd960e41b815273__$71e976e6d346a5055cfd7fe2380e485d9d$__9163eee4dd909161292791889188919060040161461b565b60006040518083038186803b15801561293f57600080fd5b505af4158015612953573d6000803e3d6000fd5b505050507fb65b578bda484b20413a2e121e50adf4c8d77c34c2459a2f658d8a228b8279cb836040516118d991815260200190565b60038801546000906001600160a01b031633146129f15760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a206d73672e73656e646572204e4f54206f7261636c6044820152606560f81b60648201526084016104b5565b6129fb888761390f565b612a475760405162461bcd60e51b815260206004820181905260248201527f5374616b655574696c733a204f7261636c65206973204e4f542061637469766560448201526064016104b5565b612a5361070842614744565b871015612ab65760405162461bcd60e51b815260206004820152602b60248201527f5374616b655574696c733a205265706f727465642074696d657374616d70206960448201526a1cc81393d5081d985b1a5960aa1b60648201526084016104b5565b600080612ac88b8b8a8a8a8a8a613b80565b60405163f237bab360e01b81529193509150600090839073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab390612b0b908f908e9060040161466f565b60206040518083038186803b158015612b2357600080fd5b505af4158015612b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5b91906143fa565b612b6591906146f9565b6040516223bfa960ea1b815290915073__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea40090612ba2908e908d90869060040161468e565b60006040518083038186803b158015612bba57600080fd5b505af4158015612bce573d6000803e3d6000fd5b505050506000828c73__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab390918d6040518363ffffffff1660e01b8152600401612c109291906145f7565b60206040518083038186803b158015612c2857600080fd5b505af4158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6091906143fa565b612c6a91906146f9565b6040516223bfa960ea1b8152600481018e9052602481018c90526c756e636c61696d65644665657360981b60448201526064810182905290915073__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea4009060840160006040518083038186803b158015612cdb57600080fd5b505af4158015612cef573d6000803e3d6000fd5b50505050612d048d546001600160a01b031690565b6001600160a01b031663bd85b0398b6040518263ffffffff1660e01b8152600401612d3191815260200190565b60206040518083038186803b158015612d4957600080fd5b505afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8191906143fa565b670de0b6b3a7640000828e73__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab390918f6040518363ffffffff1660e01b8152600401612dc69291906146b5565b60206040518083038186803b158015612dde57600080fd5b505af4158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1691906143fa565b612e2090866146f9565b612e2a9190614744565b612e349190614725565b612e3e9190614711565b9450612e4c8d8d8c88613f99565b612e578d868c613a83565b6040516223bfa960ea1b8152600481018d9052602481018b90527406f7261636c6555706461746554696d655374616d7605c1b604482015242606482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea4009060840160006040518083038186803b158015612ecc57600080fd5b505af4158015612ee0573d6000803e3d6000fd5b5050604080518d81526020810189905290810185905260608101869052608081018e90527fd6830e63bb637542d836b7e0c83b3f7f93ec3a7aa07ecbdd5e4be539ca8baded925060a001905060405180910390a15050505098975050505050505050565b600983015460405163f237bab360e01b815260048101849052602481018390526266656560e81b60448201526000919073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b158015612fab57600080fd5b505af4158015612fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe391906143fa565b116130835760405163f237bab360e01b815260048101849052602481018390526266656560e81b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561304657600080fd5b505af415801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e91906143fa565b613089565b83600901545b949350505050565b600080826040516020016130be9181526d616363756d756c6174656446656560901b6020820152602e0190565b60408051808303601f1901815290829052805160209091012063f237bab360e01b8252600482018790526024820186905260448201819052915073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561312f57600080fd5b505af4158015613143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316791906143fa565b9150935093915050565b604051630143c90b60e71b815260009084908490339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e48580906131b3908690869060040161464e565b60206040518083038186803b1580156131cb57600080fd5b505af41580156131df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132039190614176565b6001600160a01b0316146132295760405162461bcd60e51b81526004016104b5906145b6565b60405163f237bab360e01b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b6044820152849073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561329457600080fd5b505af41580156132a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cc91906143fa565b141561335a576040516223bfa960ea1b815260048101879052602481018690526d30b1ba34bb32a7b832b930ba37b960911b60448201526000606482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea4009060840160006040518083038186803b15801561334157600080fd5b505af4158015613355573d6000803e3d6000fd5b505050505b8573__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea400909187876040516020016133899190614499565b604051602081830303815290604052805190602001206213c680426133ae91906146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b1580156133f757600080fd5b505af415801561340b573d6000803e3d6000fd5b505060408051888152602081018890527f01d08061ca1d76ec162ee0ace672e4f6b555823b72979c7881e786cc68ac3f7793500190506120eb565b604051630143c90b60e71b815260048101839052602481018290526d1dda5d1a191c985dd85b141bdbdb60921b604482015260009073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e4858090606401611492565b604051630143c90b60e71b815283908390339073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063a1e48580906134de908690869060040161464e565b60206040518083038186803b1580156134f657600080fd5b505af415801561350a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352e9190614176565b6001600160a01b0316146135545760405162461bcd60e51b81526004016104b5906145b6565b85600901548311156135b45760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a204d41585f4d41494e5441494e45525f4645452045604482015263292927a960e11b60648201526084016104b5565b6040516223bfa960ea1b815260048101869052602481018590526266656560e81b60448201526064810184905273__$71e976e6d346a5055cfd7fe2380e485d9d$__90638efea4009060840160006040518083038186803b15801561361857600080fd5b505af415801561362c573d6000803e3d6000fd5b505060408051878152602081018790527f81a262d98ca887595ab153e1384407a02b7a2aaf612822e067f9dd6613a84ce2935001905060405180910390a1505050505050565b600061367e8786613446565b6040516348b4aac360e11b815260006004820152600160248201526044810186905260648101859052608481018490526001600160a01b039190911690639169558690869060a4016020604051808303818588803b1580156136df57600080fd5b505af11580156136f3573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061371891906143fa565b90506001600160a01b0386166137a15787546001600160a01b0316604051637a94c56560e11b815230600482015260248101879052604481018390526001600160a01b03919091169063f5298aca90606401600060405180830381600087803b15801561378457600080fd5b505af1158015613798573d6000803e3d6000fd5b5050505061382c565b87546001600160a01b0316604051637921219560e11b81523060048201526001600160a01b038881166024830152604482018890526064820184905260a06084830152600060a4830152919091169063f242432a9060c401600060405180830381600087803b15801561381357600080fd5b505af1158015613827573d6000803e3d6000fd5b505050505b979650505050505050565b600082116138925760405162461bcd60e51b815260206004820152602260248201527f5374616b655574696c733a205f6d696e742069642073686f756c64206265203e604482015261020360f41b60648201526084016104b5565b60405163731133e960e01b81526001600160a01b0384811660048301526024820184905260448201839052608060648301526000608483015285169063731133e99060a401600060405180830381600087803b1580156138f157600080fd5b505af1158015613905573d6000803e3d6000fd5b5050505050505050565b600061070861392162015180426147a6565b111580156114e2575061393661070842614744565b60405163f237bab360e01b815260048101859052602481018490527406f7261636c6555706461746554696d655374616d7605c1b604482015273__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b1580156139a657600080fd5b505af41580156139ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139de91906143fa565b109392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116613a7e5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016104b5565b919050565b60008111613ad35760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a2069642073686f756c64206265203e20300000000060448201526064016104b5565b82546001600160a01b03166040516322af599760e01b815260048101849052602481018390526001600160a01b0391909116906322af599790604401600060405180830381600087803b158015613b2957600080fd5b505af1158015613b3d573d6000803e3d6000fd5b505060408051848152602081018690527f8aa4fa52648a6d15edce8a179c792c86f3719d0cc3c572cf90f91948f0f2cb68935001905060405180910390a1505050565b600080848314613be25760405162461bcd60e51b815260206004820152602760248201527f5374616b655574696c733a204172726179206c656e6774687320646f65736e276044820152660e840dac2e8c6d60cb1b60648201526084016104b5565b60005b85811015613eb35787878783818110613c0057613c006147e6565b9050602002013514613e7b57613c196201518042614744565b73__$71e976e6d346a5055cfd7fe2380e485d9d$__63f237bab38b8b8b8b87818110613c4757613c476147e6565b90506020020135604051602001613c5e9190614499565b604051602081830303815290604052805190602001206040518463ffffffff1660e01b8152600401613ca3939291909283526020830191909152604082015260600190565b60206040518083038186803b158015613cbb57600080fd5b505af4158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf391906143fa565b11613d585760405162461bcd60e51b815260206004820152602f60248201527f5374616b655574696c733a205f6f7049642061637469766174696f6e4578706960448201526e1c985d1a5bdb881a185cc81c185cdd608a1b60648201526084016104b5565b6000613d7d8b8b8a8a86818110613d7157613d716147e6565b90506020020135612f44565b9050600080613da58c8c8c8c88818110613d9957613d996147e6565b90506020020135613091565b9150915060008d60070154898987818110613dc257613dc26147e6565b9050602002013585613dd49190614725565b613dde9190614711565b905073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008e8e85613e0786896146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015613e5057600080fd5b505af4158015613e64573d6000803e3d6000fd5b505050508086613e7491906146f9565b9550505050505b848482818110613e8d57613e8d6147e6565b9050602002013583613e9f91906146f9565b925080613eab8161478b565b915050613be5565b506000613ec18a8a8a612f44565b905060008a600701548483613ed69190614725565b613ee09190614711565b9050600080613ef08c8c8d613091565b9092509050613eff83866146f9565b945073__$71e976e6d346a5055cfd7fe2380e485d9d$__638efea4008d8d84613f2888886146f9565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b158015613f7157600080fd5b505af4158015613f85573d6000803e3d6000fd5b505050505050505097509795505050505050565b60405163f237bab360e01b815260048101849052602481018390527406f7261636c6555706461746554696d655374616d7605c1b6044820152600090620151809073__$71e976e6d346a5055cfd7fe2380e485d9d$__9063f237bab39060640160206040518083038186803b15801561401157600080fd5b505af4158015614025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404991906143fa565b614055610708426146f9565b61405f9190614744565b6140699190614711565b9050600061407786856114e9565b905060008660070154838860080154846140919190614725565b61409b9190614725565b6140a59190614711565b6140af90836146f9565b90508084111580156140c15750818410155b61176a5760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a20707269636520646964204e4f54206d657400000060448201526064016104b5565b60008083601f84011261411f57600080fd5b50813567ffffffffffffffff81111561413757600080fd5b6020830191508360208260051b850101111561415257600080fd5b9250929050565b60006020828403121561416b57600080fd5b81356114e281614812565b60006020828403121561418857600080fd5b81516114e281614812565b6000602082840312156141a557600080fd5b815180151581146114e257600080fd5b6000602082840312156141c757600080fd5b815167ffffffffffffffff808211156141df57600080fd5b818401915084601f8301126141f357600080fd5b815181811115614205576142056147fc565b604051601f8201601f19908116603f0116810190838211818310171561422d5761422d6147fc565b8160405282815287602084870101111561424657600080fd5b61382c83602083016020880161475b565b6000806040838503121561426a57600080fd5b50508035926020909101359150565b60008060006060848603121561428e57600080fd5b833592506020840135915060408401356142a781614812565b809150509250925092565b6000806000606084860312156142c757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156142f057600080fd5b5035919050565b6000806000806080858703121561430d57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060008060c0898b03121561434557600080fd5b88359750602089013596506040890135955060608901359450608089013567ffffffffffffffff8082111561437957600080fd5b6143858c838d0161410d565b909650945060a08b013591508082111561439e57600080fd5b506143ab8b828c0161410d565b999c989b5096995094979396929594505050565b600080600080600060a086880312156143d757600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561440c57600080fd5b5051919050565b6000815180845261442b81602086016020860161475b565b601f01601f19169290920160200192915050565b6000825161445181846020870161475b565b6e16a3b2b7b232902ba8102a37b5b2b760891b920191825250600f01919050565b6000825161448481846020870161475b565b6202d57560ec1b920191825250600301919050565b9081527330b1ba34bb30ba34b7b722bc3834b930ba34b7b760611b602082015260340190565b6001600160a01b03898116825260208201899052610100604083018190526000916144ec8483018b614413565b91508382036060850152614500828a614413565b92508760808501528660a08501528560c085015280851660e085015250509998505050505050505050565b60208082526034908201527f5374616b655574696c733a206f70657261746f7249642061637469766174696f6040820152731b915e1c1a5c985d1a5bdb881a185cc81c185cdd60621b606082015260800190565b6020808252601c908201527f5374616b655574696c733a204f7261636c652069732061637469766500000000604082015260600190565b60208082526021908201527f5374616b655574696c733a2073656e646572206e6f74206d61696e7461696e656040820152603960f91b606082015260800190565b91825260208201526c756e636c61696d65644665657360981b604082015260600190565b8381528260208201526a1cdd185ad954185d5cd95960aa1b60408201526080606082015260006107806080830184614413565b91825260208201526936b0b4b73a30b4b732b960b11b604082015260600190565b9182526020820152677042616c616e636560c01b604082015260600190565b9283526020830191909152677042616c616e636560c01b6040830152606082015260800190565b918252602082015266737572706c757360c81b604082015260600190565b928352602083019190915266737572706c757360c81b6040830152606082015260800190565b6000821982111561470c5761470c6147ba565b500190565b600082614720576147206147d0565b500490565b600081600019048311821515161561473f5761473f6147ba565b500290565b600082821015614756576147566147ba565b500390565b60005b8381101561477657818101518382015260200161475e565b83811115614785576000848401525b50505050565b600060001982141561479f5761479f6147ba565b5060010190565b6000826147b5576147b56147d0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461482757600080fd5b5056fea2646970667358221220ece89a2b55e74d2dee56d9ca8947a2ab934026b2b5535643dcbdf1ddb60451c764736f6c63430008070033",
  "libraries": {
    "DataStoreUtils": "0xc7332D9AbEF755C42b4dF9d9db09BEEf15F8f9Fb"
  },
  "devdoc": {
    "details": "Contracts relying on this library must initialize StakeUtils.StakePoolALL \"fee\" variables are limited by FEE_DENOMINATOR = 100% Note *suggested* refer to GeodeUtils before reviewing Note refer to DataStoreUtils before reviewing Note beware of the staking pool and operator implementations: Operatores have properties like accumulatedFee, fee(as a percentage), maintainer. Every staking pool(aka planet) is also an operator by design. Planets(type 5) inherit operators (type 4), with additional properties like staking pools -relates to params: pBalance, surplus, unclaimedFees-, withdrawal pool - relates to debt - and liquid asset(gAvax).",
    "kind": "dev",
    "methods": {
      "accumulatedFee(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "function also returns the key for ease of use, please use."
      },
      "activateOperator(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "However it can still continue holding its old balance until activationExpiration, and gain feesactivationExpiration timestamp until new activeoperator continues getting fees from id's staking pool"
      },
      "deactivateOperator(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "when activationExpiration is up, operator will NOT be able generate fees from pool, it is expected for them to return the assets as surplus with payDebt function_deactivateAfter seconds until activation expires,"
      },
      "deployWithdrawalPool(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "details": "sets the withdrawal pool with respective"
      },
      "oraclePrice(StakeUtils.StakePool storage,uint256)": {
        "details": "also the *mint price* when there is a no debt"
      },
      "reportOracle(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256[],uint256[])": {
        "details": "simply the new price is found by (pBALANCE + surplus - fees) / totalSupply)",
        "params": {
          "_opIds": "all ids of all operators who still collect fees.",
          "_pBalanceIncreases": "the amount of avax that has been gained by the operator as POS rewards, respective to _opIds",
          "_reportedTimeStamp": "ensures prepeared report is prepeared within last activation period, prevent previous reports to be accepted. "
        },
        "returns": {
          "price": ": new price after sanitychecks, might be useful if onchain oracle in the future"
        }
      },
      "stake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "params": {
          "deadline": "swap op param // d  m.v // 100 10 => buyback // 100 100  => buyback // 10 100  =>  buyback + mint // 0 x => mint",
          "minGavax": "swap op param",
          "poolId": "id of the staking pool, withdrawal pool and gAVAX to be used."
        }
      }
    },
    "stateVariables": {
      "gAVAX_DENOMINATOR": {
        "details": "gAVAX_DENOMINATOR makes sure that we are taking care of decimals on calculations related to gAVAX"
      }
    },
    "title": "StakeUtils library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ORACLE_PERIOD()": {
        "notice": "Oracle is active for the first 30 min for a day"
      },
      "accumulatedFee(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "accumulatedFee is stored with a key combines the poolId, claimerId & \"accumulatedFee\""
      },
      "activateOperator(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "When a pool maintainer wants another operator's maintainer to be able to start claiming surplus and creating validators, it activates the validator.Changes activeOperator of the given ID; old activeOperator can NOT claim surplus anymore"
      },
      "claimFee(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "anyone can call this function, but it sends AVAX to maintainer.reverts if there are not enough surplus."
      },
      "claimSurplus(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "only authorized Operator is expected to claim the surplus of a staking poolcurrent fees are not allowed to be claimed from surplus, however oracle update can also make it hard since it increases unclaimedFees without touching the surplus"
      },
      "deactivateOperator(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "deactivates an old operator for the given staking pool"
      },
      "deployWithdrawalPool(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "notice": "deploys a new withdrawal pool using DEFAULT_SWAP_POOL"
      },
      "gAVAX_DENOMINATOR()": {
        "notice": "gAVAX lacks *decimals*,"
      },
      "getMaintainerFee(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "notice": "even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum"
      },
      "isStakingPausedForPool(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "** WITHDRAWAL POOL specific functions **"
      },
      "oraclePrice(StakeUtils.StakePool storage,uint256)": {
        "notice": "oraclePrice is a reliable source for any contract operation"
      },
      "pauseStakingForPool(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "pausing only prevents new staking operations. when a pool is paused for staking there are NO new funds to be minted, NO surplus."
      },
      "payDebt(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "Only an Operator is expected to pay for the DEBT of a staking pool. When it is paid, p subChain balance decreases, effectively changing the price calculations!"
      },
      "reportOracle(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256[],uint256[])": {
        "notice": "only Oracle can report a new price. However price is not purely calculated by it. the balance on P subchain is estimated by it, including the unrealized staking rewards. Oracle has a pessimistic approach to make sure price will not decrease by a lot even in the case of loss of funds."
      },
      "stake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "notice": "staking function. buys if price is low, mints new tokens if a surplus is sent (extra avax through msg.value)"
      }
    },
    "notice": "Exclusively contains functions related to Avax Liquid Staking designed by Geode Financebiggest part of the functionality is related to Withdrawal Pools which relies on continuous buybacks for price peg with DEBT/SURPLUS calculations",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}